# Functions

## Definition

To get the manual on a base function, type `?function_name`{.R}.

A function returns the last thing that is called in it. Thus a function defined like that will return nothing:
```{r, warnings=FALSE}
geom_mean <- function(x, y){
    a <- sqrt(x*y)
}
geom_mean(1,2)
```
While this will return what you want:
```{r}
geom_mean <- function(x, y){
    a <- sqrt(x*y)
    a
}
geom_mean(1,2) #returns a
```

The result of a function can be a list, a data.frame, a vector... or nothing. And you can attribute the result of a function to a variable:

```{r, warnings=FALSE}
person <- function(name, age){
    list(name=name, age=age)
}
joe <- person(name="Joe", age=33)
joe
```

One can add default values to variables:
```{r, warnings=FALSE}
testfunc <- function(x, y=1){
    x*y
}
testfunc(1)
testfunc(1, y=2)
testfunc(1:3, y=.1)
```

And pass arguments to other functions:
```{r, warnings=FALSE}
testfunc2 <- function(x, ...){
    head(x, ...)
}
testfunc2(1:100)
testfunc2(1:100,2)
```

Or even pass a function as argument:
```{r, warnings=FALSE}
testfunc3 <- function(FUN, ...){
    FUN(...)
}
testfunc3(sum, 1:10)
testfunc3(plot, 1:10, sin(1:10), type="l")
```


## Interpolation of data

It is possible to interpolate data through the `approxfun()`{.R} and `splinefun()`{.R} functions: while the former uses linear interpolation, the latter uses cubic splines (polynomials).

```{r}
xmin <- -2*pi; xmax <- 2*pi
x  <- runif(30, min=xmin, max=xmax)
xx <- seq(xmin, xmax, .1)
y  <- sin(x)
# Linear interpolation
lin_interp <- approxfun(x,y)        #is a function
lin_interp(0); lin_interp(pi)
yy_lin     <- approx(x, y, xout=xx) #is a list containing x and y

# Cubic spline interpolation
spl_interp <- splinefun(x,y)        #is a function
yy_spl     <- spline(x, y, xout=xx) #is a list containing x and y

par(family = "Helvetica", cex.lab=1.5, cex.axis=1.4, 
    mgp = c(2.4, .5, 0), tck=0.02, mar=c(4, 4, 2, .5), lwd=2, las=1)
plot(x, y, pch=16, cex=2, ylim=c(-1,1.6))
lines(xx, lin_interp(xx), col="royalblue") # equivalent to: lines(yy_lin, col="royalblue")
lines(xx, spl_interp(xx), col="red", lty=2)# equivalent to: lines(yy_spl, col="red")
legend("topright",
    cex=1.2,
    lty=c(NA, 1, 2),
    lwd=c(NA, 2, 2),
    pch=c(16, NA, NA),
    col=c("black", "royalblue", "red"),
    bty = "n",
    legend=c("'Experimental' points", "Linear interpolation", "Spline interpolation")
    )
```


## Exercises {#exo-functions}

<a href="Data/exo-in-class.zip" download target="_blank">Download the archive with all the exercises files</a>, unzip it in your `R class` RStudio project, and edit the R files.



<br>
<br>
<br>
<br>
<br>




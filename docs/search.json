[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Reproducible data treatment with R",
    "section": "",
    "text": "Welcome",
    "crumbs": [
      "Welcome"
    ]
  },
  {
    "objectID": "index.html#license",
    "href": "index.html#license",
    "title": "Reproducible data treatment with R",
    "section": "License",
    "text": "License\nThis book and its code samples are licensed to you under the MIT License.",
    "crumbs": [
      "Welcome"
    ]
  },
  {
    "objectID": "01-about.html",
    "href": "01-about.html",
    "title": "\n1  About the class\n",
    "section": "",
    "text": "1.1 Objectives of the class\nThe goal of this class is that at the end, the students are able to:\nWhat you will learn here will be useful in any scientific domain. The examples in this course are however mainly coming from the type of data you might encounter in Materials Science because, well, it’s what I have on hand…",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>About the class</span>"
    ]
  },
  {
    "objectID": "01-about.html#objectives-of-the-class",
    "href": "01-about.html#objectives-of-the-class",
    "title": "\n1  About the class\n",
    "section": "",
    "text": "Treat their data with the free and open source language R, i.e.:\n\nRead, browse, manipulate and plot their data\nModel or simulate their data\n\n\nMake automatic reporting through Rmarkdown or Quarto\n\nBuild a graphical interface with Shiny to interact with their data and output something (a value, a pdf report, a graph…)",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>About the class</span>"
    ]
  },
  {
    "objectID": "01-about.html#prerequisites",
    "href": "01-about.html#prerequisites",
    "title": "\n1  About the class\n",
    "section": "\n1.2 Prerequisites",
    "text": "1.2 Prerequisites\n\n\nCoding skills: none expected.\nThe students should come with a laptop with admin rights (i.e. you should be able to install stuff).",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>About the class</span>"
    ]
  },
  {
    "objectID": "01-about.html#motivations",
    "href": "01-about.html#motivations",
    "title": "\n1  About the class\n",
    "section": "\n1.3 Motivations",
    "text": "1.3 Motivations\n\n1.3.1 Reproducible data treatment: why it matters\nHere is an introduction from the Wikipedia page on reproducible research:\n\nIn 2016, Nature conducted a survey of 1576 researchers who took a brief online questionnaire on reproducibility in research. According to the survey, more than 70% of researchers have tried and failed to reproduce another scientist’s experiments, and more than half have failed to reproduce their own experiments. […] Although 52% of those surveyed agree there is a significant ‘crisis’ of reproducibility, less than 31% think failure to reproduce published results means the result is probably wrong, and most say they still trust the published literature.1\n\nReplicability and reproducibility are some of the keys to scientific integrity. Establishing a workflow in which your data are always treated in the same manner is a necessity, because it is a way to:\n\n\nMinimize errors inherent to human manipulation\n\nKeep track of all the treatments you perform on your data and document your methodology: this allows others to reproduce your data, but also yourself.\nHelp you to make sense of all your data, and avoid disregarding some data (hence help you keep your scientific integrity)\nGain tremendous amounts of time\n\n\n\n\n\n\n\nGoal of this class\n\n\n\nIt is the objective of this class to provide you the tools necessary to work within this philosophy.\n\n\n\n1.3.2 Why with R and not python?\nThe eternal question… R was originally designed by statisticians for statisticians and it might still suffers from this “statistics only” label that sticks to it.\nPython is a wide spectrum programming language with very efficient numerical libraries used in the computer science community.\nR is focused on data treatment, statistics and representation. In R, the object is the data, and base R allows you to read, treat, fit and plot your data very easily – although you will still most certainly need additional packages.\nSo with python, you can do everything, including treating and analyzing scientific data – with the right packages. With R, you can do less but do very well what you do, and in my opinion more seamlessly (probably because I learned and used R for years before starting with python…). In my opinion, this xkcd comic about python environment is only slightly exaggerated… while for R, installation and maintenance is sooooo easy in comparison…\nEach language has his own strengths and weaknesses. To my tastes, I would say that python and R compare like that (although a pythonist would probably say the opposite):\n\n\n\n\n\n\n\n\nR\nPython\n\n\n\nFree and open source\n✔✔✔\n✔✔✔\n\n\nIDE\n✔✔✔\n✔✔✔\n\n\nLarge code repository\n✔✔✔\n✔✔✔\n\n\nLarge community\n✔✔✔\n✔✔✔\n\n\nNotebooks\n✔✔✔\n✔✔✔\n\n\nMachine Learning\n✔✔✔\n✔✔✔\n\n\nPerformances\n✔✔\n✔✔✔\n\n\nEase of installation and maintenance\n✔✔✔\n✔\n\n\nData visualization\n✔✔✔\n✔\n\n\nStatistical analysis\n✔✔✔\n✔\n\n\nMulti-purpose\n✔\n✔✔✔\n\n\nSyntax, productivity, flexibility\n✔✔✔\n✔✔✔\n\n\nRmarkdown\n✔✔✔✔✔\n✔\n\n\nQuarto\n✔✔✔✔✔\n✔✔✔✔✔\n\n\n\nWell, it’s all very subjective, really. In the end, I still use both languages, each one for a different purpose:\n\nLet’s say I want to produce an initial atomic configuration for a molecular dynamics simulation, or read a molecular dynamics trajectory and compute some quantities such as a pair correlation or a mean square displacement, or perform some image-based machine learning: python (or even C, if I need to treat large trajectories).\nNow if I want to make sense of some experimental measurements or results of simulations, do some fits and produce publication-quality graphs or experimental reports: R.\n\nBoth languages are great and being able to use both is the best thing that can happen to you (relatively speaking) – especially since you can combine them in Rmarkdown using the reticulate package, which we will see later in this class.\nSo, since my goal is to provide you with tools for seamlessly read, make sense, and plot your data in the reproducible science philosophy, let’s go with R. Also, R has a great IDE (Rstudio) that really eases working with data and code. Such a nice IDE is still lacking for python.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>About the class</span>"
    ]
  },
  {
    "objectID": "01-about.html#further-reading",
    "href": "01-about.html#further-reading",
    "title": "\n1  About the class\n",
    "section": "\n1.4 Further reading",
    "text": "1.4 Further reading\nThis class is indented to provide the students with the tools to handle themselves with R, Rmarkdown and Shiny, and not to provide an extensive review of everything that is possible with R. To go further:\n\n\nR\n\nR manual on CRAN\nSome cheatsheets\n\nThe tidyverse website\n\n\nTibbles.\nTidy your data\n\nTips to improve your code\n\n\n\nPlotting\n\nThe R Graph Gallery\n\nThe R Graph Cookbook\n\nThe ggplot cheatsheet\n\nAnother one\n\nAnother one quite extensive\nAnother one\n\n\n\n\n\nRmarkdown\n\nRmarkdown complete guide\n\nRmarkdown cheatsheet\n\nRmarkdown cookbook\n\nRmarkdown code chunks\n\nRmarkdown mixing languages\n\n\n\n\nShiny\n\nThe Shiny cheatsheet\n\nGuide to application layout\n\nThe Shiny Gallery: find what you want to do and adapt it to your needs\nThe official Shiny video tutorial\n\n\n\nAnd as always, if you have a question, Google is your friend!",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>About the class</span>"
    ]
  },
  {
    "objectID": "01-about.html#teaser",
    "href": "01-about.html#teaser",
    "title": "\n1  About the class\n",
    "section": "\n1.5 Teaser",
    "text": "1.5 Teaser\nYou want to be able to produce interactive plots like these in an automatic experimental report?\n\n\n\n\n\n\nYou want to produce publication-quality graphs like these?\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nYou want to be able to build graphical interfaces like this to help you in your data treatment?\n\n\n\n\n\n\n\n\nStay tuned! You’ve come to the right place.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>About the class</span>"
    ]
  },
  {
    "objectID": "01-about.html#footnotes",
    "href": "01-about.html#footnotes",
    "title": "\n1  About the class\n",
    "section": "",
    "text": "https://www.nature.com/news/1-500-scientists-lift-the-lid-on-reproducibility-1.19970↩︎",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>About the class</span>"
    ]
  },
  {
    "objectID": "02-stats.html",
    "href": "02-stats.html",
    "title": "\n2  A little reminder on Statistics\n",
    "section": "",
    "text": "2.1 Why are statistical tools necessary in physical science?\nWhen doing Science, one has to fully grasp the concept of physical measurement. Let’s take an example to visualize the importance of this concept.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>A little reminder on Statistics</span>"
    ]
  },
  {
    "objectID": "02-stats.html#why-are-statistical-tools-necessary-in-physical-science",
    "href": "02-stats.html#why-are-statistical-tools-necessary-in-physical-science",
    "title": "\n2  A little reminder on Statistics\n",
    "section": "",
    "text": "2.1.1 A practical example\nLet’s say you want to communicate to someone a temperature, and tell this person that the temperature is “38”. If this is a random person in the street, they might think: “nice, let’s go to the beach today!”. If this random person is from the USA, they’re gonna think: “damn, where did I put my coat?”. If that person happens to be a physician, they might think: “that kid’s got a slight fever”. If they are a physicist doing a cryostat experiment, they might think “let’s check the He tank level”… you see that one of the most important part of the measurement is missing: its unit. Units are there so that people understand each other when exchanging data, and you see here that 38 Celsius, 38 Fahrenheit or 38 Kelvin are quite different, and this quantity will mean different things in different contexts. A physical quantity given without its unit would be absolutely meaningless (unless, of course, you are looking at a unit-less quantity, like a count).\nNow let’s consider the body temperature of 38 °C given to a physician. How did you measure this temperature? With a mercury graduated thermometer or with a thermocouple? In the first case, you can probably assume that this value is given with a measurement error of at least 1 °C, meaning that the temperature you give to the physician is (38±1) °C, i.e. the physician won’t be able to decide whether they should be concerned or not. In the second case, the temperature is often given with a 0.1 °C precision, so the physician, seeing that the body temperature is (38±0.1) °C, will probably tell you to take an aspirin and rest instead of giving you something stronger to treat a possible infection. Given that the uncertainty on the given value is of 0.1 °C, one should in fact give the temperature with matching decimal precision, i.e. (38.0±0.1) °C. Writing (38±0.1) °C, (38.00001±0.1) °C or (38.00±0.10000) °C would be meaningless too.\n\n\n\n\n\n\nImportant\n\n\n\nWith this, we see that a physical measurement should be given with four parts: its actual value, its decimal precision, its uncertainty, and its unit. Should any of these four parts be missing in a physical quantity that you wanted to share, it would at best be imprecise, and at worst be utterly meaningless.\n\n\n\n2.1.2 Probabilistic description of physical systems\nLet’s continue with our example of the body temperature measured with a thermocouple or a laser thermometer with a 0.1 °C precision. Our first measurement of the body temperature yielded (38.0±0.1) °C. Now let’s repeat this measurement a number of times in various area of the body (which are left to your imagination). Let’s say it then shows (38.1±0.1) °C, (38.0±0.1) °C, (38.3±0.1) °C, (37.9±0.1) °C, (38.2±0.1) °C, (38.1±0.1) °C, (38.1±0.1) °C, (39.8±0.1) °C. What is the actual body temperature then? Should we stick to a single measurement? Of course not. We have to make an histogram of the measured values, and study the distribution of the measurements (Figure 2.1). We can then see that one of the values is clearly an outlier – something might have gone wrong there. What if we had done the measurement only once and only measured that value? We might have jumped to a very wrong conclusion, with possibly a very serious consequence like giving the wrong medicine.\n\n\n\n\n\n\n\nFigure 2.1: Histogram of the body temperature measurements. The red line is the mean value, the orange one is the mode and the blue one is the median.\n\n\n\n\nWith this example, we see that a physical measurement is not absolute. In fact, a physical measurement is an assessment of the probability that the physical value is within a certain range. In the case of our example, after removing the outlier for which we are certain that the measurement is wrong, it means that the measured body temperature has a high probability to be somewhere between 38.0 °C and 38.2 °C. In other (more general) terms, one could consider a measurement of a quantity \\(X\\) as a probability \\(P(x - \\sigma &lt; X &lt; x + \\sigma )\\) that the quantity \\(X\\) has a value between \\(x-\\sigma\\) and \\(x+\\sigma\\). The uncertainty \\(\\sigma\\) around the mean value \\(x\\) is usually given as the standard deviation of the distribution of measurements around the mean.\n\n\n\n\n\n\nImportant\n\n\n\nSince physical measurements are in fact probabilities, we can – and must – use statistical tools to characterize them.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>A little reminder on Statistics</span>"
    ]
  },
  {
    "objectID": "02-stats.html#quantifying-the-properties-of-data",
    "href": "02-stats.html#quantifying-the-properties-of-data",
    "title": "\n2  A little reminder on Statistics\n",
    "section": "\n2.2 Quantifying the properties of data",
    "text": "2.2 Quantifying the properties of data\n\n2.2.1 Data representation – presenting a measurement\nDepending on the data you are looking at, various ways of representing them are possible. I can’t stress enough the importance of picking the right representation for your data, it is the expression of your physical sense. A good representation will help you make sense of your data and communicate your results. A bad representation, well…\n\n2.2.1.1 Histograms\nWhen looking at discrete values or when you want to characterize the distribution of a measurement, it is often a good idea to use the histogram representation, which represents the frequency at which a measurement is made within a certain range, called bin. Let’s take Figure 2.1 and plot it with various bin sizes. One can see that the choice of bin size is important, as it determines whether your data are noisy or lack fine information.\n\n\n\n\n\n\n\n\n\n(a) Bin width = 0.1 °C\n\n\n\n\n\n\n\n\n\n(b) Bin width = 0.2 °C\n\n\n\n\n\n\n\n\n\n(c) Bin width = 1 °C\n\n\n\n\n\n\nFigure 2.2: Histogram of the body temperature measurements with different bin widths.\n\n\n\n2.2.1.2 Graphs\nIn case you want to represent continuous data, say the evolution of a quantity \\(y\\) with respect to a quantity \\(x\\), you should then use the graph representation. As we saw before, any physical quantity should be given with its uncertainty and unit. The same applies to a graph: it must clearly display the units of the quantities \\(x\\) and \\(y\\), and error bars that are usually taken as the standard deviation of each individual measurement (that should thus be performed a number of times, depending on what you are looking at).\n\n\n\n\n\n\n\n\n\n(a) Meaningless graph\n\n\n\n\n\n\n\n\n\n(b) Noise\n\n\n\n\n\n\n\n\n\n(c) Meaningful graph\n\n\n\n\n\n\nFigure 2.3: Representing the same datapoints without error bars, with large error bars with respect to the data, and with small error bars with respect to the data: the difference between meaningless data, noise, and meaningful data.\n\n\nYou can think of each set of {datapoint + error bar} as an histogram: the displayed point is the mean value of the histogram, and the error bar is its standard deviation. Therefore, plotting a straight line between points is usually pointless. Plotting a line going through the data points only has meaning if this line results from a physical model explaining the variation of the quantity \\(y\\) with the evolution of the quantity \\(x\\) – this is called a fit, and we will see more about it in the R class later.\n\n2.2.2 Characterizing an ensemble of measurements\nIf we take \\(N\\) repeated measurements of an observable \\(x\\), it is then natural to try to assess our knowledge of the ensemble of measures through (1) a single number representing the measured quantity, and (2) a second number representing the spread of measurements. As we saw before, the observable \\(x\\) is thus generally defined by its central (mean) value \\(\\left&lt; x \\right&gt;\\), its spread \\(\\sigma_x\\) (standard deviation or uncertainty), and its unit.\n\n2.2.2.1 Central value: mode, median and mean\nThe mode of an ensemble of measurements is its most frequent value. If the measurement in question is of a continuous variable, one has to bin the data in terms of a histogram in order to quantify the modal value of that distribution: the mode will be the position of the maximum of the histogram.\nThe median value of the ensemble is the value of \\(x\\) for which there are an equal number of measurements above and below that point. If there is an even number of measurements, then the median value is taken as the midpoint between the two most central values.\nThe mean (or arithmetic average) is more often used than the two previous quantities, as it usually provides a better way to quantify the “typical” value measured. The mean value is denoted either by \\(\\overline{x}\\) or \\(\\left&lt; x \\right&gt;\\), and is given by:\n\\[\n\\overline{x}=\\left&lt; x \\right&gt;=\\frac{1}{N}\\sum_{i=1}^Nx_i,\n\\] where \\(x_i\\) is the \\(i\\)-th measurement of \\(x\\).\nFigure 2.1 shows the representation of a sample of data plotted in a histogram. This figure shows the mode, mean and median. For this particular sample of data, the mean is 38.3 °C, the median is 38.1 °C, and the mode is 38.0 °C. The fact that the mode is smaller than the mean is an indication that the data are asymmetric about the mean. We usually refer to such a distribution as being skewed, and in this case the data are skewed to the right.\n\n2.2.2.2 Quantifying the spread of data: variance, standard deviation and standard error\nThe mean of an ensemble of data doesn’t provide any information as to how the data are distributed. So any description of a set of data just quoting a mean value is incomplete. We need a second number in order to quantify the dispersion of data around the mean value. The average deviations from the mean, \\(\\left&lt; x-\\overline{x} \\right&gt;\\), is not a useful quantity as, by definition, this will be zero for a symmetrically distributed sample of data (which is always the case for randomly distributed data – a consequence of the central limit theorem, as we will see later). We should rather consider the average value of the squared deviations from the mean as a measure of the spread of our ensemble of measurements. This is called the variance \\(V(x)\\), which is given by:\n\\[\n\\begin{aligned}\nV(x)&=\\left&lt; (x-\\overline{x})^2 \\right&gt;\\\\\n    &=\\frac{1}{N}\\sum_{i=1}^N(x_i-\\overline{x})^2\\\\\n    &=\\overline{x^2}-\\overline{x}^2\n\\end{aligned}\n\\tag{2.1}\\]\nThe square root of the mean-squared (root-mean-squared or RMS) deviation is called the standard deviation, and this is given by:\n\\[\n\\begin{aligned}\n\\sigma(x)&=\\sqrt{V(x)}\\\\\n         &=\\sqrt{\\overline{x^2}-\\overline{x}^2}\n\\end{aligned}\n\\tag{2.2}\\]\nThe standard deviation quantifies the amount by which it is reasonable for a measurement of \\(x\\) to differ from the mean value \\(\\overline{x}\\). Considering a Gaussian distribution, we would expect to have 31.7% of measurements deviating from the mean value by more than 1\\(\\sigma\\), and this goes down to 4.5% of measurements to deviate by more than 2\\(\\sigma\\), and 0.3% of measurements to deviate by more than 3\\(\\sigma\\). Thus, if we perform a measurement that deviates by a significant margin from the expected value of \\(\\left&lt; x \\right&gt;\\pm\\sigma\\), we need to ask ourselves about the significance of our measurement.\nIn general, scientists often prefer using the standard deviation rather than the variance when describing data, since as the former has the same units as the observable being measured.\n\n\n\n\n\n\nImportant\n\n\n\nA measurement of a quantity \\(x\\) is therefore usually presented under the form \\(\\left&lt; x \\right&gt;\\pm\\sigma_x\\), where \\(\\left&lt; x \\right&gt;\\) is the arithmetic average and \\(\\sigma_x\\) is the standard deviation of the data.\n\n\nThe standard error is defined as the standard deviation of the mean, and is given by: \\[\n\\begin{aligned}\n\\sigma(\\overline{x})=\\frac{\\sigma(x)}{\\sqrt{N}}\n\\end{aligned}\n\\tag{2.3}\\] where \\(N\\) is the number of measurements. The standard error is a measure of the precision of the mean value \\(\\overline{x}\\), and is often used to quantify the uncertainty on the mean value.\n\n2.2.2.3 Caveats\nThe above considerations all assume that the distribution of measured values is mono-modal, i.e. the histogram of the measured values is centered around a single value. In the case of a multimodal distribution such as shown in Figure 2.4, it would be meaningless to use such tools as the fine information on the distribution would be lost.\n\n\n\n\n\n\n\nFigure 2.4: A trimodal distribution of measurements. The red line shows the mean value of the distribution: it fails to grasp the reality of the distribution.\n\n\n\n\nIn this case, one should try to deconvolute the distribution in terms of individual peaks, and gather their positions, widths and intensities.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>A little reminder on Statistics</span>"
    ]
  },
  {
    "objectID": "02-stats.html#useful-distributions",
    "href": "02-stats.html#useful-distributions",
    "title": "\n2  A little reminder on Statistics\n",
    "section": "\n2.3 Useful distributions",
    "text": "2.3 Useful distributions\n\n2.3.1 Probability Density Functions\nWe should now introduce the notion of Probability Density Function (PDF). By definition, a PDF is a distribution where the total area is unity. The variation of the PDF is represents the probability of something occurring at that point in the parameter space. In general, a PDF will be described by some function \\(P(x)\\), where\n\\[\n\\int_a^b P(x)dx=1,\n\\tag{2.4}\\] where \\(a\\) and \\(b\\) are the limits of the valid domain for the \\(P(x)\\) function. The probability of obtaining a result between \\(x\\) and \\(x + dx\\) is thus \\(P(x)dx\\). Usual PDFs encountered in physics are the Poisson distribution as well as the Gaussian distribution, that we will describe in a bit.\n\n2.3.2 PDFs, mean and variance\nLet us define a PDF \\(P(x)\\) describing a continuous distribution. We can compute the average value of some quantity by computing the integral over this quantity multiplied by the PDF.\nFor example, the average value of the variable \\(x\\), distributed according to the PDF \\(P(x)\\) in the domain \\(-\\infty &lt; x &lt;\\infty\\), is given by:\n\\[\n\\begin{aligned}\n\\left&lt; x \\right&gt;&=\\int_{-\\infty}^{\\infty}xP(x)dx\\\\\n\\text{or } \\left&lt; x \\right&gt;&=\\sum_{i}x_iP(x_i) \\text{ in the case of a discrete distribution}\n\\end{aligned}\n\\tag{2.5}\\]\nThis is called the first moment of the PDF.\nThis method can be used to compute average values of more complicated expressions. The mean value of \\((x - \\overline{x})^2\\), i.e. the variance \\(V\\), is thus given by the \\(\\overline{x}\\)-centered second moment of the PDF, such as:\n\\[\n\\begin{aligned}\nV&=\\int_{-\\infty}^{\\infty}(x - \\overline{x})^2P(x)dx\\\\\n\\text{or } V&=\\sum_{i}(x_i - \\overline{x})^2P(x_i) \\text{ in the case of a discrete distribution}\n\\end{aligned}\n\\tag{2.6}\\]\n\n2.3.3 Cumulative Distribution Functions\nThe Cumulative Distribution Function (CDF) is defined as the integral of the PDF from \\(-\\infty\\) to \\(x\\):\n\\[\n\\begin{aligned}\nF(x)&=\\int_{-\\infty}^{x}P(t)dt\\\\\n\\text{or } F(x)&=\\sum_{i}P(x_i) \\text{ for a discrete distribution}\n\\end{aligned}\n\\tag{2.7}\\]\nIt gives the probability of obtaining a value smaller than \\(x\\). The CDF is thus a monotonically increasing function, with \\(F(-\\infty)=0\\) and \\(F(\\infty)=1\\).\n\n2.3.4 The Poisson distribution\n\n2.3.4.1 Definition\nWhen a certain reaction happens randomly in time with an average frequency \\(\\lambda\\) in a given time interval, then the number \\(k\\) of reactions in that time interval will follow a Poisson distribution:\n\\[\nP_\\lambda(k) = \\frac{\\lambda^ke^{-\\lambda}}{k!}\n\\tag{2.8}\\]\nExamples of encounters of Poisson distributions could be as various as the number of calls received per hours in a call center, the yearly number of Prussian soldiers killed by horse kicks… or the number of particles (photons, neutrons, neutrinos…) hitting a detector every second.\n\n\n\n\n\n\n\n\n\n(a)\n\n\n\n\n\n\n\n\n\n(b)\n\n\n\n\n\n\n\n\n\n(c)\n\n\n\n\n\n\nFigure 2.5: Poisson distribution for various parameters. While asymmetric for small values of \\(k\\) and \\(\\lambda\\), it tends towards a Gaussian lineshape at larger values.\n\n\n\n\n\n\n\n\nIn R, the Poisson distribution is implemented in the dpois(x, lambda) function. The x argument is the number of events, and lambda is the average number of events. The ppois(x, lambda) function gives the cumulative probability of observing less than x events. The qpois(p, lambda) function gives the number of events x for which the cumulative probability is p. Finally, the rpois(n, lambda) function generates n random numbers following a Poisson distribution with average lambda.\n\n\n\n\n2.3.4.2 Characteristics\nAs shown on Figure 2.5, for small \\(\\lambda\\) the distribution is asymmetric and skewed to the right. As \\(\\lambda\\) increases the Poisson distribution becomes more symmetric.\nFollowing Equation 2.5, the average number of observed events, \\(\\left&lt; k \\right&gt;\\), is given by:\n\\[\n\\begin{aligned}\n\\left&lt; k \\right&gt; &= \\sum_{k=0}^\\infty kP_\\lambda(k) = \\sum_{k=1}^\\infty k\\frac{\\lambda^ke^{-\\lambda}}{k!}\\\\\n        &= \\lambda e^{-\\lambda} \\sum_{k=1}^\\infty \\frac{\\lambda^{k-1}}{(k-1)!}= \\lambda e^{-\\lambda} \\sum_{k=0}^\\infty \\frac{\\lambda^{k}}{k!}\\\\\n        &= \\lambda\n\\end{aligned}\n\\]\nIn the same manner and by using the “trick” \\(x^2=x(x-1)+x\\), the variance \\(\\sigma^2(k)\\) of the distribution is given by:\n\\[\n\\begin{aligned}\n\\sigma^2(k) &= \\sum_{k=1}^\\infty (k-\\lambda)^2\\frac{\\lambda^k e^{-\\lambda}}{k!}\\\\\n        &= \\lambda e^{-\\lambda} \\left[\\sum_{k=1}^\\infty k^2\\frac{\\lambda^{k-1}}{k!} \\underbrace{-2\\lambda\\sum_{k=1}^\\infty \\frac{\\lambda^{k-1}}{(k-1)!}}_{-2\\lambda e^\\lambda}+\\underbrace{\\sum_{k=1}^\\infty \\lambda^2\\frac{\\lambda^{k-1}}{k!}}_{\\lambda e^\\lambda}\\right]\\\\\n        &= \\lambda e^{-\\lambda} \\left[ \\underbrace{\\sum_{k=2}^\\infty k(k-1)\\frac{\\lambda^{k-1}}{k!}}_{\\lambda e^\\lambda} + \\underbrace{\\sum_{k=1}^\\infty k\\frac{\\lambda^{k-1}}{k!}}_{e^\\lambda} - \\lambda e^\\lambda\\right]\\\\\n        &=\\lambda = \\left&lt; k \\right&gt;\n\\end{aligned}\n\\]\n\n\n\n\n\n\nImportant\n\n\n\nThe important result here is that, when counting random events with an average of \\(\\left&lt; N \\right&gt;\\), the standard deviation is \\(\\sigma=\\sqrt{\\left&lt; N \\right&gt;}\\). This is typically what happens when performing a diffraction or spectroscopic measurement, such as X-ray diffraction, Raman, IR or neutron spectroscopy, etc.: the longer we acquire data, the higher the number of detected “events” \\(N\\) (particle hits detector), and the “better is the statistics”. Indeed, the relative error is thus \\(\\sqrt{N}/N=1/\\sqrt{N}\\).\nThe consequence of this is that to make a factor 10 improvement on the relative error, one has to increase by 100 the number of events. This is usually done by increasing the acquisition time, which is fine as long as it is short enough. If irrealistic acquisition times start to become necessary, one should maybe try to find another way to increase \\(N\\): this can be done by improving the detector efficiency, increasing the probe (laser, neutron/x-ray) brightness, changing the experimental geometry, etc.\nFinally, for “large” numbers (\\(\\lambda\\gtrsim 100\\)) the Poisson distribution tends towards a symmetric Gaussian distribution that we will describe just after.\n\n\n\n2.3.5 The Gaussian distribution\n\n2.3.5.1 Definition\nThe Gaussian distribution, also known as the normal distribution, with a mean value \\(\\mu\\) and standard deviation \\(\\sigma\\) as a function of some variable \\(x\\) is given by:\n\\[\nP(x, \\mu, \\sigma)=\\frac{1}{\\sigma\\sqrt{2\\pi}}e^{-(x-\\mu)^2/2\\sigma^2}\n\\]\nIt is useful to transform data from the \\(x\\) space to a corresponding \\(z\\) space which has a mean value of zero, and a standard deviation of one. This transformation is given by the mapping \\(z=\\frac{x-\\mu}{\\sigma}\\), and the Gaussian distribution in terms of \\(z\\) is thus:\n\\[\nP(z)=\\frac{1}{\\sqrt{2\\pi}}e^{-z^2/2}\n\\]\n\n\n\n\n\n\nIn R, the Gaussian distribution is implemented in the function dnorm(x, mean=0, sd=1). The function pnorm(x, mean=0, sd=1) gives the cumulative distribution function (CDF), i.e. the probability that a random variable \\(X\\) is less than or equal to \\(x\\). The function qnorm(p, mean=0, sd=1) gives the quantile function, i.e. the value of \\(x\\) for which the CDF is equal to \\(p\\).\n\n\n\n\n2.3.5.2 Characteristics\n\n\n\n\n\n\n\nFigure 2.6: A zero-centered Gaussian distribution with standard deviation of 1, \\(P(z)\\). The red line marks the half maximum, \\(P(z_{HM})=1/2\\sqrt{2\\pi}\\), and the blue lines the values of \\(z\\) for which the half maximum is obtained, \\(z_{HM}=\\pm\\sqrt{2\\ln{2}}\\).\n\n\n\n\nSometimes instead of quantifying a Gaussian distribution (or any monomodal distribution, for that matter) using the variance or standard deviation, scientists will speak about the full width at half maximum (FWHM). This has the advantage that any extreme outliers of the distribution do not contribute to the quantification of the spread of data. As the name suggests, the FWHM is the width of the distribution (the spread above and below the mean) at the points where the distribution reaches half of its maximum. You can also encounter the HWHM = FWHM/2, the Half Width at Half Maximum.\nFor a Gaussian distribution \\(P(z)\\), the half maximum is attained when \\(z_{HM}\\) is so that:\n\\[\n\\begin{aligned}\n\\frac{1}{\\sqrt{2\\pi}}e^{-z_{HM}^2/2}&= \\frac{1}{2}\\frac{1}{\\sqrt{2\\pi}}\\\\\n\\Rightarrow z_{HM}&=\\pm\\sqrt{2\\ln{2}}\n\\end{aligned}\n\\]\nThe FWHM of \\(P(z)\\) is therefore \\(FWHM=2\\sqrt{2\\ln{2}}\\simeq2.355\\). Using the relation between \\(z\\) and \\(\\sigma\\), we get the relation between the FWHM and the standard deviation:\n\\[\nFWHM=2\\sqrt{2\\ln{2}}\\times\\sigma\n\\]\nAs can be seen on Table 2.1, using the FWHM ensures that roughly 76% of the data are comprised between \\(\\mu-HWHM\\) and \\(\\mu+HWHM\\), and this goes up to \\(\\sim95\\)% for the range \\([\\mu-2\\sigma, \\mu+2\\sigma]\\).\n\n\n\nTable 2.1: Integral values for various values of \\(a\\) in \\(\\int_{-a}^aP(z)dz\\).\n\n\n\n\nIntegration range \\(a\\)\n\n\\(\\int_{-a}^aP(z)dz\\)\n\n\n\n\\(\\sigma\\)\n0.68293\n\n\n\\(HWHM=\\sqrt{2\\ln{2}}\\sigma\\)\n0.76100\n\n\n\\(1.96\\sigma\\)\n0.95000\n\n\n\\(2\\sigma\\)\n0.95455\n\n\n\\(3\\sigma\\)\n0.99730\n\n\n\\(4\\sigma\\)\n0.99994\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nImportant\n\n\n\nYou can see from Table 2.1 that if you want to make sure that exactly 95% of your data will fall in the given range, i.e. which defines the 95% tolerence interval, you need to use a range of \\(1.96\\sigma\\).\n\n\n\n2.3.6 The Student’s t-distribution\nThe Student’s t-distribution (or simply, “t-distribution”) is a probability distribution that is used to estimate population parameters when the sample size is small and/or when the population variance is unknown. It is a bell-shaped distribution that is symmetrical about the mean, showing that data near the mean are more frequent in occurrence than data far from the mean.\nThe t-distribution is used in place of the normal distribution when dealing with small samples (\\(N &lt; 30\\)) or when the population standard deviation is unknown. Its shape is similar to the normal distribution but it has heavier tails, meaning that it is more prone to producing values that fall far from its mean. It has the following PDF formula:\n\\[\nP(x, \\nu)=\\frac{\\Gamma\\left(\\frac{\\nu+1}{2}\\right)}{\\sqrt{\\nu\\pi}\\Gamma\\left(\\frac{\\nu}{2}\\right)}\\left(1+\\frac{x^2}{\\nu}\\right)^{-\\frac{\\nu+1}{2}}\n\\] where \\(\\Gamma\\) is the gamma function and \\(\\nu\\) is the number of degrees of freedom defined as \\(\\nu=N-1\\). For large number of observations, the t-distribution converges to the normal distribution.\n\n\n\n\n\n\nIn R, the t-distribution is implemented in the function dt(x, df) where x is the vector of quantiles and df is the number of degrees of freedom. The qt(p, df) function returns the quantiles \\(q\\) of the t-distribution such that \\(P(X\\leq q)=p\\).\n\n\n\n\n\n\n\n\n\n\nFigure 2.7: The t-distribution for various degrees of freedom compared to the Gaussian distribution.\n\n\n\n\n\n2.3.7 Tolerence interval and confidence interval\n\n2.3.7.1 Tolerance interval\nA tolerance interval is a range of values that is likely to contain a certain proportion of the population. It is thus representative of the spread of data in the population, and it is usually given by the standard deviation \\(\\sigma\\) multiplied by a confidence level factor. As seen in Table 2.1, for a Gaussian distribution, the range \\([\\mu-1.96\\sigma, \\mu+1.96\\sigma]\\) contains roughly 95% of the data in the population, and this is the 95% tolerence interval. It means that if you draw a sample of data from the population, the probability that the data points of the sample will fall in this range is 95%. If your distribution population is small however (\\(N&lt;30\\)), you should use the t-distribution instead of the Gaussian distribution to compute the tolerence interval.\n\n\n\n\n\n\n\nFigure 2.8: The 95% tolerence interval for a Gaussian distribution.\n\n\n\n\nIn R, you would use the qt(p, df) (for a t-distribution) or qnorm(p) (for a Gaussian distribution) functions to compute the quantiles \\(q\\) such that \\(P(X\\leq q)=p\\). If you want to compute the 95% tolerence interval for a distribution, you need to compute the quantiles \\(q\\) such that \\(P(X\\leq q)=0.025\\) and \\(P(X\\leq q)=0.975\\), i.e. find the values below and above which 2.5% of the distribtution are left out, as shown in Figure 2.8.\nSince both the Gaussian and t-distributions are symmetric, the tolerence interval is given by \\([q, -q]\\): for a tolerance interval with tolerence level \\(\\alpha\\), you want the quantile for the probability \\(p=(1+\\alpha)/2\\). Some special values are gathered in Table 2.2.\n\n\n\nTable 2.2: Quantiles of the t- and Gaussian distributions for various degrees of freedom (\\(\\nu\\)) and tolerence levels (\\(\\alpha\\)).\n\n\n\n\n\n\n\n\n\n\n\n\n\n\\(\\nu\\)\n\n\\(\\alpha\\): 50%\n\n\\(\\alpha\\): 80%\n\n\\(\\alpha\\): 90%\n\n\\(\\alpha\\): 95%\n\n\\(\\alpha\\): 99%\n\n\\(\\alpha\\): 99.9%\n\n\n\n1\n1.0000000\n3.077684\n6.313752\n12.706205\n63.656741\n636.619249\n\n\n2\n0.8164966\n1.885618\n2.919986\n4.302653\n9.924843\n31.599055\n\n\n3\n0.7648923\n1.637744\n2.353363\n3.182446\n5.840909\n12.923979\n\n\n30\n0.6827557\n1.310415\n1.697261\n2.042273\n2.749996\n3.645959\n\n\n\\(\\infty\\)\n0.6744898\n1.281552\n1.644854\n1.959964\n2.575829\n3.290527\n\n\nGaussian\n0.6744898\n1.281552\n1.644854\n1.959964\n2.575829\n3.290527\n\n\n\n\n\n\n\n\n\n2.3.7.2 Confidence interval\nConfidence intervals represent the range of uncertainty associated with the estimate of a statistic (i.e. the mean, proportion or standard deviation etc…). An estimate is necessarily subject to the risk of sampling error. Confidence intervals are useful for establishing limits for the estimation of, for example, the mean or a standard deviation, but also regression coefficients, proportions, frequency rates (Poisson) and differences between populations.\nConfidence intervals are thus a measurement of the standard error of the estimated statistic, and their widths thus naturally decrease with the sampling size. As the sample size approaches the entire population, the width of the confidence interval approaches zero, as can be seen on Figure 2.9.\n\n\n\n\n\n\n\n\n\n(a) Population size: 20\n\n\n\n\n\n\n\n\n\n(b) Population size: 500\n\n\n\n\n\n\nFigure 2.9: Histograms of a Gaussian distribution of mean 0 (red line) and standard deviation 1 with two samplings. The measured mean of the distribution is shown in black, and the 95% confidence interval of the mean is shown in orange. As the population size increases, the width of the confidence interval decreases since the error on the determination of the mean decreases.\n\n\nTo compute the confidence interval of a statistic, you need to know the standard error of the statistic, which is the standard deviation of the sampling distribution of the statistic. Table 2.3 gathers a few typical standard errors on statistics:\n\n\nTable 2.3: Standard errors of typical statistics\n\n\n\n\n\n\n\nStatistic\nStandard error\n\n\n\nMean\n\\(SE(\\overline{x})=\\frac{\\sigma(x)}{\\sqrt{N}}\\)\n\n\nStandard deviation\n\\(SE(\\sigma(x))=\\frac{\\sigma(x)}{\\sqrt{2(N-1)}}\\)\n\n\nMedian\n\\(SE(\\widetilde{x})=\\sqrt{\\frac{\\pi}{2}}\\frac{\\sigma(x)}{\\sqrt{N}}\\)\n\n\nDifference between two means\n\\(SE(\\overline{x_1}-\\overline{x_2})=\\sqrt{\\frac{\\sigma(x_1)^2}{N_1}+\\frac{\\sigma(x_2)^2}{N_2}}\\)\n\n\n\n\n\n\nThen, the confidence interval for the statistics \\(X\\) with a confidence level \\(\\alpha\\) is computed as: \\[\nCI(X, \\alpha)=X\\pm \\text{qt}\\left(\\frac{1+\\alpha}{2},\\nu\\right)\\times SE(X)\n\\tag{2.9}\\] where \\(\\text{qt}\\left(\\frac{1+\\alpha}{2},\\nu\\right)\\) is the quantile of the Student distribution with \\(\\nu\\) degrees of freedom and a probability of \\(\\frac{1+\\alpha}{2}\\) (as seen in Section 2.3.7.1).\n\n\n\n\n\n\nRemember\n\n\n\nThe width of a tolerance interval is due to both the sampling error and the variance in the population. It is a measurement of the spread of data.\nThe width of a confidence interval is due to the sampling error only. It is a measurement of the precision of the estimate of a statistic.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>A little reminder on Statistics</span>"
    ]
  },
  {
    "objectID": "02-stats.html#usual-statistical-tests-on-distributions",
    "href": "02-stats.html#usual-statistical-tests-on-distributions",
    "title": "\n2  A little reminder on Statistics\n",
    "section": "\n2.4 Usual statistical tests on distributions",
    "text": "2.4 Usual statistical tests on distributions\n\n2.4.1 Hypothesis testing and p-values\nA hypothesis test is a statistical test that is used to determine whether a given hypothesis is true or not. It is based on the comparison of the observed data with the expected data, given the hypothesis.\nThe null hypothesis (usually noted \\(H_0\\)) is the hypothesis that is tested, and the alternative hypothesis (usually noted \\(H_1\\)) is the hypothesis that is assumed to be true if the null hypothesis is rejected.\nThe p-value is the probability of obtaining a fluctuation in data under the null hypothesis that is as, or more, extreme than that observed by a given experiment. If the p-value is smaller than a predifined tolerance (usually set to 0.05), then one might consider rejecting the null hypothesis as the probability of observing such a fluctuation under the null hypothesis is extremely small.\n\n\n\n\n\n\nImportant\n\n\n\n\nIf the p-value \\(\\ge\\alpha\\) (typically 0.05), the null hypothesis is accepted.\nIf the p-value is below a certain threshold \\(\\alpha\\), the null hypothesis is rejected.\n\n\n\nIn R, most tests will automatically return a p-value, which will help you decide whether the test is conclusive or not – we will not delve into the details of computing these p-values.\n\n2.4.2 Asserting the Gaussian nature of a distribution: the Shapiro–Wilk test\nThe Shapiro-Wilk test is a statistical test that can be used to determine whether a distribution of data is Gaussian or not. It is based on the comparison of the observed distribution with the expected distribution of a Gaussian distribution with the same mean and standard deviation. Its null hypothesis is that the data are normally distributed, thus:\n\nIf the p-value \\(&lt;\\alpha\\), the null hypothesis is rejected and the data are not normally distributed.\nIf the p-value \\(\\ge\\alpha\\), the null hypothesis is not rejected and the data are normally distributed.\n\nLet’s perform a Shapiro-Wilk test on the distribution of the data in Figure 2.1:\n\ntemp &lt;- c(38, 38.1, 38.0, 38.0, 38.3, 37.9, 38.1, 38.2, 39.8)\nshapiro.test(temp)\n\n#&gt; \n#&gt;  Shapiro-Wilk normality test\n#&gt; \n#&gt; data:  temp\n#&gt; W = 0.57969, p-value = 5.526e-05\n\n\nWe see here that the p-value is 5.53e-05, which is below the threshold \\(\\alpha\\) = 0.05. This means that it is extremely unlikely that you’d observe such measurements if their distribution were normal. The null hypothesis that the data are normally distributed is thus rejected, and we can conclude that the data are not normally distributed – as expected from their representation in Figure 2.1.\nIf we were to remove the outlier (39.8) and perform the test again, we would get a p-value of 0.592, which means that there is a 59.2% chance to observe such measurements if their distribution were normal. As p-value &gt; 0.05, the null hypothesis that the data are normally distributed is not rejected, and we can conclude that the data are normally distributed.\n\n2.4.3 Student’s t-test\nThe Student’s t-test is a statistical test that can be used to determine whether two sets of data are significantly different from each other. Its null hypothesis is that the two sets of data are drawn from the same distribution, thus:\n\nIf the p-value \\(&lt;\\alpha\\), the null hypothesis is rejected and the data are not drawn from the same distribution.\nIf the p-value \\(\\ge\\alpha\\), the null hypothesis is not rejected and the data are drawn from the same distribution.\n\nLet’s work on two sets of temperature measurements performed on two different days on two different person. We want to assert whether the temperature evolution between the two days is significant or not for each patient. For the sake of example, let’s say that in both cases, they present the same average temperature on day 1 and on day 2 but with a different spread in data.\n\n\n\n\n\n\n\n\n\n\n\nData means and standard deviations\n\nDay\nPatient\nmean\nsd\n\n\n\nDay1\nA\n38.12613\n0.1644056\n\n\nDay2\nA\n37.60145\n0.2583944\n\n\nDay1\nB\n37.49412\n3.1012242\n\n\nDay2\nB\n37.39051\n3.1309950\n\n\n\n\n\nWe want to determine whether the temperature evolution between the two days is significant or not for each patient. We can perform a Student’s t-test to assert whether the two sets of data are significantly different from each other.\nFirst, to apply a t-test, we need to make sure that the data are normally distributed, which we can do by performing a Shapiro-Wilk test on each set of data:\n\n\n\n\nDay\nPatient\nstatistic\np.value\n\n\n\nDay1\nA\n0.9483202\n0.3423108\n\n\nDay2\nA\n0.9609148\n0.5622828\n\n\nDay1\nB\n0.9632285\n0.6101616\n\n\nDay2\nB\n0.9194124\n0.0965384\n\n\n\n\n\nIn all cases the p-value is above 0.05, which means that the null hypothesis that the data are normally distributed is not rejected, and we can conclude that the data are normally distributed. The application of the t-test is thus valid.\nLet’s start now with patient A:\n\nt.test(data = temperatures %&gt;% filter(Patient == \"A\"),\n       Temperature ~ Day)\n\n#&gt; \n#&gt;  Welch Two Sample t-test\n#&gt; \n#&gt; data:  Temperature by Day\n#&gt; t = 7.6614, df = 32.217, p-value = 9.443e-09\n#&gt; alternative hypothesis: true difference in means between group Day1 and group Day2 is not equal to 0\n#&gt; 95 percent confidence interval:\n#&gt;  0.3852173 0.6641318\n#&gt; sample estimates:\n#&gt; mean in group Day1 mean in group Day2 \n#&gt;           38.12613           37.60145\n\n\nAs could be intuited by the graphical representation, the t-test on patient A shows that their temperature decreased significantly between day 1 and day 2, with a p-value of 9.44e-09, which is largely below the threshold \\(\\alpha\\) = 0.05. To report it properly, we can say that “the temperature of patient A on day 1 (38.13°C, 95% CI = [38.05, 38.2]°C), was statistically significantly higher than on day 2 (37.6°C, 95% CI = [37.48, 37.72]°C), t(32.22) = 7.66, p = 9.44e-09.” Here , 32.22 is the degrees of freedom associated with the t test-statistic. The 95% confidence interval for the difference between the means is 0.39°C to 0.66°C.\nFor patient B however, even though the average temperature decreased between the two days, the spread in data is so large that the t-test does not allow concluding concerning any significant temperature difference between the two days:\n\nt.test(data = temperatures %&gt;% filter(Patient == \"B\"),\n       Temperature ~ Day)\n\n#&gt; \n#&gt;  Welch Two Sample t-test\n#&gt; \n#&gt; data:  Temperature by Day\n#&gt; t = 0.10514, df = 37.997, p-value = 0.9168\n#&gt; alternative hypothesis: true difference in means between group Day1 and group Day2 is not equal to 0\n#&gt; 95 percent confidence interval:\n#&gt;  -1.891264  2.098471\n#&gt; sample estimates:\n#&gt; mean in group Day1 mean in group Day2 \n#&gt;           37.49412           37.39051\n\n\n\n\n\n\n\n\nNote\n\n\n\nPerforming a t-test on a single distribution will test whether the distribution’s mean is equal to 0:\n\nt.test(temperatures %&gt;% filter(Patient == \"B\", Day==\"Day1\") %&gt;% pull(Temperature))\n\n#&gt; \n#&gt;  One Sample t-test\n#&gt; \n#&gt; data:  temperatures %&gt;% filter(Patient == \"B\", Day == \"Day1\") %&gt;% pull(Temperature)\n#&gt; t = 54.069, df = 19, p-value &lt; 2.2e-16\n#&gt; alternative hypothesis: true mean is not equal to 0\n#&gt; 95 percent confidence interval:\n#&gt;  36.04270 38.94553\n#&gt; sample estimates:\n#&gt; mean of x \n#&gt;  37.49412",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>A little reminder on Statistics</span>"
    ]
  },
  {
    "objectID": "02-stats.html#uncertainty-and-errors",
    "href": "02-stats.html#uncertainty-and-errors",
    "title": "\n2  A little reminder on Statistics\n",
    "section": "\n2.5 Uncertainty and errors",
    "text": "2.5 Uncertainty and errors\n\n2.5.1 Central limit theorem: on the Gaussian nature of statistical uncertainty\nThe central limit theorem states that if one takes \\(N\\) random independent samples of a distribution of data that describes some variable \\(x\\), then as \\(N\\) tends to infinity, the distribution of the sum of the samples tends to a Gaussian distribution.\nIn other terms: the mean value of a large number \\(N\\) of independent random variables (that can be distributed following any distribution with finite variance), obeying the same distribution with variance \\(\\sigma_0^2\\), approaches a normal distribution with variance \\(\\sigma^2 = \\sigma _0^2/N\\).\n\n\n\n\n\n\nImportant\n\n\n\nThis result is fundamental as it implies that independent measurements of any observable will show values that will be spread following a Gaussian distribution, and thus statistical uncertainties that are Gaussian in nature.\nMoreover, we see here the typical property of statistical errors, which is that the relative error is proportional to \\(1/\\sqrt{N}\\). Increasing the number of observations thus decreases the error, i.e. increases the precision.\n\n\n\n2.5.2 Combination of errors\nLet us consider a function of \\(n\\) variables, \\(f(u_1, u_2, ..., u_n)\\). We can Taylor expand this function about the various mean values \\(u_i=\\overline{u_i}\\), so that, at the first order:\n\\[\nf(u_1, ..., u_n) = f(\\overline{u_1}, ..., \\overline{u_n}) + \\sum_{i=1}^n (u_i-\\overline{u_i})\\frac{\\partial f}{\\partial u_i}\n\\]\nConsidering that the variance of a quantity \\(f\\) is given by \\(\\sigma^2(f) = (f - \\overline{f} )^2\\), it follows that the variance of our multivariable function is given by:\n\\[\n\\begin{aligned}\n\\sigma^2(f) &= \\left(\\sum_{i=1}^n (u_i-\\overline{u_i})\\frac{\\partial f}{\\partial u_i}\\right)^2\\\\\n         &= \\sum_{i=1}^n \\left(\\frac{\\partial f}{\\partial u_i}\\right)^2\\sigma_{u_i}^2 + 2\\sum_{i\\ne j}\\frac{\\partial f}{\\partial u_i}\\frac{\\partial f}{\\partial u_j}\\sigma_{u_iu_j}\\\\\n\\end{aligned}\n\\] where we have replaced \\((u_i-\\overline{u_i})^2\\) by the variance \\(\\sigma_{u_i}^2\\) and \\((u_i-\\overline{u_i})(u_j-\\overline{u_j})\\) by the covariance \\(\\sigma_{u_iu_j}\\).\nIf the variables \\(u_i\\) are independent then the covariance \\(\\sigma_{u_iu_j}\\) is null, and it follows the general expression of the standard error that can be applied to any function of independent variables:\n\n\n\n\n\n\n\\[\n\\sigma(f) = \\sqrt{\\sum_{i=1}^n \\left(\\frac{\\partial f}{\\partial u_i}\\right)^2\\sigma_{u_i}^2}\n\\tag{2.10}\\]\n\n\n\n\n2.5.2.1 Functions of one variable\nLet us consider a function \\(f\\) having a form that depends only on one observable \\(x\\), for example:\n\\[\nf = Ax + B\n\\]\nThen, following Equation 2.10, the standard error on that function is given by:\n\\[\n\\begin{aligned}\n\\sigma_f &= \\sqrt{\\left(\\frac{\\partial f}{\\partial x}\\right)^2\\sigma_x^2}\\\\\n         &= A\\sigma_x\n\\end{aligned}\n\\]\nSo, independently of any offset of the measured observable, the resulting error must be corrected by the same factor as the intensity.\n\n\n\n\n\n\nImportant\n\n\n\nIn practice, let’s say we measure a Raman spectrum. As we saw above, the error on each intensity count is given by the square root of this intensity count.\n\nIt is possible to shift vertically this spectrum without having to recompute the error bars.\nBut if you want to normalize (say, to 1) this spectrum, you have to multiply all the errors by the renormalization constant.\n\n\n\n\n2.5.2.2 Functions of two variables\nNow consider the function \\(f = Ax + By\\), where we have measured the mean and standard deviation of both \\(x\\) and \\(y\\), and want to compute the standard deviation on their sum/subtraction. We can use the general formula of Equation 2.10 to determine how to do this, hence:\n\\[\n\\begin{aligned}\n\\sigma_f &= \\sqrt{\\left(\\frac{\\partial f}{\\partial x}\\right)^2\\sigma_x^2 + \\left(\\frac{\\partial f}{\\partial y}\\right)^2\\sigma_y^2}\\\\\n         &= \\sqrt{A^2\\sigma_x^2 + B^2\\sigma_y^2}\n\\end{aligned}\n\\]\n\n\n\n\n\n\nImportant\n\n\n\nIn practice, let’s say we measure an UV spectrum of a solution (a molecule in a solvent), and a reference spectrum of this solvent. As we saw above, the error on each intensity count is given by the square root of this intensity count. We want to subtract the signal of the solvent to get only the signal of the molecule.\nWe thus have to perform the above operation on the errors, \\(\\sigma_{result}=\\sqrt{\\sigma^2_{solution}+\\sigma^2_{reference}}\\). It means that in order to have a statistically sound resulting spectrum, the reference needs to be measured with a very good statistics in order to not dominate the resulting error.\n\n\nIt is a good thing to think about error propagation and where it comes from… but you don’t have to bother computing it by hand, as packages are here to do it for you, as we will see later in the class.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>A little reminder on Statistics</span>"
    ]
  },
  {
    "objectID": "02-stats.html#further-reading",
    "href": "02-stats.html#further-reading",
    "title": "\n2  A little reminder on Statistics\n",
    "section": "\n2.6 Further reading",
    "text": "2.6 Further reading\n\nA. Bevan, Statistical Data Analysis for the Physical Sciences, Cambridge University Press (2013)\nG. Bohm, Introduction to Statistics and Data Analysis for Physicists, Hamburg: Verl. Dt. Elektronen-Synchrotron (2010).\nJ. Watkins, An Introduction to the Science of Statistics",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>A little reminder on Statistics</span>"
    ]
  },
  {
    "objectID": "03-getting_ready.html",
    "href": "03-getting_ready.html",
    "title": "\n3  Getting ready\n",
    "section": "",
    "text": "3.1 The easy way",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Getting ready</span>"
    ]
  },
  {
    "objectID": "03-getting_ready.html#the-easy-way",
    "href": "03-getting_ready.html#the-easy-way",
    "title": "\n3  Getting ready\n",
    "section": "",
    "text": "Download and install R\n\nDownload and install Rstudio\n\nWindows only: Download and install Rtools\nYou’re good to go.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Getting ready</span>"
    ]
  },
  {
    "objectID": "03-getting_ready.html#the-more-advanced-way",
    "href": "03-getting_ready.html#the-more-advanced-way",
    "title": "\n3  Getting ready\n",
    "section": "\n3.2 The more advanced way",
    "text": "3.2 The more advanced way\nIf you don’t want to use Rstudio but rather want to keep with your favorite text editor, like I do:\n\nI still recommend downloading and installing R via CRAN (I had some packages problems due to a homebrew installation on Mac).\nTo be fully operational with Rmarkdown files without using Rstudio, you need to install pandoc.\n\nThen you can use Visual Studio Code or Sublime Text – see the configuration below. There is also a new fork of VSCode by the Rstudio team: Positron, a very promissing project.\n\n\n\n\n\n\nConfiguring VS Code\n\n\n\n\n\nI personally use VS Code.\n\nFirst, install the radian console.\nInstall the language server protocol package in R with: install.packages(\"languageserver\")\n\nIn VS Code, install the following extensions:\n\nVSCode R\nR LSP Client\n\n\nEnable r.bracketedPaste for using Radian\nSet up r.rterm.windows, r.rterm.mac or r.rterm.linux: Path to Radian (where you installed radian)\nYou should be good to go: ⌘+⏎ will send the current line/selection to the radian console and ⌘+Shift+K will render the current Rmd file.\n\nHere is the relevant part of my settings.json file:\n{\n    \"r.rterm.mac\": \"/usr/local/bin/radian\",\n    \"r.rpath.mac\": \"/usr/local/bin/R\",\n    \"r.bracketedPaste\": true,\n    \"r.lsp.diagnostics\": false,\n    \"r.sessionWatcher\": true,\n    \"r.rmarkdown.knit.useBackgroundProcess\": false,\n    \"editor.guides.bracketPairs\": true\n}\nAlso, I recommend turning on the session watcher (\"r.sessionWatcher\": true), and then adding the following code to your .Rprofile. This way, the help, tables and figures can be viewed in the VS Code browser panel.\noptions(vsc.browser = \"Beside\")\noptions(vsc.viewer = \"Beside\")\noptions(vsc.page_viewer = \"Beside\")\noptions(vsc.view = \"Beside\")\noptions(vsc.helpPanel = \"Beside\")\n\nif (interactive() && Sys.getenv(\"TERM_PROGRAM\") == \"vscode\") {\n    if (\"httpgd\" %in% .packages(all.available = TRUE)) {\n        options(vsc.plot = FALSE)\n        options(device = function(...) {\n            httpgd::hgd(silent = TRUE)\n            .vsc.browser(httpgd::hgd_url(), viewer = \"Beside\")\n        })\n    }\n}\nHere are also a few keybindings that I use (keybindings.json):\n[\n    {\n        \"description\": \"Create R terminal\",\n        \"key\": \"alt+cmd+r\",\n        \"command\": \"r.createRTerm\"\n    },\n    {\n        \"description\": \"Insert code block\",\n        \"key\": \"cmd+shift+i\",\n        \"command\": \"editor.action.insertSnippet\",\n        \"when\": \"editorTextFocus && editorLangId == 'rmd'\",\n        \"args\": {\n            \"snippet\": \"``` {r}\\n$0\\n```\"\n            }\n    },\n    {\n        \"description\": \"Setwd to current file path\",\n        \"key\": \"cmd+\\\\\",\n        \"command\": \"r.runCommandWithEditorPath\",\n        \"when\": \"editorTextFocus && editorLangId =~ /r|rmd/\",\n        \"args\": \"setwd(dirname(\\\"$$\\\"))\"\n    },\n    {\n        \"description\": \"Insert R arrow\",\n        \"key\": \"ctrl+,\",\n        \"command\": \"editor.action.insertSnippet\",\n        \"when\": \"editorTextFocus && editorLangId =~ /r|rmd/\",\n        \"args\": {\n            \"snippet\": \" &lt;- \"\n            }\n    },\n    {\n        \"description\": \"Insert pipe\",\n        \"key\": \"ctrl+.\",\n        \"command\": \"editor.action.insertSnippet\",\n        \"when\": \"editorTextFocus && editorLangId =~ /r|rmd/\",\n        \"args\": {\n            \"snippet\": \" %&gt;% \"\n         }\n    },\n    {\n        \"description\": \"help document\",\n        \"key\": \"ctrl+h\",\n        \"command\": \"r.runCommandWithSelectionOrWord\",\n        \"when\": \"editorTextFocus && editorLangId =~ /r|rmd/\",\n        \"args\": \"help($$)\"\n    },\n    {\n        \"description\": \"view table\",\n        \"key\": \"cmd+shift+u\",\n        \"command\": \"r.runCommandWithSelectionOrWord\",\n        \"when\": \"editorTextFocus && editorLangId =~ /r|rmd/\",\n        \"args\": \"DT::datatable($$)\"\n    },\n    {\n        \"description\": \"reopen figure panel if closed\",\n        \"key\": \"ctrl+alt+p\",\n        \"command\": \"r.runCommand\",\n        \"when\": \"editorTextFocus && editorLangId =~ /r|rmd/\",\n        \"args\": \".vsc.browser(httpgd::hgd_url(), viewer = \\\"Beside\\\")\"\n    },\n    {\n        \"description\": \"view object\",\n        \"key\": \"cmd+u\",\n        \"command\": \"r.runCommandWithSelectionOrWord\",\n        \"when\": \"editorTextFocus && editorLangId =~ /r|rmd/\",\n        \"args\": \"View($$)\"\n    }\n]\n\n\n\n\n\n\n\n\n\n\nConfiguring Sublime Text\n\n\n\n\n\nI have personally used Sublime Text 3 for a long time, but switched to VS Code recently. Here is what I used to do:\n\nFirst, install Package control.\nTo set up command line launch: ln -s \"/Applications/Sublime Text.app/Contents/SharedSupport/bin/subl\" /usr/local/bin/sublime.\nInstall a minima the packages LSP, R-IDE, Terminus, and SendCode, and also the radian console.\nYou can also add the useful packages LatexTools, BracketHighlighter, RainbowBrackets, Citer, Path Tools, SidebarEnhancements, SidebarTools, git, GitGutter, Alignment, AutoFileName.\nInstall the language server protocol package in R with: install.packages(\"languageserver\")\n\nTo create a keyboard shortcut to open a terminal with the radian console as the R interpreter, add this to your keybinding file:\n\n{ \"keys\": [\"super+option+r\"], # put whatever you want here\n    \"command\": \"terminus_open\",\n    \"args\": {\n        \"post_window_hooks\": [\n            [\"carry_file_to_pane\", {\"direction\": \"right\"}]\n        ],\n        \"cmd\" : \"radian\"\n    }\n}\n\nSelect Terminus as the destination of SendCode\nYou should be good to go: ⌘+⏎ will send the current line/selection to the radian console, ⌘+B will render the current Rmd file, ⌘+\\ will set the working directory to the current file’s folder.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Getting ready</span>"
    ]
  },
  {
    "objectID": "03-getting_ready.html#install-and-configure-git",
    "href": "03-getting_ready.html#install-and-configure-git",
    "title": "\n3  Getting ready\n",
    "section": "\n3.3 Install and configure git",
    "text": "3.3 Install and configure git\n\n3.3.1 Setting up git and Rstudio\nR combined with the git version control system provides a convenient setup for making your research project reproducible, since git allows you to track and share your code and analysis:\n\nIt makes it easy to share your projects\nIt facilitates collaboration, since people can contribute to your project and vice versa. They can also report errors (bugs) or suggest new additions (features) to projects\nYou can revert to a previous version if you find bugs or accidentally delete something\nYou can see what changes between different versions of your code\nAlso, R makes it easy to share packages: you can install other people’s development packages with a single line of code, i.e. devtools::install_github(\"username/packagename\")\n\nAnd finally and for the most important part of this class: we will use GitHub Classroom to do and submit homework.\n\nRStudio has built-in support for git, so we will use the common combination of R + git + RStudio.\n\nFirst, if you haven’t done this already, download and install git\n\nCreate a free GitHub account\n\nSetup git in RStudio:\n\nOpen RStudio and go to Tools &gt; Global Options… click on git/SVN\nCheck Enable version control interface for RStudio projects\nSet the path to the git executable that you just installed.\n\nOpen a shell, if you don’t know where git is installed: Tools &gt; Terminal &gt; New Terminal\n\nWindows: type where git and hit enter. The path should be something like: C:/Program Files (x86)/git/bin/git.exe\nLinux/OS X: type which git and hit enter. The path should be something like: /usr/bin/git\n\n\nRestart RStudio, if it worked out you will find the git icon on the top toolbar, as shown below.\n\n\nSet up your user name and email address (the one you used to register on GitHub) in the terminal (Tools &gt; Terminal &gt; New Terminal, see Figure 3.1):\n\n# You only need to do this once\ngit config --global user.name 'yourGitHubUsername'\ngit config --global user.email 'your@email.com'\n\n\n\n\n\n\n\nFigure 3.1: Creating a new terminal in RStudio.\n\n\n\n\n\n3.3.2 Working with git and RStudio\nWhen creating a new project from scratch or from an existing folder, you can check Create a git repository to activate git for this project. You can also do this later by clicking on Tools &gt; Version Control &gt; Project Setup.\nWhat we will use for the exercises here, is the possibility of creation of new project from a GitHub repository, as shown in Figure 3.2.\n\nFirst, copy the repository HTTPS url: you’ll find the repository url when pressing the green button Code. The link will be something like https://github.com/username/the-git-repo.git.\nThen create a new RStudio project with git version control. Select File &gt; New Project.., then Version Control &gt; Git, then provide the repository HTTPS link, select where you want to place the R workspace folder, and create the project. RStudio will then download all the repository files in this new folder (or “clone”, in git terms).\nAlternatively, you can also download the zipped repo, unzip the files, and create a new project from this folder.\n\n\n\n\n\n\n\n\n\n\n(a) Create a new project from Version Control.\n\n\n\n\n\n\n\n\n\n(b) Select Git.\n\n\n\n\n\n\n\n\n\n\n\n(c) Go to the repo website on GitHub, and copy the address in the Code button.\n\n\n\n\n\n\n\n\n\n(d) Paste it in the required field, an give a name to the folder where you want to place it.\n\n\n\n\n\n\nFigure 3.2: Creating a new project from GitHub in RStudio.\n\n\n\nThen, you’ll do your coding in the various files of the project, and save the changes.\nAnd finally, you’ll need to “Commit” the changes, and then “Push” them on the GitHub repository, as described on Figure 3.3.\n\n\n\n\n\n\n\n\n\n\n(a) Click on Git &gt; Commit\n\n\n\n\n\n\n\n\n\n(b) Then select the files that changed, write a commit message, then click on Commit then Push.\n\n\n\n\n\n\nFigure 3.3: Uploading your changes to the GitHub repository.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Getting ready</span>"
    ]
  },
  {
    "objectID": "03-getting_ready.html#in-any-case-install-latex",
    "href": "03-getting_ready.html#in-any-case-install-latex",
    "title": "\n3  Getting ready\n",
    "section": "\n3.4 In any case: install LaTeX",
    "text": "3.4 In any case: install LaTeX\nA full \\(\\LaTeX\\) distribution (emphasis on full) will be needed to knit markdown files to PDFs (you don’t need it to output html files though):\n\n\nWindows: go here and download the Net Installer to install the complete distribution\n\n\nMac: go here or type brew cask install mactex in the terminal if you have Homebrew installed\n\nLinux: here fore example\n\nAlternatively, you can also work with TinyTeX that will install the needed packages on the fly. It is recommended on the knitr package help, but I only had problems with this, so I recommend the full \\(\\LaTeX\\) distribution option if you don’t mind taking up a few gigabytes of your disk. If you do, just run this in the R console:\ninstall.packages(\"tinytex\")\ntinytex::install_tinytex()\nTo uninstall TinyTeX, run:\ntinytex::uninstall_tinytex()",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Getting ready</span>"
    ]
  },
  {
    "objectID": "03-getting_ready.html#working-in-rstudio",
    "href": "03-getting_ready.html#working-in-rstudio",
    "title": "\n3  Getting ready\n",
    "section": "\n3.5 Working in Rstudio",
    "text": "3.5 Working in Rstudio\n\n\n\n\n\n\nRemember\n\n\n\nAlways Work with Projects!!\n\n\nLaunch Rstudio, click File &gt; New Project, and follow the dialog box (existing directory or not, etc.). When you have several ongoing projects, you can switch between them using the Project navigator (see Figure 3.4).\n\n\n\n\n\n\n\nFigure 3.4: The Rstudio interface.\n\n\n\n\nThe great interest of working with Projects is that the default working directory will be relative to the root directory of the Project. In other words, if you store your data in a Data folder, you can read it by running read_function(\"Data/your_file.txt\"). This is one of the fundamentals of reproducible data treatment as:\n\nYou won’t have to write the absolute path towards your file, like read_function(\"C://path/to/your_file.txt\"), path that is unlikely to be the same depending on the computer it is located on. This helps you share your whole project folder with others, or just move it around on your computer and still have a working code.\nYou won’t have to start your script by a setwd(\"/path/to/your/data\") command (for set working directory), which is much better for the same reasons as above.\n\nWrite whatever you want in the “Source code” panel and save it in a .R (or .Rmd) file, and run it by selecting it and hitting ⌘+⏎ (Ctrl+⏎ on Windows, Linux). If no text is selected, hitting ⌘+⏎ will launch the current line. You can see the file contents of your project in the project’s file explorer (see bottom right corner of Figure 3.4).\nThe code output will be seen in the “R Console” panel if it’s a text, or in the “Graph” panel if it’s a graph. A list of all defined variables and functions is available in the “Environment” panel. You can also directly write and run code in the “R Console” panel, if it’s code you don’t care to save in a script (like installing a package or whatever).\nYou can install packages by running the install.packages(\"package_name\") command in the R console or R script, or you can also click on the “Packages” tab in the bottom right corner, and then “Install” or “Update” in case you want to install or update your packages. “Update” will show you a list of installed packages that have a new published version. All verified packages are located on the CRAN (Comprehensive R Archive Network). It is thus really easy to install packages and maintain (update) your packages in R. There is also the possibility to install packages from source if you want to install custom packages – “homemade” packages that didn’t go through the CRAN verification process: do so at your own risks.\nMore on the Rstudio cheatsheet.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Getting ready</span>"
    ]
  },
  {
    "objectID": "03-getting_ready.html#setting-up-the-environment",
    "href": "03-getting_ready.html#setting-up-the-environment",
    "title": "\n3  Getting ready\n",
    "section": "\n3.6 Setting up the environment",
    "text": "3.6 Setting up the environment\nMake sure you have the following packages installed by launching the following commands: copy-paste them in the “Source code” panel (upper left after having created a new R script), select all the lines and hit Ctrl+⏎ (Windows, Linux) or ⌘+⏎ (Mac). These are the main packages that we will use in this class:\n# Necessary for the exercises\ninstall.packages(\"tidyverse\")\ninstall.packages(\"patchwork\")\ninstall.packages(\"broom\")\n# Recommended for smooth working and some exercises\ninstall.packages(\"devtools\")\ninstall.packages(\"rmarkdown\")\ninstall.packages(\"knitr\")\ninstall.packages(\"shiny\")\ninstall.packages(\"plotly\")\ninstall.packages(\"tikzDevice\")\ninstall.packages(\"quantities\")\ninstall.packages(\"ggforce\")\nLater on, a package can be loaded by calling:\nlibrary(package_name)\nor by checking it in the “Graphs” panel under the “Packages” tab. If you want to access a function from a given package without loading it (or because several packages define the same function and you want to specify which one to use), type:\npackage_name::function_name(parameters)\nIf you want to access the documentation on a given package, click the link on this package in the “Packages” tab. In a more general way, help on a function is accessed by typing in ?function_name, the help appearing in the “Graph” panel.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Getting ready</span>"
    ]
  },
  {
    "objectID": "03-getting_ready.html#the-exercises",
    "href": "03-getting_ready.html#the-exercises",
    "title": "\n3  Getting ready\n",
    "section": "\n3.7 The exercises",
    "text": "3.7 The exercises\nI made a series of exercises with their solutions. You can download the exercises and solutions from the following repositories, then create a Rstudio project from the unzipped folder:\n\nBeginner exercises\nAdvanced exercises\nGGplot2 exercises\nQuarto exercises\nMore “advanced” exercises can be found in chapter 17, List of exercises",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Getting ready</span>"
    ]
  },
  {
    "objectID": "05-variables.html",
    "href": "05-variables.html",
    "title": "\n4  Variables, booleans and strings\n",
    "section": "",
    "text": "4.1 Scalars and booleans\nDefining a scalar value is done with:\nx &lt;- 1 # attribute the value '1' to the variable 'x'\nx      # print the value of 'x'\n\n#&gt; [1] 1\nYou can use the R console as an advanced calculator:\n1 + 3\n\n#&gt; [1] 4\n\nx &lt;- 1/2\ny &lt;- exp(log(sin(cos(x*pi))))\nx - y\n\n#&gt; [1] 0.5",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Variables, booleans and strings</span>"
    ]
  },
  {
    "objectID": "05-variables.html#scalars-and-booleans",
    "href": "05-variables.html#scalars-and-booleans",
    "title": "\n4  Variables, booleans and strings\n",
    "section": "",
    "text": "Attention\n\n\n\nTyping x + 1 will only print the result of x + 1, but not add 1 to x and save this as the new value of x.\nTo actually modify the value stored in x, type x &lt;- x + 1.\n\n\n\n4.1.1 Special values\nR handles infinity, NaN (Not a Number), and has \\(\\pi\\) defined. Missing numbers are handled through the NA keyword (Not Attributed).\n\npi\n\n#&gt; [1] 3.141593\n\n10/0\n\n#&gt; [1] Inf\n\n0/0\n\n#&gt; [1] NaN\n\nNA\n\n#&gt; [1] NA\n\n\n\n4.1.2 Booleans and common tests on values\nBooleans are handled with the TRUE and FALSE keywords, and are usually obtained as the result of a test on values.\nOnce you’ve understood these tests, you can use them in conditional actions of the type if(test){then}else{then}, or to apply some filter on your data.\nLet’s create two variables x and y and test some assertions on these two variables (i.e. answer the following questions):\n\nx &lt;- 1\ny &lt;- 2\n\n\nIs x equal to y?\n\n\nx == y\n\n#&gt; [1] FALSE\n\n\n\nIs x not equal to y?\n\n\nx != y\n\n#&gt; [1] TRUE\n\n\n\nIs x smaller than y?\n\n\nx &lt; y \n\n#&gt; [1] TRUE\n\n\n\nIs x smaller or equal than y?\n\n\nx &lt;= y\n\n#&gt; [1] TRUE\n\n\n\nOperator “and”: &\n\n\n\nx == y & x &lt; y \n\n#&gt; [1] FALSE\n\n\n\nOperator “or”: |\n\n\n\nx == y | x &lt; y \n\n#&gt; [1] TRUE\n\n\n\nIs x a NaN?\n\n\nis.nan(x)\n\n#&gt; [1] FALSE\n\n\n\nIs x a number?\n\n\nis.numeric(x)\n\n#&gt; [1] TRUE\n\n\n\nIs x a string?\n\n\nis.character(x)\n\n#&gt; [1] FALSE\n\n\n\nIs x a NA?\n\n\nis.na(x)\n\n#&gt; [1] FALSE\n\n\n\nOperator “not” (inverse)\n\n\n!is.na(x)\n\n#&gt; [1] TRUE\n\n\nA number can by converted to a boolean using as.logical(): any number non 0 is equivalent to TRUE, and 0 is FALSE.\n\nas.logical(1)\n\n#&gt; [1] TRUE\n\nas.logical(0)\n\n#&gt; [1] FALSE",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Variables, booleans and strings</span>"
    ]
  },
  {
    "objectID": "05-variables.html#complex-values",
    "href": "05-variables.html#complex-values",
    "title": "\n4  Variables, booleans and strings\n",
    "section": "\n4.2 Complex values",
    "text": "4.2 Complex values\n\n\n\n\n\n\nClick to expand\n\n\n\n\n\nR also natively handles complex values:\n\n1+i   # not a valid complex value\n\n#&gt; Error: object 'i' not found\n\n1+1i  # valid complex value\n\n#&gt; [1] 1+1i\n\nexp(1i*pi)\n\n#&gt; [1] -1+1.224647e-16i\n\nsqrt(-1)\n\n#&gt; [1] NaN\n\nsqrt(-1 + 0i)\n\n#&gt; [1] 0+1i\n\nIm(exp(1i*pi))\n\n#&gt; [1] 1.224647e-16\n\nRe(exp(1i*pi))\n\n#&gt; [1] -1\n\nMod(exp(1i*pi))\n\n#&gt; [1] 1",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Variables, booleans and strings</span>"
    ]
  },
  {
    "objectID": "05-variables.html#strings",
    "href": "05-variables.html#strings",
    "title": "\n4  Variables, booleans and strings\n",
    "section": "\n4.3 Strings",
    "text": "4.3 Strings\nA string is defined between quotation marks such as: \"string\". Thus \"1\" is not the number 1, but rather the character “1”. Here are some operations on strings :\n\nDefinition of a string:\n\n\nphrase &lt;- \"Hello World \" \n\n\nConcatenation of strings using paste():\n\n\npaste(\"phrase\", phrase, sep=\" = \")\n\n#&gt; [1] \"phrase = Hello World \"\n\n\n\nConcatenation of strings using glue::glue():\n\n\nlibrary(glue)\nglue(\"phrase = {phrase}\")\n\n#&gt; phrase = Hello World\n\n\n\nAcessing a sub-string:\n\n\nsubstr(phrase, 1, 4)\n\n#&gt; [1] \"Hell\"\n\n\n\nChange case of string with tolower() and toupper():\n\n\ntolower(phrase); toupper(phrase)\n\n#&gt; [1] \"hello world \"\n\n\n#&gt; [1] \"HELLO WORLD \"\n\n\n\nChange the first occurrence of “o” in “a” with sub():\n\n\nsub(\"o\", \"a\", phrase)\n\n#&gt; [1] \"Hella World \"\n\n\n\nChange all occurrences of “o” in “a” with gsub():\n\n\ngsub(\"o\", \"a\", phrase)\n\n#&gt; [1] \"Hella Warld \"\n\n\n\nTrim white spaces with trimws():\n\n\ntrimws(phrase)\n\n#&gt; [1] \"Hello World\"\n\n\n\nGet a vector from string separation based on a character with strsplit():\n\n\nstrsplit(phrase, \" \")         # returns a list\n\n#&gt; [[1]]\n#&gt; [1] \"Hello\" \"World\"\n\nunlist(strsplit(phrase, \" \")) # returns a vector\n\n#&gt; [1] \"Hello\" \"World\"\n\n\n\n\n\n\n\n\nAttention!!\n\n\n\n\nphrase2 &lt;- \"1234\"\nphrase2 - 4321             # won't work: string - double\n\n#&gt; Error in phrase2 - 4321: non-numeric argument to binary operator\n\nas.numeric(phrase2) - 4321 # conversion of string to double\n\n#&gt; [1] -3087\n\n\n\n\nFor more complex operations, see the stringr package and its cheatsheet.",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Variables, booleans and strings</span>"
    ]
  },
  {
    "objectID": "05-variables.html#exo-variables",
    "href": "05-variables.html#exo-variables",
    "title": "\n4  Variables, booleans and strings\n",
    "section": "\n4.4 Exercises",
    "text": "4.4 Exercises\nDownload the exercises and solutions from the following repository, then create a Rstudio project from the unzipped folder:\n\nBeginner exercises",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Variables, booleans and strings</span>"
    ]
  },
  {
    "objectID": "06-vectors.html",
    "href": "06-vectors.html",
    "title": "\n5  Vectors\n",
    "section": "",
    "text": "5.1 Different ways of defining a vector\nIf you want to define a vector by specifying the values, use the function c(), like so:\nx &lt;- c(1, 5, 3, 12, 4.2)\nx\n\n#&gt; [1]  1.0  5.0  3.0 12.0  4.2\nx &lt;- c(1, 5, 3, \"hello\")\nx\n\n#&gt; [1] \"1\"     \"5\"     \"3\"     \"hello\"\n1:10\n\n#&gt;  [1]  1  2  3  4  5  6  7  8  9 10\n\nseq(-10, 10, by = .5)\n\n#&gt;  [1] -10.0  -9.5  -9.0  -8.5  -8.0  -7.5  -7.0  -6.5  -6.0  -5.5  -5.0  -4.5\n#&gt; [13]  -4.0  -3.5  -3.0  -2.5  -2.0  -1.5  -1.0  -0.5   0.0   0.5   1.0   1.5\n#&gt; [25]   2.0   2.5   3.0   3.5   4.0   4.5   5.0   5.5   6.0   6.5   7.0   7.5\n#&gt; [37]   8.0   8.5   9.0   9.5  10.0\n\nseq(-10, 10, length = 6)\n\n#&gt; [1] -10  -6  -2   2   6  10\n\nseq(-10, 10, along = x)\n\n#&gt; [1] -10.000000  -3.333333   3.333333  10.000000\nrep(0, 10)\n\n#&gt;  [1] 0 0 0 0 0 0 0 0 0 0\n\nrep(c(0, 2), 5)\n\n#&gt;  [1] 0 2 0 2 0 2 0 2 0 2\n\nrep(c(0, 2), each = 5)\n\n#&gt;  [1] 0 0 0 0 0 2 2 2 2 2\n# vector with 10 random values normally distributed around mean \n# with given standard deviation `sd`\nrnorm(10, mean=3, sd=1)\n\n#&gt;  [1] 1.7366249 4.2639109 0.6309396 3.3858554 3.7963251 3.9304226 2.4159505\n#&gt;  [8] 2.6470292 2.6096346 3.2662462\n\n# vector with 10 random values uniformly distributed between min and max\nrunif(10, min = 0, max = 1)\n\n#&gt;  [1] 0.3206069 0.2722112 0.7715244 0.6830853 0.7381415 0.6771098 0.9384574\n#&gt;  [8] 0.3416132 0.6820552 0.6085538",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Vectors</span>"
    ]
  },
  {
    "objectID": "06-vectors.html#different-ways-of-defining-a-vector",
    "href": "06-vectors.html#different-ways-of-defining-a-vector",
    "title": "\n5  Vectors\n",
    "section": "",
    "text": "Here, x is a vector of doubles:\n\n\n\nBut here, x is converted to a vector of strings because it contains a string:\n\n\n\nTo define a sequence of increasing numbers, either use the notation start:end for a sequence going from start to end by step of 1, or use the seq() function that is more versatile:\n\n\n\nTo repeat values, use the rep() function:\n\n\n\nTo create vectors of random numbers, use rnorm() or runif() for normally or uniformly distributed numbers, respectively:",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Vectors</span>"
    ]
  },
  {
    "objectID": "06-vectors.html#numerical-and-categorical-data-types",
    "href": "06-vectors.html#numerical-and-categorical-data-types",
    "title": "\n5  Vectors\n",
    "section": "\n5.2 Numerical and categorical data types",
    "text": "5.2 Numerical and categorical data types\nData can be of two different types: numerical, or categorical. Let’s say you are measuring a the temperature in a room and recording its value over time:\n\nT1 &lt;- c(22.3, 23.5, 26.0, 30.2)\n\nT1 is a vector containing numerical data.\nLet’s say that now you are recording the temperature level, which can be low, high or medium\n\nT2 &lt;- c(\"low\", \"low\", \"medium\", \"high\")\n\nT2 is a vector containing categorical data, i.e. the data in this example can fall into either of 3 categories. For now, T2 is however a vector of strings, and we need to tell R that it contains categorical data by using the function factor():\n\nT2 &lt;- factor(T2)\nT2\n\n#&gt; [1] low    low    medium high  \n#&gt; Levels: high low medium\n\n\nWe see here that we now have 3 levels, and a numerization of T2 leads to obtaining the numbers 1, 2 and 3 according to the levels in T2:\n\nas.numeric(T2)\n\n#&gt; [1] 2 2 3 1\n\n\nNumerical data can be converted to factors in the same way – this can be useful sometimes, e.g. when plotting with ggplot as we will see later:\n\nfactor(T1)\n\n#&gt; [1] 22.3 23.5 26   30.2\n#&gt; Levels: 22.3 23.5 26 30.2",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Vectors</span>"
    ]
  },
  {
    "objectID": "06-vectors.html#principal-operations-on-vectors",
    "href": "06-vectors.html#principal-operations-on-vectors",
    "title": "\n5  Vectors\n",
    "section": "\n5.3 Principal operations on vectors",
    "text": "5.3 Principal operations on vectors\n\n5.3.1 Mathematical operations\nBecause R is a vectorized language, you don’t need to loop on all elements of a vector to perform element-wise operations on it. Let’s say that x &lt;- 1:6, then:\n\nAddition of a value to all elements:\n\n\nx + 2.5\n\n#&gt; [1] 3.5 4.5 5.5 6.5 7.5 8.5\n\n\n\nMultiplication / division of all elements:\n\n\nx*2\n\n#&gt; [1]  2  4  6  8 10 12\n\n\n\nInteger division:\n\n\nx %/% 3\n\n#&gt; [1] 0 0 1 1 1 2\n\n\n\nMath functions apply on all elements:\n\n\nsqrt(abs(cos(x)))\n\n#&gt; [1] 0.7350526 0.6450944 0.9949837 0.8084823 0.5325995 0.9798828\n\n\n\nPower:\n\n\nx^2.5\n\n#&gt; [1]  1.000000  5.656854 15.588457 32.000000 55.901699 88.181631\n\n\n\nMultiplication of vectors of the same size is performed element by element:\n\n\ny &lt;- c(2.3, 5, 7, 10, 12, 20)\nx*y\n\n#&gt; [1]   2.3  10.0  21.0  40.0  60.0 120.0\n\n\n\nMultiplication of vectors of different sizes: the smaller vector is automatically repeated the number of times needed to get a vector of the size of the larger one. It will work also if the longer object length is not a multiple of shorter object length, but the shorter object will be truncated and you’ll get an error:\n\n\nx*1:2\n\n#&gt; [1]  1  4  3  8  5 12\n\nx*1:4\n\n#&gt; [1]  1  4  9 16  5 12\n\n\n\nModulo:\n\n\nx %% 2\n\n#&gt; [1] 1 0 1 0 1 0\n\n\n\nOuter product of vectors (the result is a matrix):\n\n\nx %o% y\n\n#&gt;      [,1] [,2] [,3] [,4] [,5] [,6]\n#&gt; [1,]  2.3    5    7   10   12   20\n#&gt; [2,]  4.6   10   14   20   24   40\n#&gt; [3,]  6.9   15   21   30   36   60\n#&gt; [4,]  9.2   20   28   40   48   80\n#&gt; [5,] 11.5   25   35   50   60  100\n#&gt; [6,] 13.8   30   42   60   72  120\n\n\n\n5.3.2 Accessing values\nLet’s work on this vector x:\n\nx &lt;- c(5, 3, 4, 9, 3)\n\n\n5.3.2.1 Accessing values by index\n\nTo access values of a vector x, use the x[i] notation, where i is the index you want to access. i can be (and in fact, is always) a vector.\n\n\n\n\n\n\n\nAttention\n\n\n\nIn R, indexes numbering start at 1 !!!\n\n\n\n# accessing by indexes\nx[3]\n\n#&gt; [1] 4\n\n# access index 1, 5 and 2\nx[c(1,5,2)] \n\n#&gt; [1] 5 3 3\n\n\n\nTo remove elements j from a vector x, use the notation x[-j]:\n\n\n# remove elements 1 and 3\nx[-c(1,3)]\n\n#&gt; [1] 3 9 3\n\n\n\n\n\n\n\n\nAttention\n\n\n\nWriting x[-c(1,3)] will just print the result of x[-c(1,3)], but not actually modify x.\nTo really modify x, you’d need to write x &lt;- x[-c(1,3)].\n\n\n\n5.3.2.2 Filtering values with tests\nYou can access values with booleans. Values getting a TRUE will be kept, while values with a FALSE will be discarded – or return a NA if a TRUE is given to a non existing value (i.e. to an index larger than the size of the vector):\n\nx\n\n#&gt; [1] 5 3 4 9 3\n\nx[c(TRUE,TRUE,TRUE,FALSE,TRUE,TRUE)]\n\n#&gt; [1]  5  3  4  3 NA\n\n\nTherefore, you can apply tests on your values and filter them very easily:\n\nx &gt; 4 # is a vector of booleans\n\n#&gt; [1]  TRUE FALSE FALSE  TRUE FALSE\n\nx[x &gt; 4] # is a filtered vector\n\n#&gt; [1] 5 9\n\n\n\n5.3.2.3 Accessing values by name\nFinally, values in vectors can be named, and thus can be accessed by their name:\n\ny &lt;- c(age=32, name=\"John\", pet=\"Cat\")\ny\n\n#&gt;    age   name    pet \n#&gt;   \"32\" \"John\"  \"Cat\"\n\ny[c('age','pet')] # prints a named vector\n\n#&gt;   age   pet \n#&gt;  \"32\" \"Cat\"\n\ny[['name']] # prints an un-named vector\n\n#&gt; [1] \"John\"\n\n\nAnd you can access the names of the vector using names():\n\nnames(y)\n\n#&gt; [1] \"age\"  \"name\" \"pet\"\n\n\n\n5.3.3 Sorting, removing duplicates, sampling\n\nSorting by ascending number:\n\n\nsort(x)\n\n#&gt; [1] 3 3 4 5 9\n\n\n\nIt works with strings too, but stringr::str_sort() might be needed for strings mixing letters and numbers:\n\n\nsort(c(\"c\",\"a\",\"d\",\"ab\")) \n\n#&gt; [1] \"a\"  \"ab\" \"c\"  \"d\"\n\nsort(c(\"c\", \"a10\", \"a2\", \"d\", \"ab\"))\n\n#&gt; [1] \"a10\" \"a2\"  \"ab\"  \"c\"   \"d\"\n\nstringr::str_sort(c(\"c\", \"a10\", \"a2\", \"d\", \"ab\"), numeric = TRUE)\n\n#&gt; [1] \"a2\"  \"a10\" \"ab\"  \"c\"   \"d\"\n\n\n\nSorting by descending number:\n\n\nsort(x, decreasing = TRUE) \n\n#&gt; [1] 9 5 4 3 3\n\n\n\nInverting the order of the vector:\n\n\nrev(x)\n\n#&gt; [1] 3 9 4 3 5\n\n\n\nFind the order of the indexes of the sorting:\n\n\norder(x)\n\n#&gt; [1] 2 5 3 1 4\n\nx[order(x)] # is thus equivalent to `sort(x)`\n\n#&gt; [1] 3 3 4 5 9\n\n\n\nFind duplicates:\n\n\nduplicated(x)\n\n#&gt; [1] FALSE FALSE FALSE FALSE  TRUE\n\n\n\nRemove duplicates:\n\n\nunique(x)\n\n#&gt; [1] 5 3 4 9\n\n\n\nChoose 3 random values:\n\n\nsample(x, 3)\n\n#&gt; [1] 9 5 3\n\n\n\n5.3.4 Maximum and minimum\nThis is quite straightforward:\n\n# maximum of x and its index\nx; max(x); which.max(x) \n\n#&gt; [1] 5 3 4 9 3\n\n\n#&gt; [1] 9\n\n\n#&gt; [1] 4\n\n# minimum of x and its index\nx; min(x); which.min(x)\n\n#&gt; [1] 5 3 4 9 3\n\n\n#&gt; [1] 3\n\n\n#&gt; [1] 2\n\n# range of a vector\nrange(x)\n\n#&gt; [1] 3 9\n\n\n\n5.3.5 Characteristics of vectors\n\nSize of a vector:\n\n\nlength(x)\n\n#&gt; [1] 5\n\n\n\nStatistics on vector:\n\n\nsummary(x)\n\n#&gt;    Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n#&gt;     3.0     3.0     4.0     4.8     5.0     9.0\n\n\n\nSum of all terms:\n\n\nsum(x)\n\n#&gt; [1] 24\n\n\n\nAverage value:\n\n\nmean(x)\n\n#&gt; [1] 4.8\n\n\n\nMedian value:\n\n\nmedian(x)\n\n#&gt; [1] 4\n\n\n\nStandard deviation:\n\n\nsd(x)\n\n#&gt; [1] 2.48998\n\n\n\nCount occurrence of values:\n\n\ntable(x)\n\n#&gt; x\n#&gt; 3 4 5 9 \n#&gt; 2 1 1 1\n\n\n\nCumulative sum:\n\n\ncumsum(x)\n\n#&gt; [1]  5  8 12 21 24\n\n\n\nTerm-by-term difference\n\n\ndiff(x)\n\n#&gt; [1] -2  1  5 -6\n\n\n\n5.3.6 Concatenation of vectors\nThis is done using the c() notation: you basically create a vector of vectors, the result being a new vector:\n\n# concatenate vectors\nz &lt;- c(-1:4, NA, -x); z\n\n#&gt;  [1] -1  0  1  2  3  4 NA -5 -3 -4 -9 -3\n\n\nAnother option is to use the append() function that allows for more options:\n\n# append values\nappend(x, 4)    # at the end\n\n#&gt; [1] 5 3 4 9 3 4\n\nappend(x, 4:1, 3) # or after a given index\n\n#&gt; [1] 5 3 4 4 3 2 1 9 3",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Vectors</span>"
    ]
  },
  {
    "objectID": "06-vectors.html#exo-vectors",
    "href": "06-vectors.html#exo-vectors",
    "title": "\n5  Vectors\n",
    "section": "\n5.4 Exercises",
    "text": "5.4 Exercises\nDownload the exercises and solutions from the following repository, then create a Rstudio project from the unzipped folder:\n\nBeginner exercises\n\n\nExercise 1\nLet’s create a named vector containing age of the students in the class, the names of each value being the first name of the students. Then:\n\nCompute the average age and its standard deviation\nCompute the median age\nWhat is the maximum, minimum and range of the ages in the class?\nWhat are all the student names in the class?\nPrint the sorted ages by increasing and decreasing order\nPrint the ages sorted by alphabetically ordered names (increasing and decreasing)\nShow a histogram of the ages distribution using hist() and play with the parameter breaks to modify the histogram\nShow a boxplot of the ages distribution using boxplot()\n\nExercise 2\nThis exercise is adapted from here.\nOpen Rstudio and create a new R script, save it as population.R in your wanted directory, say Rcourse/.\nDownload the population.csv file and save it in your working directory.\nA csv file contains raw data stored as plain text and separated by a comma (Comma Separated Values). Open it with Rstudio.\nWe can of course directly load such file with R and store its data in an appropriate format (i.e. a data.frame), but this is for the next chapter. For now, just copy-paste the text in the Rstudio script area to:\n\nCreate a cities vector containing all the cities listed in population.csv\n\nCreate a pop_1962 and pop_2012 vectors containing the populations of each city at these years. Print the 2 vectors.\nUse names() to name values of pop_1962 and pop_2012. Print the 2 vectors again. Are there any change?\nWhat are the cities with more than 200000 people in 1962? For these, how many residents in 2012?\nWhat is the population evolution of Montpellier and Nantes?\nCreate a pop_diff vector to store population change between 1962 and 2012\nPrint cities with a negative change\nPrint cities which broke the 300000 people barrier between 1962 and 2012\nCompute the total change in population of the 10 largest cities (as of 1962) between 1962 and 2012.\nCompute the population mean for year 1962\nCompute the population mean of Paris over these two years\nSort the cities by decreasing order of population for 1962\n\n\nSolution\n\n# Create a `cities` vector containing all the cities listed in `population.csv`\ncities &lt;- c(\"Angers\", \"Bordeaux\", \"Brest\", \"Dijon\", \"Grenoble\", \"Le Havre\", \n            \"Le Mans\", \"Lille\", \"Lyon\", \"Marseille\", \"Montpellier\", \"Nantes\", \n            \"Nice\", \"Paris\", \"Reims\", \"Rennes\", \"Saint-Etienne\", \"Strasbourg\", \n            \"Toulon\", \"Toulouse\")\n# Create a `pop_1962` and `pop_2012` vectors containing the populations \n# of each city at these years. Print the 2 vectors. \npop_1962 &lt;- c(115273,278403,136104,135694,156707,187845,132181,239955,\n              535746,778071,118864,240048,292958,2790091,134856,151948,\n              210311,228971,161797,323724)\npop_2012 &lt;- c(149017,241287,139676,152071,158346,173142,143599,228652,\n              496343,852516,268456,291604,343629,2240621,181893,209860,\n              171483,274394,164899,453317)\npop_1962; pop_2012\n\n#&gt;  [1]  115273  278403  136104  135694  156707  187845  132181  239955  535746\n#&gt; [10]  778071  118864  240048  292958 2790091  134856  151948  210311  228971\n#&gt; [19]  161797  323724\n\n\n#&gt;  [1]  149017  241287  139676  152071  158346  173142  143599  228652  496343\n#&gt; [10]  852516  268456  291604  343629 2240621  181893  209860  171483  274394\n#&gt; [19]  164899  453317\n\n# Use names() to name values of `pop_1962` and `pop_2012`. \n# Print the 2 vectors again. Are there any change?\nnames(pop_2012) &lt;- names(pop_1962) &lt;- cities\npop_1962; pop_2012\n\n#&gt;        Angers      Bordeaux         Brest         Dijon      Grenoble \n#&gt;        115273        278403        136104        135694        156707 \n#&gt;      Le Havre       Le Mans         Lille          Lyon     Marseille \n#&gt;        187845        132181        239955        535746        778071 \n#&gt;   Montpellier        Nantes          Nice         Paris         Reims \n#&gt;        118864        240048        292958       2790091        134856 \n#&gt;        Rennes Saint-Etienne    Strasbourg        Toulon      Toulouse \n#&gt;        151948        210311        228971        161797        323724\n\n\n#&gt;        Angers      Bordeaux         Brest         Dijon      Grenoble \n#&gt;        149017        241287        139676        152071        158346 \n#&gt;      Le Havre       Le Mans         Lille          Lyon     Marseille \n#&gt;        173142        143599        228652        496343        852516 \n#&gt;   Montpellier        Nantes          Nice         Paris         Reims \n#&gt;        268456        291604        343629       2240621        181893 \n#&gt;        Rennes Saint-Etienne    Strasbourg        Toulon      Toulouse \n#&gt;        209860        171483        274394        164899        453317\n\n# What are the cities with more than 200000 people in 1962? \n# For these, how many residents in 2012?\ncities200k &lt;- cities[pop_1962&gt;200000]\ncities200k; pop_2012[cities200k]\n\n#&gt;  [1] \"Bordeaux\"      \"Lille\"         \"Lyon\"          \"Marseille\"    \n#&gt;  [5] \"Nantes\"        \"Nice\"          \"Paris\"         \"Saint-Etienne\"\n#&gt;  [9] \"Strasbourg\"    \"Toulouse\"\n\n\n#&gt;      Bordeaux         Lille          Lyon     Marseille        Nantes \n#&gt;        241287        228652        496343        852516        291604 \n#&gt;          Nice         Paris Saint-Etienne    Strasbourg      Toulouse \n#&gt;        343629       2240621        171483        274394        453317\n\n# What is the population evolution of Montpellier and Nantes?\npop_2012['Montpellier'] - pop_1962['Montpellier']; pop_2012['Nantes'] - pop_1962['Nantes']\n\n#&gt; Montpellier \n#&gt;      149592\n\n\n#&gt; Nantes \n#&gt;  51556\n\n# Create a `pop_diff` vector to store population change between 1962 and 2012\npop_diff &lt;- pop_2012 - pop_1962\n# Print cities with a negative change\ncities[pop_diff&lt;0]\n\n#&gt; [1] \"Bordeaux\"      \"Le Havre\"      \"Lille\"         \"Lyon\"         \n#&gt; [5] \"Paris\"         \"Saint-Etienne\"\n\n# Print cities which broke the 300000 people barrier between 1962 and 2012\ncities[pop_2012&gt;300000 & pop_1962&lt;300000]\n\n#&gt; [1] \"Nice\"\n\n# Compute the total change in population of the 10 largest cities\n# (as of 1962) between 1962 and 2012.\nten_largest &lt;- cities[order(pop_1962, decreasing = TRUE)[1:10]]\nsum(pop_2012[ten_largest] - pop_1962[ten_largest])\n\n#&gt; [1] -324432\n\n# Compute the population mean for year 1962\nmean(pop_1962)\n\n#&gt; [1] 367477.3\n\n# Compute the population mean of Paris\nmean(c(pop_1962['Paris'], pop_2012['Paris']))\n\n#&gt; [1] 2515356\n\n# Sort the cities by decreasing order of population for 1962\n(pop_1962_sorted &lt;- sort(pop_1962, decreasing = TRUE))\n\n#&gt;         Paris     Marseille          Lyon      Toulouse          Nice \n#&gt;       2790091        778071        535746        323724        292958 \n#&gt;      Bordeaux        Nantes         Lille    Strasbourg Saint-Etienne \n#&gt;        278403        240048        239955        228971        210311 \n#&gt;      Le Havre        Toulon      Grenoble        Rennes         Brest \n#&gt;        187845        161797        156707        151948        136104 \n#&gt;         Dijon         Reims       Le Mans   Montpellier        Angers \n#&gt;        135694        134856        132181        118864        115273",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Vectors</span>"
    ]
  },
  {
    "objectID": "07-dataframes.html",
    "href": "07-dataframes.html",
    "title": "\n6  Data frames\n",
    "section": "",
    "text": "6.1 Defining a data.frame",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Data frames</span>"
    ]
  },
  {
    "objectID": "07-dataframes.html#defining-a-data.frame",
    "href": "07-dataframes.html#defining-a-data.frame",
    "title": "\n6  Data frames\n",
    "section": "",
    "text": "6.1.1 Defining a data.frame from vectors\nIn R, the principal object is the data. Hence the data.frame object, which is basically a table of vectors. A data.frame is a list presented under the form of a table – i.e. a spreadsheet. On a day-to-day basis, you will either define data.frame from existing vectors or other data.frame, or define a data.frame from a file (text, Excel…). In this example, we use test.dat and test.xlsx.\nTo define a data.frame from known vectors, we just have to do:\n\nx  &lt;- seq(-pi, pi, length = 6) \ny  &lt;- sin(x)\ndf &lt;- data.frame(x, y) # df is a data.frame (a table)\ndf\n\n#&gt;            x             y\n#&gt; 1 -3.1415927 -1.224647e-16\n#&gt; 2 -1.8849556 -9.510565e-01\n#&gt; 3 -0.6283185 -5.877853e-01\n#&gt; 4  0.6283185  5.877853e-01\n#&gt; 5  1.8849556  9.510565e-01\n#&gt; 6  3.1415927  1.224647e-16\n\n\nThen some information about our table are readily accessible, like:\n\nThe dimension, the number of rows and columns:\n\n\ndim(df); nrow(df); ncol(df)\n\n#&gt; [1] 6 2\n\n\n#&gt; [1] 6\n\n\n#&gt; [1] 2\n\n\n\nPrint the first and last 3 values\n\n\nhead(df, 3); tail(df, 3)\n\n#&gt;            x             y\n#&gt; 1 -3.1415927 -1.224647e-16\n#&gt; 2 -1.8849556 -9.510565e-01\n#&gt; 3 -0.6283185 -5.877853e-01\n\n\n#&gt;           x            y\n#&gt; 4 0.6283185 5.877853e-01\n#&gt; 5 1.8849556 9.510565e-01\n#&gt; 6 3.1415927 1.224647e-16\n\n\n\nPrint some information on df\n\n\n\nstr(df)\n\n#&gt; 'data.frame':    6 obs. of  2 variables:\n#&gt;  $ x: num  -3.142 -1.885 -0.628 0.628 1.885 ...\n#&gt;  $ y: num  -1.22e-16 -9.51e-01 -5.88e-01 5.88e-01 9.51e-01 ...\n\n\n\nPrint some statistics on df\n\n\n\nsummary(df)\n\n#&gt;        x                y          \n#&gt;  Min.   :-3.142   Min.   :-0.9511  \n#&gt;  1st Qu.:-1.571   1st Qu.:-0.4408  \n#&gt;  Median : 0.000   Median : 0.0000  \n#&gt;  Mean   : 0.000   Mean   : 0.0000  \n#&gt;  3rd Qu.: 1.571   3rd Qu.: 0.4408  \n#&gt;  Max.   : 3.142   Max.   : 0.9511\n\n\nIf not defined when creating the data.frame, the column names will be by default the vector names. To specify your own column names, do it when creating the data.frame:\n\ndf &lt;- data.frame(xxx = x, yyy = y)\nhead(df, 2)\n\n#&gt;         xxx           yyy\n#&gt; 1 -3.141593 -1.224647e-16\n#&gt; 2 -1.884956 -9.510565e-01\n\n\nOr, once it’s created, do it using names()\n\nnames(df)\n\n#&gt; [1] \"xxx\" \"yyy\"\n\nnames(df) &lt;- c(\"X\", \"Y\")\nhead(df, 2)\n\n#&gt;           X             Y\n#&gt; 1 -3.141593 -1.224647e-16\n#&gt; 2 -1.884956 -9.510565e-01\n\n\n\n6.1.2 Defining a data.frame from a file\n\n6.1.2.1 A text file\nLet’s say we have test.dat that looks like this:\n\n# Bash code:\nhead Data/test.dat\n\n#&gt; x   y\n#&gt; 1   2\n#&gt; 2   3\n\n\n\nThen, to read this file into a data.frame, we will use read.table(). If you don’t specify that the file contains a header, read.table() will default to attributing column names that will be V1, V2, V3, etc:\n\n\nread.table(\"Data/test.dat\")\n\n#&gt;   V1 V2\n#&gt; 1  x  y\n#&gt; 2  1  2\n#&gt; 3  2  3\n\n\n\nIf your file contains column names, you can use the first line as column names, like so:\n\n\nread.table(\"Data/test.dat\", header=TRUE)\n\n#&gt;   x y\n#&gt; 1 1 2\n#&gt; 2 2 3\n\n\n\nIf you want to skip some lines before starting the reading, use skip:\n\n\nread.table(\"Data/test.dat\", skip=1)\n\n#&gt;   V1 V2\n#&gt; 1  1  2\n#&gt; 2  2  3\n\n\n\nYou can specify your own column names using col.names:\n\n\nread.table(\"Data/test.dat\", skip=1, col.names = c(\"A\",\"B\"))\n\n#&gt;   A B\n#&gt; 1 1 2\n#&gt; 2 2 3\n\n\n\nYou can type ?read.table for more options.\n\n6.1.2.2 An Excel file\nNow, to read an Excel file, use the readxl library:\n\nlibrary(readxl) # load readxl from tidyverse to read Excel files\nread_excel(\"Data/test.xlsx\", sheet=1)\n\n#&gt; # A tibble: 10 × 2\n#&gt;        x      y\n#&gt;    &lt;dbl&gt;  &lt;dbl&gt;\n#&gt;  1     1  5.21 \n#&gt;  2     2  6.55 \n#&gt;  3     3  3.71 \n#&gt;  4     4  0.216\n#&gt;  5     5  0.205\n#&gt;  6     6  4.60 \n#&gt;  7     7 10.3  \n#&gt;  8     8 12.9  \n#&gt;  9     9 11.1  \n#&gt; 10    10  7.28\n\nread_excel(\"Data/test.xlsx\", sheet=2)\n\n#&gt; # A tibble: 4 × 2\n#&gt;   hello  world   \n#&gt;   &lt;chr&gt;  &lt;chr&gt;   \n#&gt; 1 ac     th      \n#&gt; 2 asc    thh     \n#&gt; 3 ascsa  dthdh   \n#&gt; 4 ascacs dthtdhdh",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Data frames</span>"
    ]
  },
  {
    "objectID": "07-dataframes.html#accessing-values",
    "href": "07-dataframes.html#accessing-values",
    "title": "\n6  Data frames\n",
    "section": "\n6.2 Accessing values",
    "text": "6.2 Accessing values\n\nLike with vectors, accessing values is done using the [] notation, except that here there are two indexes: df[row, column]:\n\n\ndf[3,1]\n\n#&gt; [1] -0.6283185\n\n\n\nIn general however, what you want is to access a given column, by its index:\n\n\ndf[,1]\n\n#&gt; [1] -3.1415927 -1.8849556 -0.6283185  0.6283185  1.8849556  3.1415927\n\ndf[[1]]# this is a vector too\n\n#&gt; [1] -3.1415927 -1.8849556 -0.6283185  0.6283185  1.8849556  3.1415927\n\n\n\nOr, preferably, by its name using the $ notation:\n\n\ndf$X\n\n#&gt; [1] -3.1415927 -1.8849556 -0.6283185  0.6283185  1.8849556  3.1415927\n\n\n\nFinally, you may want to apply filters on your table:\n\n\ndf[df$X &lt; 0, ]\n\n#&gt;            X             Y\n#&gt; 1 -3.1415927 -1.224647e-16\n#&gt; 2 -1.8849556 -9.510565e-01\n#&gt; 3 -0.6283185 -5.877853e-01\n\n\n\nUsing the function subset(), the conditions are applied on column names (no need for df$col_name here, while you need it in the above expression):\n\n\nsubset(df, X&gt;1)\n\n#&gt;          X            Y\n#&gt; 5 1.884956 9.510565e-01\n#&gt; 6 3.141593 1.224647e-16\n\nsubset(df, X&gt;1, select = c(X))\n\n#&gt;          X\n#&gt; 5 1.884956\n#&gt; 6 3.141593",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Data frames</span>"
    ]
  },
  {
    "objectID": "07-dataframes.html#adding-columns-or-rows",
    "href": "07-dataframes.html#adding-columns-or-rows",
    "title": "\n6  Data frames\n",
    "section": "\n6.3 Adding columns or rows",
    "text": "6.3 Adding columns or rows\n\n6.3.1 Adding columns\n\nTo add a column, just attribute a value to an column that do not exist yet, it will be created:\n\n\n# Adding columns\ndf   &lt;- data.frame(x,y)\ndf$z &lt;- df$x^2\ndf\n\n#&gt;            x             y         z\n#&gt; 1 -3.1415927 -1.224647e-16 9.8696044\n#&gt; 2 -1.8849556 -9.510565e-01 3.5530576\n#&gt; 3 -0.6283185 -5.877853e-01 0.3947842\n#&gt; 4  0.6283185  5.877853e-01 0.3947842\n#&gt; 5  1.8849556  9.510565e-01 3.5530576\n#&gt; 6  3.1415927  1.224647e-16 9.8696044\n\n\n\nYou can also create a data.frame of a data.frame:\n\n\ndata.frame(df, z=df$x^2, u=cos(df$x))\n\n#&gt;            x             y         z       z.1         u\n#&gt; 1 -3.1415927 -1.224647e-16 9.8696044 9.8696044 -1.000000\n#&gt; 2 -1.8849556 -9.510565e-01 3.5530576 3.5530576 -0.309017\n#&gt; 3 -0.6283185 -5.877853e-01 0.3947842 0.3947842  0.809017\n#&gt; 4  0.6283185  5.877853e-01 0.3947842 0.3947842  0.809017\n#&gt; 5  1.8849556  9.510565e-01 3.5530576 3.5530576 -0.309017\n#&gt; 6  3.1415927  1.224647e-16 9.8696044 9.8696044 -1.000000\n\n\n\nFinally, you can use the cbind() function to bind two data.frame column-wise:\n\n\ndf2 &lt;- data.frame(a = 1:length(x), b = 1:length(x))\ncbind(df, df2)\n\n#&gt;            x             y         z a b\n#&gt; 1 -3.1415927 -1.224647e-16 9.8696044 1 1\n#&gt; 2 -1.8849556 -9.510565e-01 3.5530576 2 2\n#&gt; 3 -0.6283185 -5.877853e-01 0.3947842 3 3\n#&gt; 4  0.6283185  5.877853e-01 0.3947842 4 4\n#&gt; 5  1.8849556  9.510565e-01 3.5530576 5 5\n#&gt; 6  3.1415927  1.224647e-16 9.8696044 6 6\n\n\n\n6.3.2 Adding rows\nFor this, use the rbind() function.\n\n\n\n\n\n\nAttention\n\n\n\nThe two data.frame must have the same number of columns and the same column names.\n\n\n\nrbind(df, df)\n\n#&gt;             x             y         z\n#&gt; 1  -3.1415927 -1.224647e-16 9.8696044\n#&gt; 2  -1.8849556 -9.510565e-01 3.5530576\n#&gt; 3  -0.6283185 -5.877853e-01 0.3947842\n#&gt; 4   0.6283185  5.877853e-01 0.3947842\n#&gt; 5   1.8849556  9.510565e-01 3.5530576\n#&gt; 6   3.1415927  1.224647e-16 9.8696044\n#&gt; 7  -3.1415927 -1.224647e-16 9.8696044\n#&gt; 8  -1.8849556 -9.510565e-01 3.5530576\n#&gt; 9  -0.6283185 -5.877853e-01 0.3947842\n#&gt; 10  0.6283185  5.877853e-01 0.3947842\n#&gt; 11  1.8849556  9.510565e-01 3.5530576\n#&gt; 12  3.1415927  1.224647e-16 9.8696044\n\n\n\n6.3.3 Deleting rows/columns\nThis works like with vectors:\n\ndf[-1,]\n\n#&gt;            x             y         z\n#&gt; 2 -1.8849556 -9.510565e-01 3.5530576\n#&gt; 3 -0.6283185 -5.877853e-01 0.3947842\n#&gt; 4  0.6283185  5.877853e-01 0.3947842\n#&gt; 5  1.8849556  9.510565e-01 3.5530576\n#&gt; 6  3.1415927  1.224647e-16 9.8696044\n\ndf[,-1]\n\n#&gt;               y         z\n#&gt; 1 -1.224647e-16 9.8696044\n#&gt; 2 -9.510565e-01 3.5530576\n#&gt; 3 -5.877853e-01 0.3947842\n#&gt; 4  5.877853e-01 0.3947842\n#&gt; 5  9.510565e-01 3.5530576\n#&gt; 6  1.224647e-16 9.8696044",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Data frames</span>"
    ]
  },
  {
    "objectID": "07-dataframes.html#tidy-up",
    "href": "07-dataframes.html#tidy-up",
    "title": "\n6  Data frames\n",
    "section": "\n6.4 Tidy up!",
    "text": "6.4 Tidy up!\n\n6.4.1 What is tidy data?\nA good practice in R is to tidy your data. R follows a set of conventions that makes one layout of tabular data much easier to work with than others. Your data will be easier to work with in R if it follows three rules:\n\nEach variable in the data set is placed in its own column\nEach observation is placed in its own row\nEach value is placed in its own cell\n\n\n\n\n\nIllustration of tidy data.\n\n\n\nData that satisfies these rules is known as tidy data: you see that thanks to this representation, a 2D table can handle an arbitrary number of variables – this avoids using multi-dimensional arrays or multi-tab Excel documents. Note that it does’t matter if a value is repeated in a column.\nHere is an example:\ndf &lt;- read.csv(\"Data/population.csv\")\ndf # is not tidy\n\nShow output\n\n\n#&gt;   year Angers Bordeaux  Brest  Dijon Grenoble LeHavre LeMans  Lille   Lyon\n#&gt; 1 1962 115273   278403 136104 135694   156707  187845 132181 239955 535746\n#&gt; 2 1968 128557   266662 154023 145357   161616  207150 143246 238554 527800\n#&gt; 3 1975 137591   223131 166826 151705   166037  217882 152285 219204 456716\n#&gt; 4 1982 136038   208159 156060 140942   156637  199388 147697 196705 413095\n#&gt; 5 1990 141404   210336 147956 146703   150758  195854 145502 198691 415487\n#&gt; 6 1999 151279   215363 149634 149867   153317  190905 146105 212597 445452\n#&gt; 7 2007 151108   235178 142722 151543   156793  179751 144164 225789 472330\n#&gt; 8 2012 149017   241287 139676 152071   158346  173142 143599 228652 496343\n#&gt;   Marseille Montpellier Nantes   Nice   Paris  Reims Rennes Saint.Etienne\n#&gt; 1    778071      118864 240048 292958 2790091 134856 151948        210311\n#&gt; 2    889029      161910 260244 322442 2590771 154534 180943        223223\n#&gt; 3    908600      191354 256693 344481 2299830 178381 198305        220181\n#&gt; 4    874436      197231 240539 337085 2176243 177234 194656        204955\n#&gt; 5    800550      207996 244995 342439 2152423 180620 197536        199396\n#&gt; 6    798430      225392 270251 342738 2125246 187206 206229        180210\n#&gt; 7    852395      253712 283025 348721 2193030 183500 207922        175318\n#&gt; 8    852516      268456 291604 343629 2240621 181893 209860        171483\n#&gt;   Strasbourg Toulon Toulouse\n#&gt; 1     228971 161797   323724\n#&gt; 2     249396 174746   370796\n#&gt; 3     253384 181801   373796\n#&gt; 4     248712 179423   347995\n#&gt; 5     252338 167619   358688\n#&gt; 6     264115 160639   390350\n#&gt; 7     272123 166537   439453\n#&gt; 8     274394 164899   453317\n\n\n\nlibrary(tidyr)\ndf &lt;- pivot_longer(df, cols=-year, names_to=\"city\", values_to=\"pop\")\ndf #is tidy\n\nShow output\n\n\n#&gt; # A tibble: 160 × 3\n#&gt;     year city         pop\n#&gt;    &lt;int&gt; &lt;chr&gt;      &lt;int&gt;\n#&gt;  1  1962 Angers    115273\n#&gt;  2  1962 Bordeaux  278403\n#&gt;  3  1962 Brest     136104\n#&gt;  4  1962 Dijon     135694\n#&gt;  5  1962 Grenoble  156707\n#&gt;  6  1962 LeHavre   187845\n#&gt;  7  1962 LeMans    132181\n#&gt;  8  1962 Lille     239955\n#&gt;  9  1962 Lyon      535746\n#&gt; 10  1962 Marseille 778071\n#&gt; # ℹ 150 more rows\n\n\n\n# is not tidy\npivot_wider(df, names_from=\"city\", values_from=\"pop\")\n\nShow output\n\n\n#&gt; # A tibble: 8 × 21\n#&gt;    year Angers Bordeaux  Brest  Dijon Grenoble LeHavre LeMans  Lille   Lyon\n#&gt;   &lt;int&gt;  &lt;int&gt;    &lt;int&gt;  &lt;int&gt;  &lt;int&gt;    &lt;int&gt;   &lt;int&gt;  &lt;int&gt;  &lt;int&gt;  &lt;int&gt;\n#&gt; 1  1962 115273   278403 136104 135694   156707  187845 132181 239955 535746\n#&gt; 2  1968 128557   266662 154023 145357   161616  207150 143246 238554 527800\n#&gt; 3  1975 137591   223131 166826 151705   166037  217882 152285 219204 456716\n#&gt; 4  1982 136038   208159 156060 140942   156637  199388 147697 196705 413095\n#&gt; 5  1990 141404   210336 147956 146703   150758  195854 145502 198691 415487\n#&gt; 6  1999 151279   215363 149634 149867   153317  190905 146105 212597 445452\n#&gt; 7  2007 151108   235178 142722 151543   156793  179751 144164 225789 472330\n#&gt; 8  2012 149017   241287 139676 152071   158346  173142 143599 228652 496343\n#&gt; # ℹ 11 more variables: Marseille &lt;int&gt;, Montpellier &lt;int&gt;, Nantes &lt;int&gt;,\n#&gt; #   Nice &lt;int&gt;, Paris &lt;int&gt;, Reims &lt;int&gt;, Rennes &lt;int&gt;, Saint.Etienne &lt;int&gt;,\n#&gt; #   Strasbourg &lt;int&gt;, Toulon &lt;int&gt;, Toulouse &lt;int&gt;\n\n\n\nYou can find more information on data import and tidyness on the data-import cheatsheet and on the tidyr package.\n\n\n\n\nUnderstanding long and wide data with an animation. Source: tidyexplain\n\n\n\n\n6.4.2 Tibbles\nA tibble is an enhanced version of the data.frame provided by the tibble package (which is part of the tidyverse). The main advantage of tibble is that it has easier initialization and nicer printing than data.frame.\nMoreover, the performance are also enhanced for the reading from files with read_csv(), read_tsv(), read_table() and read_delim() that do the same things as their read.xx() counterparts and return a tibble. Otherwise, the handling is basically the same.\nMore on tibbles here.\n\nNote that when initializing tibbles, the construction is iterative. It means that when creating a second column, one can refer to the first one that was created. This does’t work with data.frames.\n\n\n# won't work unless a `x` vector was created before\ndata.frame(x=runif(1e3), y=cumsum(x)) \n\n#&gt; Error: object 'x' not found\n\nlibrary(tidyverse)\ntib &lt;- tibble(x=runif(1e3), y=cumsum(x))\ntib\n\n#&gt; # A tibble: 1,000 × 2\n#&gt;        x     y\n#&gt;    &lt;dbl&gt; &lt;dbl&gt;\n#&gt;  1 0.158 0.158\n#&gt;  2 0.166 0.325\n#&gt;  3 0.300 0.625\n#&gt;  4 0.978 1.60 \n#&gt;  5 0.386 1.99 \n#&gt;  6 0.549 2.54 \n#&gt;  7 0.741 3.28 \n#&gt;  8 0.561 3.84 \n#&gt;  9 0.783 4.62 \n#&gt; 10 0.285 4.91 \n#&gt; # ℹ 990 more rows\n\n\n\n\n\n\n\n\nAttention\n\n\n\n\n\n\nTibbles are quite strict about subsetting. [ always returns another tibble. Contrast this with a data frame: sometimes [ returns a data frame and sometimes it just returns a vector:\n\nhead(tib[[1]]) # is a vector\n\n#&gt; [1] 0.1581192 0.1664158 0.3000182 0.9783201 0.3858180 0.5486178\n\nhead(tib[,1])  # is a tibble\n\n#&gt; # A tibble: 6 × 1\n#&gt;       x\n#&gt;   &lt;dbl&gt;\n#&gt; 1 0.158\n#&gt; 2 0.166\n#&gt; 3 0.300\n#&gt; 4 0.978\n#&gt; 5 0.386\n#&gt; 6 0.549\n\n\nUnless you want to get a tibble, I recommend always using the $ notation when you want to get a column as a vector to avoid problems.\n\nAnother interesting feature of tibbles is that their columns can contain vectors, like usual, but also lists of any R objects like other tibbles, nls() objects, etc. This is called “nesting”, and you can nest and un-nest tibbles using these explicit functions:\n\n\ntib1 &lt;- tibble(x=1:3, y=1:3)\ntib2 &lt;- tibble(x=1:5, y=1:5)\ntib  &lt;- tibble(number=1:2, data=list(tib1, tib2))\ntib\n\n#&gt; # A tibble: 2 × 2\n#&gt;   number data            \n#&gt;    &lt;int&gt; &lt;list&gt;          \n#&gt; 1      1 &lt;tibble [3 × 2]&gt;\n#&gt; 2      2 &lt;tibble [5 × 2]&gt;\n\n\n\n\n\n\n\n\n\nFigure 6.1: Excel equivalent to a nested tibble.\n\n\n\n\n\ntib_unnested &lt;- unnest(tib, data)\ntib_unnested\n\n#&gt; # A tibble: 8 × 3\n#&gt;   number     x     y\n#&gt;    &lt;int&gt; &lt;int&gt; &lt;int&gt;\n#&gt; 1      1     1     1\n#&gt; 2      1     2     2\n#&gt; 3      1     3     3\n#&gt; 4      2     1     1\n#&gt; 5      2     2     2\n#&gt; 6      2     3     3\n#&gt; 7      2     4     4\n#&gt; 8      2     5     5\n\ntib_unnested_renested &lt;- nest(tib_unnested, data = c(number, y))\ntib_unnested_renested\n\n#&gt; # A tibble: 5 × 2\n#&gt;       x data            \n#&gt;   &lt;int&gt; &lt;list&gt;          \n#&gt; 1     1 &lt;tibble [2 × 2]&gt;\n#&gt; 2     2 &lt;tibble [2 × 2]&gt;\n#&gt; 3     3 &lt;tibble [2 × 2]&gt;\n#&gt; 4     4 &lt;tibble [1 × 2]&gt;\n#&gt; 5     5 &lt;tibble [1 × 2]&gt;\n\ntib_unnested_renested$data # The `data` column is a list\n\n#&gt; [[1]]\n#&gt; # A tibble: 2 × 2\n#&gt;   number     y\n#&gt;    &lt;int&gt; &lt;int&gt;\n#&gt; 1      1     1\n#&gt; 2      2     1\n#&gt; \n#&gt; [[2]]\n#&gt; # A tibble: 2 × 2\n#&gt;   number     y\n#&gt;    &lt;int&gt; &lt;int&gt;\n#&gt; 1      1     2\n#&gt; 2      2     2\n#&gt; \n#&gt; [[3]]\n#&gt; # A tibble: 2 × 2\n#&gt;   number     y\n#&gt;    &lt;int&gt; &lt;int&gt;\n#&gt; 1      1     3\n#&gt; 2      2     3\n#&gt; \n#&gt; [[4]]\n#&gt; # A tibble: 1 × 2\n#&gt;   number     y\n#&gt;    &lt;int&gt; &lt;int&gt;\n#&gt; 1      2     4\n#&gt; \n#&gt; [[5]]\n#&gt; # A tibble: 1 × 2\n#&gt;   number     y\n#&gt;    &lt;int&gt; &lt;int&gt;\n#&gt; 1      2     5",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Data frames</span>"
    ]
  },
  {
    "objectID": "07-dataframes.html#operations-in-the-tidyverse",
    "href": "07-dataframes.html#operations-in-the-tidyverse",
    "title": "\n6  Data frames\n",
    "section": "\n6.5 Operations in the tidyverse",
    "text": "6.5 Operations in the tidyverse\nIn the end, base R and the tidyverse package provide many efficient functions to perform most of the tasks you would want to perform recursively, thus allowing avoiding explicit for loops (that are slow).\nHere are some examples, and you will find much more here. Take a look at the cheatsheets on tidyr and on dplyr, it’s really helpful.\nLet’s work on this tibble:\n\n# Let's create a random tibble\nlibrary(tidyverse)\nN &lt;- 500\ndt &lt;- tibble(x     = rep(runif(N, -1, 1), 3), \n             y     = runif(N*3, -1, 1), \n             signx = ifelse(x&gt;0, \"positive\", \"negative\"),\n             signy = ifelse(y&gt;0, \"positive\", \"negative\")\n)\ndt\n\n#&gt; # A tibble: 1,500 × 4\n#&gt;         x       y signx    signy   \n#&gt;     &lt;dbl&gt;   &lt;dbl&gt; &lt;chr&gt;    &lt;chr&gt;   \n#&gt;  1  0.451 -0.125  positive negative\n#&gt;  2  0.573 -0.811  positive negative\n#&gt;  3 -0.986  0.480  negative positive\n#&gt;  4  0.953  0.397  positive positive\n#&gt;  5 -0.402  0.147  negative positive\n#&gt;  6 -0.500  0.0175 negative positive\n#&gt;  7 -0.450  0.408  negative positive\n#&gt;  8  0.439  0.161  positive positive\n#&gt;  9 -0.474  0.532  negative positive\n#&gt; 10 -0.459 -0.423  negative negative\n#&gt; # ℹ 1,490 more rows\n\n\n\n6.5.1 The pipe operator\nIn the following, we will introduce the pipe operator |&gt;, that was introduced in the version 4.1 of R. This operator allows a clear syntax for successive operations, as “what is on the left of the operator is given as first argument of what is on the right”. It is thus a good habit to write each operation on a separate line to facilitate the reading. This is particularly helpful when performing multiple nested operations. For example, summary(head(tail(dt),2)), which is hard to read, would translate to:\ndt |&gt; \n    tail() |&gt; \n    head(2) |&gt; \n    summary()\nNote that before the 4.1 version of R, the pipe operator was only present thanks to the magrittr package, and was written %&gt;%. In magrittr’s pipe, retrieving the piped object is done with the operator ., while it is done with the operator _ in base R’s.\nSilly example:\n\n\"Hello\" |&gt; gsub(\"o\", \"e\") # replace the substring \"Hello\" by \"o\" in string \"e\"\n\n#&gt; [1] \"e\"\n\n\"Hello\" |&gt; gsub(\"o\", \"e\", x=_) # replace the substring \"o\" by \"e\" in string \"Hello\"\n\n#&gt; [1] \"Helle\"\n\n\"Hello\" %&gt;% gsub(\"o\", \"e\") # replace the substring \"Hello\" by \"o\" in string \"e\"\n\n#&gt; [1] \"e\"\n\n# /!\\ In base R pipe, the '_' needs to  be for a named argument, \n# while it is not necessary for the '%&gt;%' pipe\n\"Hello\" %&gt;% gsub(\"o\", \"e\", .) # replace the substring \"o\" by \"e\" in string \"Hello\"\n\n#&gt; [1] \"Helle\"\n\n\n\n6.5.2 Sampling data\n\ndt |&gt; slice(1:3)  # by index\n\n#&gt; # A tibble: 3 × 4\n#&gt;        x      y signx    signy   \n#&gt;    &lt;dbl&gt;  &lt;dbl&gt; &lt;chr&gt;    &lt;chr&gt;   \n#&gt; 1  0.451 -0.125 positive negative\n#&gt; 2  0.573 -0.811 positive negative\n#&gt; 3 -0.986  0.480 negative positive\n\ndt |&gt; sample_n(3) # randomly\n\n#&gt; # A tibble: 3 × 4\n#&gt;         x     y signx    signy   \n#&gt;     &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;    &lt;chr&gt;   \n#&gt; 1 -0.863  0.762 negative positive\n#&gt; 2 -0.647  0.248 negative positive\n#&gt; 3 -0.0993 0.850 negative positive\n\n\n\n6.5.3 Operations on groups of a variable\ngroup_by(column) groups by similar values of the wanted column(s) and performs the next operations on each element of the group successively.\n\ndt |&gt; \n    group_by(signx)\n\n#&gt; # A tibble: 1,500 × 4\n#&gt; # Groups:   signx [2]\n#&gt;         x       y signx    signy   \n#&gt;     &lt;dbl&gt;   &lt;dbl&gt; &lt;chr&gt;    &lt;chr&gt;   \n#&gt;  1  0.451 -0.125  positive negative\n#&gt;  2  0.573 -0.811  positive negative\n#&gt;  3 -0.986  0.480  negative positive\n#&gt;  4  0.953  0.397  positive positive\n#&gt;  5 -0.402  0.147  negative positive\n#&gt;  6 -0.500  0.0175 negative positive\n#&gt;  7 -0.450  0.408  negative positive\n#&gt;  8  0.439  0.161  positive positive\n#&gt;  9 -0.474  0.532  negative positive\n#&gt; 10 -0.459 -0.423  negative negative\n#&gt; # ℹ 1,490 more rows\n\ndt |&gt; \n    group_by(signx) |&gt; \n    sample_n(3)\n\n#&gt; # A tibble: 6 × 4\n#&gt; # Groups:   signx [2]\n#&gt;         x       y signx    signy   \n#&gt;     &lt;dbl&gt;   &lt;dbl&gt; &lt;chr&gt;    &lt;chr&gt;   \n#&gt; 1 -0.0882 -0.859  negative negative\n#&gt; 2 -0.317   0.675  negative positive\n#&gt; 3 -0.344   0.0912 negative positive\n#&gt; 4  0.313  -0.746  positive negative\n#&gt; 5  0.817  -0.841  positive negative\n#&gt; 6  0.856   0.356  positive positive\n\ndt |&gt; \n    group_by(signx, signy) |&gt; \n    sample_n(3)\n\n#&gt; # A tibble: 12 × 4\n#&gt; # Groups:   signx, signy [4]\n#&gt;          x       y signx    signy   \n#&gt;      &lt;dbl&gt;   &lt;dbl&gt; &lt;chr&gt;    &lt;chr&gt;   \n#&gt;  1 -0.246  -0.0141 negative negative\n#&gt;  2 -0.0688 -0.994  negative negative\n#&gt;  3 -0.652  -0.954  negative negative\n#&gt;  4 -0.565   0.0980 negative positive\n#&gt;  5 -0.188   0.806  negative positive\n#&gt;  6 -0.647   0.600  negative positive\n#&gt;  7  0.530  -0.219  positive negative\n#&gt;  8  0.0639 -0.667  positive negative\n#&gt;  9  0.789  -0.0731 positive negative\n#&gt; 10  0.211   0.274  positive positive\n#&gt; 11  0.147   0.362  positive positive\n#&gt; 12  0.0921  0.0193 positive positive\n\n\n\n6.5.4 Summary by groups of a variable\nsummarise() returns a single value for each element of the groups.\n\ndt |&gt; \n    group_by(signx) |&gt; \n    summarise(count  = n(),\n              mean_x = mean(x), \n              sd_x   = sd(x))\n\n#&gt; # A tibble: 2 × 4\n#&gt;   signx    count mean_x  sd_x\n#&gt;   &lt;chr&gt;    &lt;int&gt;  &lt;dbl&gt; &lt;dbl&gt;\n#&gt; 1 negative   750 -0.465 0.277\n#&gt; 2 positive   750  0.501 0.284\n\ndt |&gt; \n    group_by(signx, signy) |&gt; \n    summarise(count  = n(),\n              mean_x = mean(x), \n              mean_y = mean(y))\n\n#&gt; # A tibble: 4 × 5\n#&gt; # Groups:   signx [2]\n#&gt;   signx    signy    count mean_x mean_y\n#&gt;   &lt;chr&gt;    &lt;chr&gt;    &lt;int&gt;  &lt;dbl&gt;  &lt;dbl&gt;\n#&gt; 1 negative negative   374 -0.458 -0.498\n#&gt; 2 negative positive   376 -0.473  0.507\n#&gt; 3 positive negative   393  0.498 -0.486\n#&gt; 4 positive positive   357  0.505  0.500\n\n\n\n6.5.5 Sorting\n\ndt |&gt; arrange(x)\n\n#&gt; # A tibble: 1,500 × 4\n#&gt;         x       y signx    signy   \n#&gt;     &lt;dbl&gt;   &lt;dbl&gt; &lt;chr&gt;    &lt;chr&gt;   \n#&gt;  1 -0.997 -0.500  negative negative\n#&gt;  2 -0.997 -0.264  negative negative\n#&gt;  3 -0.997 -0.0132 negative negative\n#&gt;  4 -0.997 -0.927  negative negative\n#&gt;  5 -0.997  0.545  negative positive\n#&gt;  6 -0.997  0.891  negative positive\n#&gt;  7 -0.996 -0.106  negative negative\n#&gt;  8 -0.996 -0.447  negative negative\n#&gt;  9 -0.996  0.843  negative positive\n#&gt; 10 -0.986  0.480  negative positive\n#&gt; # ℹ 1,490 more rows\n\ndt |&gt; arrange(x, desc(y))\n\n#&gt; # A tibble: 1,500 × 4\n#&gt;         x       y signx    signy   \n#&gt;     &lt;dbl&gt;   &lt;dbl&gt; &lt;chr&gt;    &lt;chr&gt;   \n#&gt;  1 -0.997 -0.0132 negative negative\n#&gt;  2 -0.997 -0.264  negative negative\n#&gt;  3 -0.997 -0.500  negative negative\n#&gt;  4 -0.997  0.891  negative positive\n#&gt;  5 -0.997  0.545  negative positive\n#&gt;  6 -0.997 -0.927  negative negative\n#&gt;  7 -0.996  0.843  negative positive\n#&gt;  8 -0.996 -0.106  negative negative\n#&gt;  9 -0.996 -0.447  negative negative\n#&gt; 10 -0.986  0.905  negative positive\n#&gt; # ℹ 1,490 more rows\n\n\n\n6.5.6 Merge tables column-wise\nAt least one column with the exact same name must be present in each table to use the xx_join() functions. There are more possibilities than inner_join() that I show here, see the help for more information.\n\ndt2 &lt;- tibble(signx=c(\"positive\",\"positive\",\"negative\",\"negative\"), \n              signy=c(\"positive\",\"negative\",\"positive\",\"negative\"), \n              value=c(TRUE, FALSE, FALSE, TRUE))\ndt2\n\n#&gt; # A tibble: 4 × 3\n#&gt;   signx    signy    value\n#&gt;   &lt;chr&gt;    &lt;chr&gt;    &lt;lgl&gt;\n#&gt; 1 positive positive TRUE \n#&gt; 2 positive negative FALSE\n#&gt; 3 negative positive FALSE\n#&gt; 4 negative negative TRUE\n\ninner_join(dt, dt2)\n\n#&gt; # A tibble: 1,500 × 5\n#&gt;         x       y signx    signy    value\n#&gt;     &lt;dbl&gt;   &lt;dbl&gt; &lt;chr&gt;    &lt;chr&gt;    &lt;lgl&gt;\n#&gt;  1  0.451 -0.125  positive negative FALSE\n#&gt;  2  0.573 -0.811  positive negative FALSE\n#&gt;  3 -0.986  0.480  negative positive FALSE\n#&gt;  4  0.953  0.397  positive positive TRUE \n#&gt;  5 -0.402  0.147  negative positive FALSE\n#&gt;  6 -0.500  0.0175 negative positive FALSE\n#&gt;  7 -0.450  0.408  negative positive FALSE\n#&gt;  8  0.439  0.161  positive positive TRUE \n#&gt;  9 -0.474  0.532  negative positive FALSE\n#&gt; 10 -0.459 -0.423  negative negative TRUE \n#&gt; # ℹ 1,490 more rows\n\n\n\n6.5.7 Merge tables row-wise\nThis works even if there are missing rows.\n\ndt3 &lt;- tibble(a=1:3, b=3:5, c=6:8)\ndt4 &lt;- tibble(a=3:1, c=3:5)\nbind_rows(dt3, dt4)\n\n#&gt; # A tibble: 6 × 3\n#&gt;       a     b     c\n#&gt;   &lt;int&gt; &lt;int&gt; &lt;int&gt;\n#&gt; 1     1     3     6\n#&gt; 2     2     4     7\n#&gt; 3     3     5     8\n#&gt; 4     3    NA     3\n#&gt; 5     2    NA     4\n#&gt; 6     1    NA     5\n\n\n\n6.5.8 Add/modify a column\nmutate(), like $, adds a column if it doesn’t exist, and modifies it if it does.\n\ndt |&gt; mutate(w=seq_along(x), z=sin(x))\n\n#&gt; # A tibble: 1,500 × 6\n#&gt;         x       y signx    signy        w      z\n#&gt;     &lt;dbl&gt;   &lt;dbl&gt; &lt;chr&gt;    &lt;chr&gt;    &lt;int&gt;  &lt;dbl&gt;\n#&gt;  1  0.451 -0.125  positive negative     1  0.436\n#&gt;  2  0.573 -0.811  positive negative     2  0.542\n#&gt;  3 -0.986  0.480  negative positive     3 -0.834\n#&gt;  4  0.953  0.397  positive positive     4  0.815\n#&gt;  5 -0.402  0.147  negative positive     5 -0.391\n#&gt;  6 -0.500  0.0175 negative positive     6 -0.480\n#&gt;  7 -0.450  0.408  negative positive     7 -0.435\n#&gt;  8  0.439  0.161  positive positive     8  0.425\n#&gt;  9 -0.474  0.532  negative positive     9 -0.457\n#&gt; 10 -0.459 -0.423  negative negative    10 -0.443\n#&gt; # ℹ 1,490 more rows\n\ndt |&gt; mutate(x=seq_along(x))\n\n#&gt; # A tibble: 1,500 × 4\n#&gt;        x       y signx    signy   \n#&gt;    &lt;int&gt;   &lt;dbl&gt; &lt;chr&gt;    &lt;chr&gt;   \n#&gt;  1     1 -0.125  positive negative\n#&gt;  2     2 -0.811  positive negative\n#&gt;  3     3  0.480  negative positive\n#&gt;  4     4  0.397  positive positive\n#&gt;  5     5  0.147  negative positive\n#&gt;  6     6  0.0175 negative positive\n#&gt;  7     7  0.408  negative positive\n#&gt;  8     8  0.161  positive positive\n#&gt;  9     9  0.532  negative positive\n#&gt; 10    10 -0.423  negative negative\n#&gt; # ℹ 1,490 more rows\n\n\n\n6.5.9 Selecting columns\n\ndt |&gt; select(x)  # only x\n\n#&gt; # A tibble: 1,500 × 1\n#&gt;         x\n#&gt;     &lt;dbl&gt;\n#&gt;  1  0.451\n#&gt;  2  0.573\n#&gt;  3 -0.986\n#&gt;  4  0.953\n#&gt;  5 -0.402\n#&gt;  6 -0.500\n#&gt;  7 -0.450\n#&gt;  8  0.439\n#&gt;  9 -0.474\n#&gt; 10 -0.459\n#&gt; # ℹ 1,490 more rows\n\ndt |&gt; select(-x) # all but x\n\n#&gt; # A tibble: 1,500 × 3\n#&gt;          y signx    signy   \n#&gt;      &lt;dbl&gt; &lt;chr&gt;    &lt;chr&gt;   \n#&gt;  1 -0.125  positive negative\n#&gt;  2 -0.811  positive negative\n#&gt;  3  0.480  negative positive\n#&gt;  4  0.397  positive positive\n#&gt;  5  0.147  negative positive\n#&gt;  6  0.0175 negative positive\n#&gt;  7  0.408  negative positive\n#&gt;  8  0.161  positive positive\n#&gt;  9  0.532  negative positive\n#&gt; 10 -0.423  negative negative\n#&gt; # ℹ 1,490 more rows\n\ndt |&gt; select(starts_with(\"sign\"))\n\n#&gt; # A tibble: 1,500 × 2\n#&gt;    signx    signy   \n#&gt;    &lt;chr&gt;    &lt;chr&gt;   \n#&gt;  1 positive negative\n#&gt;  2 positive negative\n#&gt;  3 negative positive\n#&gt;  4 positive positive\n#&gt;  5 negative positive\n#&gt;  6 negative positive\n#&gt;  7 negative positive\n#&gt;  8 positive positive\n#&gt;  9 negative positive\n#&gt; 10 negative negative\n#&gt; # ℹ 1,490 more rows\n\ndt |&gt; select(contains(\"x\"))\n\n#&gt; # A tibble: 1,500 × 2\n#&gt;         x signx   \n#&gt;     &lt;dbl&gt; &lt;chr&gt;   \n#&gt;  1  0.451 positive\n#&gt;  2  0.573 positive\n#&gt;  3 -0.986 negative\n#&gt;  4  0.953 positive\n#&gt;  5 -0.402 negative\n#&gt;  6 -0.500 negative\n#&gt;  7 -0.450 negative\n#&gt;  8  0.439 positive\n#&gt;  9 -0.474 negative\n#&gt; 10 -0.459 negative\n#&gt; # ℹ 1,490 more rows\n\n\n\n6.5.10 Filtering columns\n\ndt |&gt; filter(signx==\"positive\")\n\n#&gt; # A tibble: 750 × 4\n#&gt;        x      y signx    signy   \n#&gt;    &lt;dbl&gt;  &lt;dbl&gt; &lt;chr&gt;    &lt;chr&gt;   \n#&gt;  1 0.451 -0.125 positive negative\n#&gt;  2 0.573 -0.811 positive negative\n#&gt;  3 0.953  0.397 positive positive\n#&gt;  4 0.439  0.161 positive positive\n#&gt;  5 0.881  0.125 positive positive\n#&gt;  6 0.823  0.193 positive positive\n#&gt;  7 0.715  0.792 positive positive\n#&gt;  8 0.577 -0.303 positive negative\n#&gt;  9 0.272  0.137 positive positive\n#&gt; 10 0.255 -0.255 positive negative\n#&gt; # ℹ 740 more rows\n\ndt |&gt; filter(x&lt;0, y&gt;.1) # multiple filters can be applied at once\n\n#&gt; # A tibble: 343 × 4\n#&gt;          x     y signx    signy   \n#&gt;      &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;    &lt;chr&gt;   \n#&gt;  1 -0.986  0.480 negative positive\n#&gt;  2 -0.402  0.147 negative positive\n#&gt;  3 -0.450  0.408 negative positive\n#&gt;  4 -0.474  0.532 negative positive\n#&gt;  5 -0.956  0.311 negative positive\n#&gt;  6 -0.361  0.681 negative positive\n#&gt;  7 -0.215  0.838 negative positive\n#&gt;  8 -0.985  0.678 negative positive\n#&gt;  9 -0.0184 0.909 negative positive\n#&gt; 10 -0.128  0.182 negative positive\n#&gt; # ℹ 333 more rows\n\n\n\n6.5.11 Reorder columns\n\ndt |&gt; relocate(y, .after = signy)\n\n#&gt; # A tibble: 1,500 × 4\n#&gt;         x signx    signy          y\n#&gt;     &lt;dbl&gt; &lt;chr&gt;    &lt;chr&gt;      &lt;dbl&gt;\n#&gt;  1  0.451 positive negative -0.125 \n#&gt;  2  0.573 positive negative -0.811 \n#&gt;  3 -0.986 negative positive  0.480 \n#&gt;  4  0.953 positive positive  0.397 \n#&gt;  5 -0.402 negative positive  0.147 \n#&gt;  6 -0.500 negative positive  0.0175\n#&gt;  7 -0.450 negative positive  0.408 \n#&gt;  8  0.439 positive positive  0.161 \n#&gt;  9 -0.474 negative positive  0.532 \n#&gt; 10 -0.459 negative negative -0.423 \n#&gt; # ℹ 1,490 more rows\n\n\n\n6.5.12 Separate columns\nThe separation is based on standard separators such as “-”, “_”, “.”, ” “, etc. A single separator can be specified with the argument sep, otherwise all separators are used. One must provide the resulting vector of new column names: if one value is NA, this column will be discarded. Examples:\n\ndt5 &lt;- tibble(file=list.files(path=\"Exo/FTIR/Data/\", pattern=\".xls\"))\ndt5\n\n#&gt; # A tibble: 10 × 1\n#&gt;    file             \n#&gt;    &lt;chr&gt;            \n#&gt;  1 sample_0_25C.xls \n#&gt;  2 sample_0_300C.xls\n#&gt;  3 sample_1_25C.xls \n#&gt;  4 sample_1_300C.xls\n#&gt;  5 sample_2_25C.xls \n#&gt;  6 sample_2_300C.xls\n#&gt;  7 sample_3_25C.xls \n#&gt;  8 sample_3_300C.xls\n#&gt;  9 sample_4_25C.xls \n#&gt; 10 sample_4_300C.xls\n\ndt5 |&gt; separate(file, c(NA, \"sample\", \"temperature\", NA), convert = TRUE)\n\n#&gt; # A tibble: 10 × 2\n#&gt;    sample temperature\n#&gt;     &lt;int&gt; &lt;chr&gt;      \n#&gt;  1      0 25C        \n#&gt;  2      0 300C       \n#&gt;  3      1 25C        \n#&gt;  4      1 300C       \n#&gt;  5      2 25C        \n#&gt;  6      2 300C       \n#&gt;  7      3 25C        \n#&gt;  8      3 300C       \n#&gt;  9      4 25C        \n#&gt; 10      4 300C\n\ndt5 |&gt; separate(file, \n                c(\"name\", \"extension\"), \n                sep = \"\\\\.\")\n\n#&gt; # A tibble: 10 × 2\n#&gt;    name          extension\n#&gt;    &lt;chr&gt;         &lt;chr&gt;    \n#&gt;  1 sample_0_25C  xls      \n#&gt;  2 sample_0_300C xls      \n#&gt;  3 sample_1_25C  xls      \n#&gt;  4 sample_1_300C xls      \n#&gt;  5 sample_2_25C  xls      \n#&gt;  6 sample_2_300C xls      \n#&gt;  7 sample_3_25C  xls      \n#&gt;  8 sample_3_300C xls      \n#&gt;  9 sample_4_25C  xls      \n#&gt; 10 sample_4_300C xls\n\n\n\n6.5.13 Apply a function recursively on each element of a column\nTake a look at the cheatsheet on the purrr package for more options and a visual help on the map() family. I show here a use of purrr::map(vector, function) that returns a list. map(x, f) applies the function f() to each element of the vector x, putting the result in a separate element of a list: map(x, f) -&gt; list(f(x1), f(x2), ... f(xn)). In case f(xi) returns a single value, you might want to use map_dbl() or map_chr(), for example, that will return a vector of doubles or of characters, respectively.\n\nx &lt;- c(pi, pi/3, pi/2)\nmap(x, sin)     # returns a list\n\n#&gt; [[1]]\n#&gt; [1] 1.224647e-16\n#&gt; \n#&gt; [[2]]\n#&gt; [1] 0.8660254\n#&gt; \n#&gt; [[3]]\n#&gt; [1] 1\n\nx |&gt; map_dbl(sin) # returns a vector\n\n#&gt; [1] 1.224647e-16 8.660254e-01 1.000000e+00\n\n\nOf course, in the above case, it’s a stupid use of the power of map(). A typical use case is when you want to read multiple files, for example:\n\ndt6 &lt;- tibble(file=list.files(path=\"Exo/spectro2/Data\", \n                              pattern = \".txt\", \n                              full.names = TRUE)) |&gt; \n    slice(1:5) |&gt; \n    mutate(data = map(file, read_table, col_names = c(\"w\", \"Int\"))) |&gt; \n    mutate(file = basename(file))\ndt6\n\n#&gt; # A tibble: 5 × 2\n#&gt;   file         data                  \n#&gt;   &lt;chr&gt;        &lt;list&gt;                \n#&gt; 1 rubis_01.txt &lt;spc_tbl_ [1,015 × 2]&gt;\n#&gt; 2 rubis_02.txt &lt;spc_tbl_ [1,015 × 2]&gt;\n#&gt; 3 rubis_03.txt &lt;spc_tbl_ [1,015 × 2]&gt;\n#&gt; 4 rubis_04.txt &lt;spc_tbl_ [1,015 × 2]&gt;\n#&gt; 5 rubis_05.txt &lt;spc_tbl_ [1,015 × 2]&gt;\n\n\nThis is (almost) equivalent to:\n\ndt6 &lt;- tibble(file=list.files(path=\"Exo/spectro2/Data\", \n                              pattern = \".txt\", \n                              full.names = TRUE)) |&gt; \n    slice(1:5) |&gt; \n    mutate(data = map(file, ~read_table(., col_names = c(\"w\", \"Int\")))) |&gt; \n    mutate(file = basename(file))\n\nYou see that you can create the function directly within the call to map using the shortcut map(vector, ~ function(.)). This is useful to provide more arguments to the function – another solution is to write your own function before the call to map() and then call this function in map().\nNote that in case you need more parameters, you can use purrr::map2(vector1, vector2, ~function(.x, .y)), where .x and .y refer to vector1 and vector2, respectively (it’s always .x and .y whatever the name of vector1 and vector2).\n\ntibble(x=1:3, y=5:7) |&gt; \n    mutate(sum = map2_dbl(x, y, sum))\n\n#&gt; # A tibble: 3 × 3\n#&gt;       x     y   sum\n#&gt;   &lt;int&gt; &lt;int&gt; &lt;dbl&gt;\n#&gt; 1     1     5     6\n#&gt; 2     2     6     8\n#&gt; 3     3     7    10\n\ntibble(a=list(tibble(x=1:3, y=5:7), \n              tibble(x=0:3, y=4:7)), \n       b=list(tibble(x=10:13, y=15:18), \n              tibble(x=-1:2,  y=-14:-17))) |&gt; \n    mutate(sumx = map2_dbl(a, b, ~sum(.x$x, .y$x)),\n           sumy = map2_dbl(a, b, ~sum(.x$y, .y$y)))\n\n#&gt; # A tibble: 2 × 4\n#&gt;   a                b                 sumx  sumy\n#&gt;   &lt;list&gt;           &lt;list&gt;           &lt;dbl&gt; &lt;dbl&gt;\n#&gt; 1 &lt;tibble [3 × 2]&gt; &lt;tibble [4 × 2]&gt;    52    84\n#&gt; 2 &lt;tibble [4 × 2]&gt; &lt;tibble [4 × 2]&gt;     8   -40\n\n\n\n6.5.14 Nesting and un-nesting data\n\ndt7 &lt;- dt6 |&gt; \n    mutate(file = basename(file)) |&gt; \n    unnest(data)\ndt7\n\n#&gt; # A tibble: 5,075 × 3\n#&gt;    file             w   Int\n#&gt;    &lt;chr&gt;        &lt;dbl&gt; &lt;dbl&gt;\n#&gt;  1 rubis_01.txt 3064.  43.9\n#&gt;  2 rubis_01.txt 3064.  47.9\n#&gt;  3 rubis_01.txt 3064.  44.5\n#&gt;  4 rubis_01.txt 3065.  50.5\n#&gt;  5 rubis_01.txt 3065.  50.5\n#&gt;  6 rubis_01.txt 3065.  44.5\n#&gt;  7 rubis_01.txt 3065.  44.9\n#&gt;  8 rubis_01.txt 3066.  39.9\n#&gt;  9 rubis_01.txt 3066.  49.5\n#&gt; 10 rubis_01.txt 3066.  48.9\n#&gt; # ℹ 5,065 more rows\n\n# Nesting data per repeated values in a column (~equivalent to grouping)\ndt7 |&gt; nest(data=-file)\n\n#&gt; # A tibble: 5 × 2\n#&gt;   file         data                \n#&gt;   &lt;chr&gt;        &lt;list&gt;              \n#&gt; 1 rubis_01.txt &lt;tibble [1,015 × 2]&gt;\n#&gt; 2 rubis_02.txt &lt;tibble [1,015 × 2]&gt;\n#&gt; 3 rubis_03.txt &lt;tibble [1,015 × 2]&gt;\n#&gt; 4 rubis_04.txt &lt;tibble [1,015 × 2]&gt;\n#&gt; 5 rubis_05.txt &lt;tibble [1,015 × 2]&gt;\n\n\n\n6.5.15 Providing data to ggplot\n\ndt |&gt; \n    filter(abs(y) &gt; 0.1) |&gt; \n    ggplot(aes(x=x, y=y, color=signy))+\n        geom_point()",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Data frames</span>"
    ]
  },
  {
    "objectID": "07-dataframes.html#exo-df",
    "href": "07-dataframes.html#exo-df",
    "title": "\n6  Data frames\n",
    "section": "\n6.6 Exercises",
    "text": "6.6 Exercises\nDownload the exercises and solutions from the following repositories, then create a Rstudio project from the unzipped folder:\n\nBeginner exercises\nAdvanced exercises\n\n\nExercise 1\n\nCreate a 3 column data.frame containing 10 random values, their sinus, and the sum of the two first columns.\nPrint the 4 first lines of the table\nPrint the second column\nPrint the average of the third column\nUsing plot(x,y) where x and y are vectors, plot the 2nd column as a function of the first\nLook into the function write.table() to write a text file containing this data.frame\n\nDo the all the same things with a tibble\n\n\n\nSolution\n\n# Create a 3 column `data.frame`{.R} containing 10 random values, their sinus, \n# and the sum of the two first columns.\nx &lt;- runif(10)\ny &lt;- sin(x)\nz &lt;- x + y\ndf &lt;- data.frame(x=x, y=y, z=z)\n# Print the 4 first lines of the table\nhead(df, 4)\n\n#&gt;           x         y         z\n#&gt; 1 0.6348929 0.5930913 1.2279841\n#&gt; 2 0.6614916 0.6142945 1.2757861\n#&gt; 3 0.4241824 0.4115757 0.8357581\n#&gt; 4 0.9918614 0.8370459 1.8289073\n\n# Print the second column\ndf[,2]\n\n#&gt;  [1] 0.59309126 0.61429452 0.41157574 0.83704589 0.02015694 0.70144000\n#&gt;  [7] 0.77297262 0.73220407 0.78546715 0.01265397\n\n# Print the average of the third column\nmean(df$z); mean(df[3]); mean(df[,3])\n\n#&gt; [1] 1.161208\n\n\n#&gt; [1] NA\n\n\n#&gt; [1] 1.161208\n\n# Using `plot(x,y)`{.R} where `x` and `y` are vectors, \n# plot the 2nd column as a function of the first\nplot(df[,1], df[,2])\n\n\n\n\n\n\nplot(df$x, df$y)\n\n\n\n\n\n\n# Look into the function `write.table()`{.R} to write a text file \n# containing this `data.frame`{.R}\nwrite.table(df, \"Data/some_data.dat\", quote = FALSE, row.names = FALSE)\n# # # # # # # # # # # # # # # # # \n# Tibble version\nlibrary(tidyverse)\ndf_tib &lt;- tibble(a = runif(10), b = sin(a), c = a + b)\nhead(df_tib, 4)\n\n#&gt; # A tibble: 4 × 3\n#&gt;        a      b      c\n#&gt;    &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;\n#&gt; 1 0.202  0.200  0.402 \n#&gt; 2 0.282  0.278  0.560 \n#&gt; 3 0.712  0.654  1.37  \n#&gt; 4 0.0297 0.0297 0.0595\n\ndf_tib[,2]; df_tib[[2]];\n\n#&gt; # A tibble: 10 × 1\n#&gt;         b\n#&gt;     &lt;dbl&gt;\n#&gt;  1 0.200 \n#&gt;  2 0.278 \n#&gt;  3 0.654 \n#&gt;  4 0.0297\n#&gt;  5 0.199 \n#&gt;  6 0.532 \n#&gt;  7 0.631 \n#&gt;  8 0.261 \n#&gt;  9 0.732 \n#&gt; 10 0.590\n\n\n#&gt;  [1] 0.20021576 0.27821251 0.65369551 0.02973498 0.19892848 0.53157601\n#&gt;  [7] 0.63149638 0.26086010 0.73150681 0.59017850\n\nmean(df_tib$c); mean(df_tib[3]); mean(df_tib[,3]); mean(df_tib[[3]])\n\n#&gt; [1] 0.8492041\n\n\n#&gt; [1] NA\n\n\n#&gt; [1] NA\n\n\n#&gt; [1] 0.8492041\n\nwrite.table(df_tib, \"Data/some_data.dat\", quote = FALSE, row.names = FALSE)\nplot(df_tib$a, df_tib$b)\n\n\n\n\n\n\n\nExercise 2\n\nDownload the files:\n\nrubis_01.txt\npopulation.csv\nFTIR_rocks.xlsx\n\n\nLoad them into separate data.frames. Look into the options of read.table(), read.csv(), readxl::read_excel(), to get the proper data fields.\nAdd column names to the data.frame containing rubis_01.txt.\nPrint their dimensions.\nDo the same things with tibbles.\n\n\nSolution\n\nrubis_01   &lt;- read.table(\"Data/rubis_01.txt\", col.names = c(\"w\", \"intensity\"))\npopulation &lt;- read.csv(\"Data/population.csv\")\nFTIR_rocks &lt;- readxl::read_excel(\"Data/FTIR_rocks.xlsx\")\ndim(rubis_01); names(rubis_01)\n\n#&gt; [1] 1015    2\n\n\n#&gt; [1] \"w\"         \"intensity\"\n\ndim(population); names(population)\n\n#&gt; [1]  8 21\n\n\n#&gt;  [1] \"year\"          \"Angers\"        \"Bordeaux\"      \"Brest\"        \n#&gt;  [5] \"Dijon\"         \"Grenoble\"      \"LeHavre\"       \"LeMans\"       \n#&gt;  [9] \"Lille\"         \"Lyon\"          \"Marseille\"     \"Montpellier\"  \n#&gt; [13] \"Nantes\"        \"Nice\"          \"Paris\"         \"Reims\"        \n#&gt; [17] \"Rennes\"        \"Saint.Etienne\" \"Strasbourg\"    \"Toulon\"       \n#&gt; [21] \"Toulouse\"\n\ndim(FTIR_rocks); names(FTIR_rocks)\n\n#&gt; [1] 4718    4\n\n\n#&gt; [1] \"wavenumber, cm-1\" \"rock 1\"           \"rock 2\"           \"rock 3\"\n\nlibrary(tidyverse)\nrubis_01 &lt;- read_table(\"Data/rubis_01.txt\", col_names = c(\"w\", \"intensity\"))\npopulation &lt;- read_csv(\"Data/population.csv\")\n\nExercise 3\n\nDownload the TGA data file ATG.txt\n\nLoad it into a data.frame. Look into the options of read.table() to get the proper data fields.\nDo the same with a tibble\n\n\nSolution\n\nd &lt;- read.table(\"Data/ATG.txt\", \n                skip=12,\n                header=FALSE, \n                nrows=4088)\nnames(d) &lt;- c(\"Index\", \"t\", \"Ts\", \"Tr\", \"Value\")\nhead(d)\n\n#&gt;   Index  t      Ts Tr   Value\n#&gt; 1     0  0 32.3769 25 32.9680\n#&gt; 2     3  3 32.4051 25 32.9655\n#&gt; 3     6  6 32.4332 25 32.9619\n#&gt; 4     9  9 32.4726 25 32.9582\n#&gt; 5    12 12 32.5066 25 32.9544\n#&gt; 6    15 15 32.5221 25 32.9504\n\nd &lt;- read.table(\"Data/ATG.txt\", \n                skip=10,\n                comment.char=\"[\",\n                header=TRUE, \n                nrows=4088)\nhead(d)\n\n#&gt;   Index  t      Ts Tr   Value\n#&gt; 1     0  0 32.3769 25 32.9680\n#&gt; 2     3  3 32.4051 25 32.9655\n#&gt; 3     6  6 32.4332 25 32.9619\n#&gt; 4     9  9 32.4726 25 32.9582\n#&gt; 5    12 12 32.5066 25 32.9544\n#&gt; 6    15 15 32.5221 25 32.9504\n\nlibrary(tidyverse)\nd &lt;- read_table(\"Data/ATG.txt\", \n                skip    = 10,\n                comment = \"[\") |&gt; \n        drop_na()\nd\n\n#&gt; # A tibble: 4,088 × 5\n#&gt;    Index     t    Ts    Tr Value\n#&gt;    &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n#&gt;  1     0     0  32.4    25  33.0\n#&gt;  2     3     3  32.4    25  33.0\n#&gt;  3     6     6  32.4    25  33.0\n#&gt;  4     9     9  32.5    25  33.0\n#&gt;  5    12    12  32.5    25  33.0\n#&gt;  6    15    15  32.5    25  33.0\n#&gt;  7    18    18  32.6    25  32.9\n#&gt;  8    21    21  32.6    25  32.9\n#&gt;  9    24    24  32.6    25  32.9\n#&gt; 10    27    27  32.7    25  32.9\n#&gt; # ℹ 4,078 more rows\n\n\nExercise 4\nDownload population.csv and load it into a tibble.\n\nWhat are the names of the columns?\nAre the data tidy? make the table tidy if needed\nCreate a subset containing the data for Montpellier\n\nWhat is the max and min of population in this city?\nThe average population over time?\n\n\nWhat is the total population in 2012?\nWhat is the total population per year?\nWhat is the average population per city over the years?\n\n\nSolution\n\n# Download population.txt and load it into a `data.frame`{.R}.\nlibrary(tidyverse)\npopul &lt;- read_csv(\"Data/population.csv\")\n# What are the names of the columns and the dimension of the table?\nnames(popul); dim(popul)\n\n#&gt;  [1] \"year\"          \"Angers\"        \"Bordeaux\"      \"Brest\"        \n#&gt;  [5] \"Dijon\"         \"Grenoble\"      \"LeHavre\"       \"LeMans\"       \n#&gt;  [9] \"Lille\"         \"Lyon\"          \"Marseille\"     \"Montpellier\"  \n#&gt; [13] \"Nantes\"        \"Nice\"          \"Paris\"         \"Reims\"        \n#&gt; [17] \"Rennes\"        \"Saint-Etienne\" \"Strasbourg\"    \"Toulon\"       \n#&gt; [21] \"Toulouse\"\n\n\n#&gt; [1]  8 21\n\n# Are the data tidy?\nhead(popul) # no\n\n#&gt; # A tibble: 6 × 21\n#&gt;    year Angers Bordeaux  Brest  Dijon Grenoble LeHavre LeMans  Lille   Lyon\n#&gt;   &lt;dbl&gt;  &lt;dbl&gt;    &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;    &lt;dbl&gt;   &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;\n#&gt; 1  1962 115273   278403 136104 135694   156707  187845 132181 239955 535746\n#&gt; 2  1968 128557   266662 154023 145357   161616  207150 143246 238554 527800\n#&gt; 3  1975 137591   223131 166826 151705   166037  217882 152285 219204 456716\n#&gt; 4  1982 136038   208159 156060 140942   156637  199388 147697 196705 413095\n#&gt; 5  1990 141404   210336 147956 146703   150758  195854 145502 198691 415487\n#&gt; 6  1999 151279   215363 149634 149867   153317  190905 146105 212597 445452\n#&gt; # ℹ 11 more variables: Marseille &lt;dbl&gt;, Montpellier &lt;dbl&gt;, Nantes &lt;dbl&gt;,\n#&gt; #   Nice &lt;dbl&gt;, Paris &lt;dbl&gt;, Reims &lt;dbl&gt;, Rennes &lt;dbl&gt;, `Saint-Etienne` &lt;dbl&gt;,\n#&gt; #   Strasbourg &lt;dbl&gt;, Toulon &lt;dbl&gt;, Toulouse &lt;dbl&gt;\n\npopul.tidy &lt;- popul |&gt; \n    pivot_longer(cols=-year,\n                 names_to = \"city\",\n                 values_to = \"pop\"\n                )\npopul.tidy\n\n#&gt; # A tibble: 160 × 3\n#&gt;     year city         pop\n#&gt;    &lt;dbl&gt; &lt;chr&gt;      &lt;dbl&gt;\n#&gt;  1  1962 Angers    115273\n#&gt;  2  1962 Bordeaux  278403\n#&gt;  3  1962 Brest     136104\n#&gt;  4  1962 Dijon     135694\n#&gt;  5  1962 Grenoble  156707\n#&gt;  6  1962 LeHavre   187845\n#&gt;  7  1962 LeMans    132181\n#&gt;  8  1962 Lille     239955\n#&gt;  9  1962 Lyon      535746\n#&gt; 10  1962 Marseille 778071\n#&gt; # ℹ 150 more rows\n\n# Create a subset containing the data for Montpellier\nmtp &lt;- subset(popul.tidy, city == \"Montpellier\")\n# I prefer the tidyverse version\nmtp &lt;- popul.tidy |&gt; filter(city == \"Montpellier\")\n# What is the max and min of population in this city?\nmax(mtp$pop)\n\n#&gt; [1] 268456\n\nmin(mtp$pop)\n\n#&gt; [1] 118864\n\nrange(mtp$pop)\n\n#&gt; [1] 118864 268456\n\n# The average population over time?\nmean(mtp$pop)\n\n#&gt; [1] 203114.4\n\n# What is the total population in 2012?\nsum(popul.tidy[popul.tidy$year == 2012, \"pop\"])\n\n#&gt; [1] 7334805\n\npopul.tidy |&gt; \n    filter(year==2012) |&gt; \n    select(pop) |&gt; \n    sum()\n\n#&gt; [1] 7334805\n\n# What is the total population per year?\npopul.tidy |&gt; \n    group_by(year) |&gt; \n    summarise(pop_tot=sum(pop))\n\n#&gt; # A tibble: 8 × 2\n#&gt;    year pop_tot\n#&gt;   &lt;dbl&gt;   &lt;dbl&gt;\n#&gt; 1  1962 7349547\n#&gt; 2  1968 7550999\n#&gt; 3  1975 7298183\n#&gt; 4  1982 6933230\n#&gt; 5  1990 6857291\n#&gt; 6  1999 6965325\n#&gt; 7  2007 7235114\n#&gt; 8  2012 7334805\n\n# What is the average population per city over the years?\npopul.tidy |&gt; \n    group_by(city) |&gt; \n    summarise(pop_ave=mean(pop))\n\n#&gt; # A tibble: 20 × 2\n#&gt;    city           pop_ave\n#&gt;    &lt;chr&gt;            &lt;dbl&gt;\n#&gt;  1 Angers         138783.\n#&gt;  2 Bordeaux       234815.\n#&gt;  3 Brest          149125.\n#&gt;  4 Dijon          146735.\n#&gt;  5 Grenoble       157526.\n#&gt;  6 LeHavre        193990.\n#&gt;  7 LeMans         144347.\n#&gt;  8 Lille          220018.\n#&gt;  9 Lyon           470371.\n#&gt; 10 Marseille      844253.\n#&gt; 11 Montpellier    203114.\n#&gt; 12 Nantes         260925.\n#&gt; 13 Nice           334312.\n#&gt; 14 Paris         2321032.\n#&gt; 15 Reims          172278 \n#&gt; 16 Rennes         193425.\n#&gt; 17 Saint-Etienne  198135.\n#&gt; 18 Strasbourg     255429.\n#&gt; 19 Toulon         169683.\n#&gt; 20 Toulouse       382265.\n\n\nExercise 5\n\nFirst, load the tidyverse and lubridate package\nLoad people1.csv and people2.csv into pp1 and pp2\n\nCreate a new tibble pp by using the pipe operator (%&gt;%) and successively:\n\njoining the two tibbles into one using inner_join()\n\nadding a column age containing the age in years (use lubridate::time_length(x, 'years') with x a time difference in days) by using mutate()\n\n\n\nDisplay a summary of the table using str()\n\nUsing groupe_by() and summarize():\n\nShow the number of males and females in the table (use the counter n())\nShow the average age per gender\nShow the average size per gender and institution\nShow the number of people from each country, sorted by descending population (arrange())\n\n\nUsing select(), display:\n\nonly the name and age columns\nall but the name column\n\n\nUsing filter(), show data only for\n\nChinese people\nFrom institution ECL and UCBL\nPeople older than 22\nPeople with a e in their name\n\n\n\n\nSolution\n\n# First, load the `tidyverse` package\nlibrary(tidyverse)\n# Load people1.csv and people2.csv\npp1  &lt;- read_csv(\"Data/people1.csv\")\npp2  &lt;- read_csv(\"Data/people2.csv\")\n# Create a new tibble `pp` by using the pipe operator (`%&gt;%`)\n# and successively:\n# - joining the two tibbles into one using `inner_join()`\n# - adding a column `age` containing the age in years \n#   (use lubridate's `time_length(x, 'years')` with x a time\n#   difference in days) by using `mutate()`\npp &lt;- pp1 |&gt; \n        inner_join(pp2) |&gt; \n        mutate(age=time_length(today()-dateofbirth,'years'))\n# Display a summary of the table using `str()`\nstr(pp)\n\n#&gt; tibble [20 × 7] (S3: tbl_df/tbl/data.frame)\n#&gt;  $ name       : chr [1:20] \"Salem\" \"Dilruwan-Shanaka-Perera\" \"Hanna\" \"Sabin\" ...\n#&gt;  $ gender     : chr [1:20] \"Male\" \"Male\" \"Female\" \"Male\" ...\n#&gt;  $ origin     : chr [1:20] \"Yemen\" \"Sri Lanka\" \"Ukraine\" \"India\" ...\n#&gt;  $ institution: chr [1:20] \"UCBL\" \"INSA\" \"ECL\" \"INSA\" ...\n#&gt;  $ dateofbirth: Date[1:20], format: \"1997-12-26\" \"1997-03-28\" ...\n#&gt;  $ size       : num [1:20] 161 172 165 186 176 ...\n#&gt;  $ age        : num [1:20] 26.9 27.6 26.8 29.3 29.5 ...\n\n# Using `groupe_by()` and `summarize()`:\n# - Show the number of males and females in the table \n#   (use the counter `n()`)\npp |&gt; \n    group_by(gender) |&gt; \n    summarize(count=n())\n\n#&gt; # A tibble: 2 × 2\n#&gt;   gender count\n#&gt;   &lt;chr&gt;  &lt;int&gt;\n#&gt; 1 Female     4\n#&gt; 2 Male      16\n\n# - Show the average age per gender\npp |&gt; \n    group_by(gender) |&gt; \n    summarize(age=mean(age))\n\n#&gt; # A tibble: 2 × 2\n#&gt;   gender   age\n#&gt;   &lt;chr&gt;  &lt;dbl&gt;\n#&gt; 1 Female  28.9\n#&gt; 2 Male    28.6\n\n# - Show the average size per gender and institution\npp |&gt; \n    group_by(gender, institution) |&gt; \n    summarize(size=mean(size))\n\n#&gt; # A tibble: 4 × 3\n#&gt; # Groups:   gender [2]\n#&gt;   gender institution  size\n#&gt;   &lt;chr&gt;  &lt;chr&gt;       &lt;dbl&gt;\n#&gt; 1 Female ECL          178.\n#&gt; 2 Male   ECL          168.\n#&gt; 3 Male   INSA         174.\n#&gt; 4 Male   UCBL         174.\n\n# - Show the number of people from each country, \n#   sorted by descending population\npp |&gt; \n    group_by(origin) |&gt; \n    summarize(count=n()) |&gt; \n    arrange(desc(count))\n\n#&gt; # A tibble: 13 × 2\n#&gt;    origin      count\n#&gt;    &lt;chr&gt;       &lt;int&gt;\n#&gt;  1 China           4\n#&gt;  2 Ukraine         4\n#&gt;  3 USA             2\n#&gt;  4 Afghanistan     1\n#&gt;  5 Austria         1\n#&gt;  6 Brazil          1\n#&gt;  7 Colombia        1\n#&gt;  8 Cyprus          1\n#&gt;  9 India           1\n#&gt; 10 Iran            1\n#&gt; 11 Sri Lanka       1\n#&gt; 12 Tunisia         1\n#&gt; 13 Yemen           1\n\n# Using `select()`, display:\n# - only the name and age columns\npp |&gt; select(c(name, age))\n\n#&gt; # A tibble: 20 × 2\n#&gt;    name                      age\n#&gt;    &lt;chr&gt;                   &lt;dbl&gt;\n#&gt;  1 Salem                    26.9\n#&gt;  2 Dilruwan-Shanaka-Perera  27.6\n#&gt;  3 Hanna                    26.8\n#&gt;  4 Sabin                    29.3\n#&gt;  5 Benedikt                 29.5\n#&gt;  6 Jordyn                   27.7\n#&gt;  7 Jennifer                 29.4\n#&gt;  8 Yiran                    29.7\n#&gt;  9 Leran                    31.8\n#&gt; 10 Aymen                    34.7\n#&gt; 11 Pavlo                    27.6\n#&gt; 12 Saulo                    30.1\n#&gt; 13 Nicolas-Estevan          30.9\n#&gt; 14 Farzad                   27.9\n#&gt; 15 Roein                    25.3\n#&gt; 16 Paraskevas               25.4\n#&gt; 17 Ihor                     25.1\n#&gt; 18 Iryna                    31.7\n#&gt; 19 Peng                     27.9\n#&gt; 20 Mingyuan                 27.2\n\n# - all but the name column\npp |&gt; select(-name)\n\n#&gt; # A tibble: 20 × 6\n#&gt;    gender origin      institution dateofbirth  size   age\n#&gt;    &lt;chr&gt;  &lt;chr&gt;       &lt;chr&gt;       &lt;date&gt;      &lt;dbl&gt; &lt;dbl&gt;\n#&gt;  1 Male   Yemen       UCBL        1997-12-26   161.  26.9\n#&gt;  2 Male   Sri Lanka   INSA        1997-03-28   172.  27.6\n#&gt;  3 Female Ukraine     ECL         1997-12-30   165.  26.8\n#&gt;  4 Male   India       INSA        1995-08-04   186.  29.3\n#&gt;  5 Male   Austria     UCBL        1995-04-25   176.  29.5\n#&gt;  6 Female USA         ECL         1997-02-19   176.  27.7\n#&gt;  7 Female USA         ECL         1995-05-28   179   29.4\n#&gt;  8 Male   China       UCBL        1995-02-04   188.  29.7\n#&gt;  9 Male   China       UCBL        1992-12-30   186   31.8\n#&gt; 10 Male   Tunisia     INSA        1990-03-03   160.  34.7\n#&gt; 11 Male   Ukraine     ECL         1997-04-12   151.  27.6\n#&gt; 12 Male   Brazil      ECL         1994-09-24   184.  30.1\n#&gt; 13 Male   Colombia    INSA        1993-11-25   184.  30.9\n#&gt; 14 Male   Iran        INSA        1996-12-27   183   27.9\n#&gt; 15 Male   Afghanistan INSA        1999-07-11   155.  25.3\n#&gt; 16 Male   Cyprus      INSA        1999-06-25   176.  25.4\n#&gt; 17 Male   Ukraine     ECL         1999-10-03   170.  25.1\n#&gt; 18 Female Ukraine     ECL         1993-02-27   192   31.7\n#&gt; 19 Male   China       UCBL        1996-12-14   171   27.9\n#&gt; 20 Male   China       UCBL        1997-08-21   164.  27.2\n\n# Using `filter()`, show data only for\n# - Chinese people\npp |&gt; filter(origin=='China')\n\n#&gt; # A tibble: 4 × 7\n#&gt;   name     gender origin institution dateofbirth  size   age\n#&gt;   &lt;chr&gt;    &lt;chr&gt;  &lt;chr&gt;  &lt;chr&gt;       &lt;date&gt;      &lt;dbl&gt; &lt;dbl&gt;\n#&gt; 1 Yiran    Male   China  UCBL        1995-02-04   188.  29.7\n#&gt; 2 Leran    Male   China  UCBL        1992-12-30   186   31.8\n#&gt; 3 Peng     Male   China  UCBL        1996-12-14   171   27.9\n#&gt; 4 Mingyuan Male   China  UCBL        1997-08-21   164.  27.2\n\n# - From institution ECL and UCBL\npp |&gt; filter(institution %in% c('ECL', 'UCBL'))\n\n#&gt; # A tibble: 13 × 7\n#&gt;    name     gender origin  institution dateofbirth  size   age\n#&gt;    &lt;chr&gt;    &lt;chr&gt;  &lt;chr&gt;   &lt;chr&gt;       &lt;date&gt;      &lt;dbl&gt; &lt;dbl&gt;\n#&gt;  1 Salem    Male   Yemen   UCBL        1997-12-26   161.  26.9\n#&gt;  2 Hanna    Female Ukraine ECL         1997-12-30   165.  26.8\n#&gt;  3 Benedikt Male   Austria UCBL        1995-04-25   176.  29.5\n#&gt;  4 Jordyn   Female USA     ECL         1997-02-19   176.  27.7\n#&gt;  5 Jennifer Female USA     ECL         1995-05-28   179   29.4\n#&gt;  6 Yiran    Male   China   UCBL        1995-02-04   188.  29.7\n#&gt;  7 Leran    Male   China   UCBL        1992-12-30   186   31.8\n#&gt;  8 Pavlo    Male   Ukraine ECL         1997-04-12   151.  27.6\n#&gt;  9 Saulo    Male   Brazil  ECL         1994-09-24   184.  30.1\n#&gt; 10 Ihor     Male   Ukraine ECL         1999-10-03   170.  25.1\n#&gt; 11 Iryna    Female Ukraine ECL         1993-02-27   192   31.7\n#&gt; 12 Peng     Male   China   UCBL        1996-12-14   171   27.9\n#&gt; 13 Mingyuan Male   China   UCBL        1997-08-21   164.  27.2\n\n# - People older than 22 \npp |&gt; filter(age&gt;22)\n\n#&gt; # A tibble: 20 × 7\n#&gt;    name                    gender origin     institution dateofbirth  size   age\n#&gt;    &lt;chr&gt;                   &lt;chr&gt;  &lt;chr&gt;      &lt;chr&gt;       &lt;date&gt;      &lt;dbl&gt; &lt;dbl&gt;\n#&gt;  1 Salem                   Male   Yemen      UCBL        1997-12-26   161.  26.9\n#&gt;  2 Dilruwan-Shanaka-Perera Male   Sri Lanka  INSA        1997-03-28   172.  27.6\n#&gt;  3 Hanna                   Female Ukraine    ECL         1997-12-30   165.  26.8\n#&gt;  4 Sabin                   Male   India      INSA        1995-08-04   186.  29.3\n#&gt;  5 Benedikt                Male   Austria    UCBL        1995-04-25   176.  29.5\n#&gt;  6 Jordyn                  Female USA        ECL         1997-02-19   176.  27.7\n#&gt;  7 Jennifer                Female USA        ECL         1995-05-28   179   29.4\n#&gt;  8 Yiran                   Male   China      UCBL        1995-02-04   188.  29.7\n#&gt;  9 Leran                   Male   China      UCBL        1992-12-30   186   31.8\n#&gt; 10 Aymen                   Male   Tunisia    INSA        1990-03-03   160.  34.7\n#&gt; 11 Pavlo                   Male   Ukraine    ECL         1997-04-12   151.  27.6\n#&gt; 12 Saulo                   Male   Brazil     ECL         1994-09-24   184.  30.1\n#&gt; 13 Nicolas-Estevan         Male   Colombia   INSA        1993-11-25   184.  30.9\n#&gt; 14 Farzad                  Male   Iran       INSA        1996-12-27   183   27.9\n#&gt; 15 Roein                   Male   Afghanist… INSA        1999-07-11   155.  25.3\n#&gt; 16 Paraskevas              Male   Cyprus     INSA        1999-06-25   176.  25.4\n#&gt; 17 Ihor                    Male   Ukraine    ECL         1999-10-03   170.  25.1\n#&gt; 18 Iryna                   Female Ukraine    ECL         1993-02-27   192   31.7\n#&gt; 19 Peng                    Male   China      UCBL        1996-12-14   171   27.9\n#&gt; 20 Mingyuan                Male   China      UCBL        1997-08-21   164.  27.2\n\n# - People with a `e` in their name\npp |&gt; filter(grepl('e',name))\n\n#&gt; # A tibble: 10 × 7\n#&gt;    name                    gender origin     institution dateofbirth  size   age\n#&gt;    &lt;chr&gt;                   &lt;chr&gt;  &lt;chr&gt;      &lt;chr&gt;       &lt;date&gt;      &lt;dbl&gt; &lt;dbl&gt;\n#&gt;  1 Salem                   Male   Yemen      UCBL        1997-12-26   161.  26.9\n#&gt;  2 Dilruwan-Shanaka-Perera Male   Sri Lanka  INSA        1997-03-28   172.  27.6\n#&gt;  3 Benedikt                Male   Austria    UCBL        1995-04-25   176.  29.5\n#&gt;  4 Jennifer                Female USA        ECL         1995-05-28   179   29.4\n#&gt;  5 Leran                   Male   China      UCBL        1992-12-30   186   31.8\n#&gt;  6 Aymen                   Male   Tunisia    INSA        1990-03-03   160.  34.7\n#&gt;  7 Nicolas-Estevan         Male   Colombia   INSA        1993-11-25   184.  30.9\n#&gt;  8 Roein                   Male   Afghanist… INSA        1999-07-11   155.  25.3\n#&gt;  9 Paraskevas              Male   Cyprus     INSA        1999-06-25   176.  25.4\n#&gt; 10 Peng                    Male   China      UCBL        1996-12-14   171   27.9\n\n\n\nFor more interesting exercises in the tidyverse, look at:\n\nCO2 emissions: data wrangling and ggplot2\nReligion and babies: data handling, ggplot2 and plotly\nCOVID-19: data wrangling, ggplot2\nNanoparticles statistics from SEM images: data wrangling, ggplot2 and fitting",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Data frames</span>"
    ]
  },
  {
    "objectID": "08-reading_files.html",
    "href": "08-reading_files.html",
    "title": "\n7  Reading/writing all kinds of files\n",
    "section": "",
    "text": "7.1 Reading files\nWorking in any data-based scientific field, you will encounter many different types of files. ASCII text files are usually predominant, but you may want to read files from coming from Excel, Origin, etc. Here is a non-exhaustive reminder to help you read the kinds of files you often encounter with R. I invite you to visit the RopenSci webpage for more packages, and if this isn’t enough for your need, well, Google is your friend.",
    "crumbs": [
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Reading/writing all kinds of files</span>"
    ]
  },
  {
    "objectID": "08-reading_files.html#reading-files",
    "href": "08-reading_files.html#reading-files",
    "title": "\n7  Reading/writing all kinds of files\n",
    "section": "",
    "text": "7.1.1 Column text files\nMost base R functions like read.csv() or read.table() have their tidyverse counterpart, like read_csv() and read_table(). I usually prefer the tidyverse version as it outputs a tibble instead of a data.frame. These functions can also be directly provided with an url to the text file.\nIf your data file is “complicated” – in the sense that it contains lines or columns to be skipped – look at the help on the reader function with ?function_name.\n\n7.1.1.1 Comma separated values\nInput file looks like this:\n\n\n#&gt; Country Name,Country Code,Year,Value\n#&gt; Arab World,ARB,1960,92490932\n#&gt; Arab World,ARB,1961,95044497\n#&gt; Arab World,ARB,1962,97682294\n#&gt; Arab World,ARB,1963,100411076\n#&gt; Arab World,ARB,1964,103239902\n#&gt; Arab World,ARB,1965,106174988\n#&gt; Arab World,ARB,1966,109230593\n#&gt; Arab World,ARB,1967,112406932\n#&gt; Arab World,ARB,1968,115680165\n\n\n\nlibrary(tidyverse)\nread_csv(\"Data/tot_population.csv\")\n\n#&gt; # A tibble: 14,885 × 4\n#&gt;    `Country Name` `Country Code`  Year     Value\n#&gt;    &lt;chr&gt;          &lt;chr&gt;          &lt;dbl&gt;     &lt;dbl&gt;\n#&gt;  1 Arab World     ARB             1960  92490932\n#&gt;  2 Arab World     ARB             1961  95044497\n#&gt;  3 Arab World     ARB             1962  97682294\n#&gt;  4 Arab World     ARB             1963 100411076\n#&gt;  5 Arab World     ARB             1964 103239902\n#&gt;  6 Arab World     ARB             1965 106174988\n#&gt;  7 Arab World     ARB             1966 109230593\n#&gt;  8 Arab World     ARB             1967 112406932\n#&gt;  9 Arab World     ARB             1968 115680165\n#&gt; 10 Arab World     ARB             1969 119016542\n#&gt; # ℹ 14,875 more rows\n\nread_csv(\"Data/tot_population.csv\", skip = 1)\n\n#&gt; # A tibble: 14,884 × 4\n#&gt;    `Arab World` ARB   `1960` `92490932`\n#&gt;    &lt;chr&gt;        &lt;chr&gt;  &lt;dbl&gt;      &lt;dbl&gt;\n#&gt;  1 Arab World   ARB     1961   95044497\n#&gt;  2 Arab World   ARB     1962   97682294\n#&gt;  3 Arab World   ARB     1963  100411076\n#&gt;  4 Arab World   ARB     1964  103239902\n#&gt;  5 Arab World   ARB     1965  106174988\n#&gt;  6 Arab World   ARB     1966  109230593\n#&gt;  7 Arab World   ARB     1967  112406932\n#&gt;  8 Arab World   ARB     1968  115680165\n#&gt;  9 Arab World   ARB     1969  119016542\n#&gt; 10 Arab World   ARB     1970  122398374\n#&gt; # ℹ 14,874 more rows\n\nread_csv(\"Data/tot_population.csv\", skip = 1, col_names = LETTERS[1:4])\n\n#&gt; # A tibble: 14,885 × 4\n#&gt;    A          B         C         D\n#&gt;    &lt;chr&gt;      &lt;chr&gt; &lt;dbl&gt;     &lt;dbl&gt;\n#&gt;  1 Arab World ARB    1960  92490932\n#&gt;  2 Arab World ARB    1961  95044497\n#&gt;  3 Arab World ARB    1962  97682294\n#&gt;  4 Arab World ARB    1963 100411076\n#&gt;  5 Arab World ARB    1964 103239902\n#&gt;  6 Arab World ARB    1965 106174988\n#&gt;  7 Arab World ARB    1966 109230593\n#&gt;  8 Arab World ARB    1967 112406932\n#&gt;  9 Arab World ARB    1968 115680165\n#&gt; 10 Arab World ARB    1969 119016542\n#&gt; # ℹ 14,875 more rows\n\n\nSince version 2.0 of readr, read_csv() can also take a vector as argument, which will result in reading all files in the vector successively:\n\nread_csv(c(\"Data/test1.csv\",\n           \"Data/test2.csv\"),\n         id = \"file\", show_col_types = FALSE)\n\n#&gt; # A tibble: 4 × 3\n#&gt;   file           name  value\n#&gt;   &lt;chr&gt;          &lt;chr&gt; &lt;dbl&gt;\n#&gt; 1 Data/test1.csv John      3\n#&gt; 2 Data/test1.csv Doe       2\n#&gt; 3 Data/test2.csv Colin     5\n#&gt; 4 Data/test2.csv Louis     8\n\n\n\n7.1.1.2 Space separated values\nInput file looks like this:\n\n\n#&gt; 3063.7136    43.916748\n#&gt; 3063.991 47.916748\n#&gt; 3064.2668    44.5\n#&gt; 3064.5442    50.5\n#&gt; 3064.8201    50.5\n#&gt; 3065.0972    44.5\n#&gt; 3065.373 44.916748\n#&gt; 3065.6504    39.916748\n#&gt; 3065.9263    49.5\n#&gt; 3066.2034    48.916748\n\n\nlibrary(tidyverse)\nread_table(\"Data/rubis_01.txt\")\nread_table(\"Data/rubis_01.txt\", col_names = c(\"w\",\"int\"))\n\n7.1.1.3 Other separators\nFor tab-separated values, use read_tsv(). For other exotic separators, look into read_delim().\n\n7.1.2 Excel files\nFor this, use the readxl library and its function read_excel() returning a tibble:\n\nlibrary(readxl)\nread_excel(\"Data/test.xlsx\")\n\n#&gt; # A tibble: 10 × 2\n#&gt;        x      y\n#&gt;    &lt;dbl&gt;  &lt;dbl&gt;\n#&gt;  1     1  5.21 \n#&gt;  2     2  6.55 \n#&gt;  3     3  3.71 \n#&gt;  4     4  0.216\n#&gt;  5     5  0.205\n#&gt;  6     6  4.60 \n#&gt;  7     7 10.3  \n#&gt;  8     8 12.9  \n#&gt;  9     9 11.1  \n#&gt; 10    10  7.28\n\nread_excel(\"Data/test.xlsx\", sheet=2) # specify the sheet by its number or its name\n\n#&gt; # A tibble: 4 × 2\n#&gt;   hello  world   \n#&gt;   &lt;chr&gt;  &lt;chr&gt;   \n#&gt; 1 ac     th      \n#&gt; 2 asc    thh     \n#&gt; 3 ascsa  dthdh   \n#&gt; 4 ascacs dthtdhdh\n\n\nIn case your Excel file contains merged cells, read_excel() will fill the merged cells by NA values. If you want to avoid this behavior, use openxlsx::read.xlsx() (which returns a data.frame):\n\nread_excel(\"Data/test.xlsx\", sheet=3)\n\n#&gt; # A tibble: 5 × 3\n#&gt;   a         b ...3 \n#&gt;   &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt;\n#&gt; 1 &lt;NA&gt;     12 t    \n#&gt; 2 &lt;NA&gt;     13 h    \n#&gt; 3 &lt;NA&gt;     14 d    \n#&gt; 4 b        15 f    \n#&gt; 5 &lt;NA&gt;     16 g\n\nlibrary(openxlsx)\nread.xlsx(\"Data/test.xlsx\", fillMergedCells = TRUE, sheet = 3)\n\n#&gt;   a  b b\n#&gt; 1 a 12 t\n#&gt; 2 a 13 h\n#&gt; 3 a 14 d\n#&gt; 4 b 15 f\n#&gt; 5 b 16 g\n\n\n\n7.1.3 Origin files\nIf you moved to R coming from a workflow where you used Origin, chances are you have some .opj files lying around that you still want to be able to read. Lucky you, the Ropj library is here:\nlibrary(Ropj)\nread.opj(\"Data/opjfile.opj\")\n\n7.1.4 Matlab files\nTo read Matlab’s .mat format datasets, use the R.matlab package and its readMat() function.\nlibrary(R.matlab)\ndf &lt;- readMat(\"yourfile.mat\")\n\n7.1.5 Images\nYou can read an image as a matrix. For example:\nlibrary(png)\nreadPNG(\"image.png\")\nlibrary(tiff)\nreadTIFF(\"image.tiff\")\nFor more image processing (pictures or videos), I recommend the imager package.\n\n7.1.6 Spectroscopic files\nIn case your spectroscopic data wasn’t saved as an ASCII file but as a spc or another format, take a look at the lightr package, for example.\nExample of a reading function for an spc file:\nlibrary(tidyverse)\nlibrary(lightr)\nread_spc &lt;- function(fname){\n    d &lt;- lr_parse_spc(fname) # d is a list\n    tibble(w         = d[[1]]$wl, \n           intensity = d[[1]]$processed)\n}\n\n7.1.7 Compressed binary data files: HDF, netCDF\nHDF: Go to this vignette to see how to read Hierarchical Data Files.\nnetCDF: see here.",
    "crumbs": [
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Reading/writing all kinds of files</span>"
    ]
  },
  {
    "objectID": "08-reading_files.html#reading-multiple-files-into-a-tidy-table",
    "href": "08-reading_files.html#reading-multiple-files-into-a-tidy-table",
    "title": "\n7  Reading/writing all kinds of files\n",
    "section": "\n7.2 Reading multiple files into a tidy table",
    "text": "7.2 Reading multiple files into a tidy table\nWe very often encounter the situation where we need to read multiple similar files into a tidy table. For this, you can use a for loop: this would work but would be un-R-ly, but in some cases you need to do this because you perform some other operations during the for loop.\nLet’s say we store the list of file names into a vector file_list and read these files using the function read_function():\nlibrary(tidyverse)\ndf &lt;- tibble() # empty initialization\nfor (file in file_list) {\n    df_temp &lt;- read_function(file) |&gt; \n            mutate(name = file) # add the column `name` to make the tibble tidy\n    df &lt;- bind_rows(df, def_temp)\n}\nAn R-friendly way of doing this would be to avoid using a for loop:\nlibrary(tidyverse)\ndf &lt;- tibble(name = file_list) |&gt; \n    mutate(data = map(name, read_function)) |&gt; \n    unnest(data)\nIn case you are reading csv files, you can use the fact that since the version 2.0 of readr, read_csv() takes a vector as first argument. You’ll also need to use the id argument to get a column with the list of file names:\nlibrary(tidyverse)\ndf &lt;- read_csv(file_list, id = \"name\")",
    "crumbs": [
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Reading/writing all kinds of files</span>"
    ]
  },
  {
    "objectID": "08-reading_files.html#writing-files",
    "href": "08-reading_files.html#writing-files",
    "title": "\n7  Reading/writing all kinds of files\n",
    "section": "\n7.3 Writing files",
    "text": "7.3 Writing files\n\n7.3.1 Text files\nSometimes, you want to output your data as a csv or an Excel file to share it with others or to save your data. Use the write_csv() function to write a csv file (prefer the tidyverse’s write_csv() to the base R write.csv() as it is more easy to use):\nlibrary(tidyverse)\nwrite_csv(df, \"your_file.csv\")\nNote that the write_*() functions will automatically compress outputs if an appropriate extension is given. Three extensions are currently supported: .gz for gzip compression, .bz2 for bzip2 compression and .xz for lzma compression. See the examples in the help for more information.\nIf you don’t want to use csv files, look into write_tsv() for tab-separated values or write_delim() for any delimiter. In case you want to output fixed width files, look into gdata’s write.fwf().\n\n7.3.2 Excel files\nTo write Excel files, use the library openxlsx and its function write.xlsx() (see the help on the function for more options):\nlibrary(openxlsx)\nwrite.xlsx(df, \"your_file.xlsx\")",
    "crumbs": [
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Reading/writing all kinds of files</span>"
    ]
  },
  {
    "objectID": "09-lists.html",
    "href": "09-lists.html",
    "title": "\n8  Lists\n",
    "section": "",
    "text": "8.1 Definition\nLists allow you to store all types of objects and types of values: booleans, doubles, characters, vectors, other lists, data.frame, etc\n# initialization\nL &lt;- list(name = \"John\",\n          age  = 43,\n          kids = list(name=c(\"Kevin\", \"Pamela\"), # nested list\n                      age =c(4,5)\n                     )\n         )\nL\n\n#&gt; $name\n#&gt; [1] \"John\"\n#&gt; \n#&gt; $age\n#&gt; [1] 43\n#&gt; \n#&gt; $kids\n#&gt; $kids$name\n#&gt; [1] \"Kevin\"  \"Pamela\"\n#&gt; \n#&gt; $kids$age\n#&gt; [1] 4 5\n\n# names of entries (can be changed)\nnames(L)\n\n#&gt; [1] \"name\" \"age\"  \"kids\"\n\n# statistics\nsummary(L)\n\n#&gt;      Length Class  Mode     \n#&gt; name 1      -none- character\n#&gt; age  1      -none- numeric  \n#&gt; kids 2      -none- list\n\nstr(L)\n\n#&gt; List of 3\n#&gt;  $ name: chr \"John\"\n#&gt;  $ age : num 43\n#&gt;  $ kids:List of 2\n#&gt;   ..$ name: chr [1:2] \"Kevin\" \"Pamela\"\n#&gt;   ..$ age : num [1:2] 4 5",
    "crumbs": [
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Lists</span>"
    ]
  },
  {
    "objectID": "09-lists.html#accessing-values-and-other-operations",
    "href": "09-lists.html#accessing-values-and-other-operations",
    "title": "\n8  Lists\n",
    "section": "\n8.2 Accessing values and other operations",
    "text": "8.2 Accessing values and other operations\n\nL$name # is a vector\n\n#&gt; [1] \"John\"\n\nL[\"age\"];typeof(L[\"age\"])     # is a list\n\n#&gt; $age\n#&gt; [1] 43\n\n\n#&gt; [1] \"list\"\n\nL[[\"age\"]];typeof(L[[\"age\"]]) # is a vector\n\n#&gt; [1] 43\n\n\n#&gt; [1] \"double\"\n\nL[[3]]      # is a list (because 'kids' is a list)\n\n#&gt; $name\n#&gt; [1] \"Kevin\"  \"Pamela\"\n#&gt; \n#&gt; $age\n#&gt; [1] 4 5\n\nL[[3]]['name']   # is a list\n\n#&gt; $name\n#&gt; [1] \"Kevin\"  \"Pamela\"\n\nL[[3]][['name']] # is a vector\n\n#&gt; [1] \"Kevin\"  \"Pamela\"\n\n# empty initialization\nLL &lt;- list(); LL # no specific size\n\n#&gt; list()\n\nLL &lt;- vector(\"list\", length=3); LL # specific size\n\n#&gt; [[1]]\n#&gt; NULL\n#&gt; \n#&gt; [[2]]\n#&gt; NULL\n#&gt; \n#&gt; [[3]]\n#&gt; NULL\n\n# Concatenation\nL1 &lt;- list(wife=\"Kim\", wife.age=38)\nL2 &lt;- c(L, L1)\ntypeof(L2); L2\n\n#&gt; [1] \"list\"\n\n\n#&gt; $name\n#&gt; [1] \"John\"\n#&gt; \n#&gt; $age\n#&gt; [1] 43\n#&gt; \n#&gt; $kids\n#&gt; $kids$name\n#&gt; [1] \"Kevin\"  \"Pamela\"\n#&gt; \n#&gt; $kids$age\n#&gt; [1] 4 5\n#&gt; \n#&gt; \n#&gt; $wife\n#&gt; [1] \"Kim\"\n#&gt; \n#&gt; $wife.age\n#&gt; [1] 38",
    "crumbs": [
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Lists</span>"
    ]
  },
  {
    "objectID": "09-lists.html#exo-lists",
    "href": "09-lists.html#exo-lists",
    "title": "\n8  Lists\n",
    "section": "\n8.3 Exercises",
    "text": "8.3 Exercises\n\nCreate a list containing 2 strings, 2 numbers, 2 vectors, 1 list and 2 logical values.\nGive names to the elements in the list.\nAccess the first and second elements of the list.\nAdd a new item g4 = \"Hello\" to the list.\nSelect the second element of the nested list.\nRemove the second element of the list.\nCreate a second list with whatever you want\nMerge the two lists into one list.\nPrint the number of objects in the merged list.\nConvert list(1,2,3,4) to a vector\n\n\nSolution\n\n# Create a list containing 2 strings, 2 numbers, 2 vectors, 1 list and 2 logical values.\n# Give names to the elements in the list.\nfirst_list &lt;- list(string1 = \"foo\",\n                   string2 = \"bar\",\n                   number1 = 42,\n                   number2 = pi,\n                   vec1    = seq(-10,10,1),\n                   vec2    = c(\"Hello\", \"world\"),\n                   list1   = list(a = 1:10, \n                                  b = 10:1),\n                   bool1   = TRUE,\n                   bool2   = FALSE\n                  )\nfirst_list\n\n#&gt; $string1\n#&gt; [1] \"foo\"\n#&gt; \n#&gt; $string2\n#&gt; [1] \"bar\"\n#&gt; \n#&gt; $number1\n#&gt; [1] 42\n#&gt; \n#&gt; $number2\n#&gt; [1] 3.141593\n#&gt; \n#&gt; $vec1\n#&gt;  [1] -10  -9  -8  -7  -6  -5  -4  -3  -2  -1   0   1   2   3   4   5   6   7   8\n#&gt; [20]   9  10\n#&gt; \n#&gt; $vec2\n#&gt; [1] \"Hello\" \"world\"\n#&gt; \n#&gt; $list1\n#&gt; $list1$a\n#&gt;  [1]  1  2  3  4  5  6  7  8  9 10\n#&gt; \n#&gt; $list1$b\n#&gt;  [1] 10  9  8  7  6  5  4  3  2  1\n#&gt; \n#&gt; \n#&gt; $bool1\n#&gt; [1] TRUE\n#&gt; \n#&gt; $bool2\n#&gt; [1] FALSE\n\n# Access the first and second elements of the list.\nfirst_list[[1]]\n\n#&gt; [1] \"foo\"\n\nfirst_list[[\"string2\"]]\n\n#&gt; [1] \"bar\"\n\n# Add a new item `g4 = \"Hello\"` to the list.\nfirst_list$g4 &lt;- \"Hello\"\nfirst_list\n\n#&gt; $string1\n#&gt; [1] \"foo\"\n#&gt; \n#&gt; $string2\n#&gt; [1] \"bar\"\n#&gt; \n#&gt; $number1\n#&gt; [1] 42\n#&gt; \n#&gt; $number2\n#&gt; [1] 3.141593\n#&gt; \n#&gt; $vec1\n#&gt;  [1] -10  -9  -8  -7  -6  -5  -4  -3  -2  -1   0   1   2   3   4   5   6   7   8\n#&gt; [20]   9  10\n#&gt; \n#&gt; $vec2\n#&gt; [1] \"Hello\" \"world\"\n#&gt; \n#&gt; $list1\n#&gt; $list1$a\n#&gt;  [1]  1  2  3  4  5  6  7  8  9 10\n#&gt; \n#&gt; $list1$b\n#&gt;  [1] 10  9  8  7  6  5  4  3  2  1\n#&gt; \n#&gt; \n#&gt; $bool1\n#&gt; [1] TRUE\n#&gt; \n#&gt; $bool2\n#&gt; [1] FALSE\n#&gt; \n#&gt; $g4\n#&gt; [1] \"Hello\"\n\n# Select the second element of the nested list.\nfirst_list[[\"list1\"]][[2]]\n\n#&gt;  [1] 10  9  8  7  6  5  4  3  2  1\n\n# Remove the second element of the list.\nfirst_list[-2]\n\n#&gt; $string1\n#&gt; [1] \"foo\"\n#&gt; \n#&gt; $number1\n#&gt; [1] 42\n#&gt; \n#&gt; $number2\n#&gt; [1] 3.141593\n#&gt; \n#&gt; $vec1\n#&gt;  [1] -10  -9  -8  -7  -6  -5  -4  -3  -2  -1   0   1   2   3   4   5   6   7   8\n#&gt; [20]   9  10\n#&gt; \n#&gt; $vec2\n#&gt; [1] \"Hello\" \"world\"\n#&gt; \n#&gt; $list1\n#&gt; $list1$a\n#&gt;  [1]  1  2  3  4  5  6  7  8  9 10\n#&gt; \n#&gt; $list1$b\n#&gt;  [1] 10  9  8  7  6  5  4  3  2  1\n#&gt; \n#&gt; \n#&gt; $bool1\n#&gt; [1] TRUE\n#&gt; \n#&gt; $bool2\n#&gt; [1] FALSE\n#&gt; \n#&gt; $g4\n#&gt; [1] \"Hello\"\n\n# Create a second list with whatever you want\nsecond_list &lt;- list(a=1:10, b=1:10, c=\"hello\")\n# Merge the two lists into one list.\none_list &lt;- c(first_list, second_list)\n# Print the number of objects in the merged list.\nlength(one_list)\n\n#&gt; [1] 13\n\n# Convert `list(1,2,3,4)` to a vector\nas.numeric(list(1,2,3,4))\n\n#&gt; [1] 1 2 3 4",
    "crumbs": [
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Lists</span>"
    ]
  },
  {
    "objectID": "10-functions.html",
    "href": "10-functions.html",
    "title": "\n9  Functions\n",
    "section": "",
    "text": "9.1 Definition\nTo get the manual on a base function, type ?function_name.\nA function returns the last thing that is called in it. Thus a function defined like that will return nothing:\ngeom_mean &lt;- function(x, y){\n    a &lt;- sqrt(x*y)\n}\ngeom_mean(1,2)\nWhile either of these three functions will return what you want:\ngeom_mean1 &lt;- function(x, y){\n    a &lt;- sqrt(x*y)\n    a\n}\ngeom_mean2 &lt;- function(x, y){\n    a &lt;- sqrt(x*y)\n    return(a)\n}\ngeom_mean3 &lt;- function(x, y){\n    sqrt(x*y)\n}\ngeom_mean1(1,2) #returns a\n\n#&gt; [1] 1.414214\nWhile an explicit call to return() is not necessary, I think it’s usually a good practise to write it explicitly to make clearer to the reader what the function actually returns.\nThe result of a function can be a list, a data.frame, a vector… or nothing. And you can attribute the result of a function to a variable:\nperson &lt;- function(name, age){\n    list(name=name, age=age)\n}\njoe &lt;- person(name=\"Joe\", age=33)\njoe\n\n#&gt; $name\n#&gt; [1] \"Joe\"\n#&gt; \n#&gt; $age\n#&gt; [1] 33",
    "crumbs": [
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Functions</span>"
    ]
  },
  {
    "objectID": "10-functions.html#default-values",
    "href": "10-functions.html#default-values",
    "title": "\n9  Functions\n",
    "section": "\n9.2 Default values",
    "text": "9.2 Default values\nOne can add default values to variables by specifying them in the function definition:\n\ntestfunc &lt;- function(x, y=1){\n    x*y\n}\ntestfunc(1)\n\n#&gt; [1] 1\n\ntestfunc(1, y=2)\n\n#&gt; [1] 2\n\ntestfunc(1:3, y=.1)\n\n#&gt; [1] 0.1 0.2 0.3",
    "crumbs": [
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Functions</span>"
    ]
  },
  {
    "objectID": "10-functions.html#passing-arguments-to-other-functions",
    "href": "10-functions.html#passing-arguments-to-other-functions",
    "title": "\n9  Functions\n",
    "section": "\n9.3 Passing arguments to other functions",
    "text": "9.3 Passing arguments to other functions\nOne can also pass arguments to other functions within the function, without have to specify all of them:\ntestfunc2 &lt;- function(x, ...){\n    y &lt;- sin(x)\n    plot(x, y, ...)\n}\n# Here, `...` represents all the arguments you could provide to `plot()`\ntestfunc2(1:100)\ntestfunc2(1:100, type=\"l\")\n\n\n\n\n\n\n\n\n\n\nYou can also pass a function as argument:\n\ntestfunc3 &lt;- function(FUN, ...){\n    FUN(...)\n}\ntestfunc3(sum, 1:10)\n\n#&gt; [1] 55\n\ntestfunc3(plot, 1:10, sin(1:10), type=\"l\")",
    "crumbs": [
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Functions</span>"
    ]
  },
  {
    "objectID": "10-functions.html#error-handling",
    "href": "10-functions.html#error-handling",
    "title": "\n9  Functions\n",
    "section": "\n9.4 Error handling",
    "text": "9.4 Error handling\nIt is good practise to handle possible errors in your functions, especially if you share them with others. As a general rule of thumb, you can be sure that someone will always be able to find the one case where your function does not work or works in an unexpected way.\nFor this, the easiest way is to use if() statements together with warning(\"Warning message\") or stop(\"Stopping message\"), to either raise a warning while continuing the function, or stop the function altogether with an explanatory message. Alternatively and for ease of reading, the statement if(condition) stop(\"Stopping message\") can be replaced by stopifnot(condition is true).\nEquivalent example with stop() and stopifnot():\n\n\n\ntest &lt;- function(x, y) {\n    if(!is.numeric(x) | !is.numeric(y)){\n        stop(\"Both x and y should numeric vectors, buddy!\")\n    }\n    if(length(x) != length(y)){\n        if(length(x) == 1 | length(y) == 1){\n            warning(glue::glue(\"x has length {length(x)}, while y has length {length(y)}, are you sure?\"))\n        }else{\n            stop(glue::glue(\"Both x and y should have same length or length of 1.\\n\n            Here x has length {length(x)}, while y has length {length(y)}.\"))\n        }\n    }\n    return(x*sqrt(y))\n}\n\n\ntest(x=1:2,y=1)\n\n#&gt; [1] 1 2\n\ntest(x=1:2,y=\"A\")\n\n#&gt; Error in test(x = 1:2, y = \"A\"): Both x and y should numeric vectors, buddy!\n\ntest(x=1:2,y=3:4)\n\n#&gt; [1] 1.732051 4.000000\n\ntest(x=1:2,y=3:10)\n\n#&gt; Error in test(x = 1:2, y = 3:10): Both x and y should have same length or length of 1.\n#&gt; \n#&gt; Here x has length 2, while y has length 8.\n\n\n\n\n\n\ntest &lt;- function(x, y) {\n    # the condition is the opposite from the one used in stop():\n    stopifnot(is.numeric(x), is.numeric(y))\n    stopifnot(length(x) == length(y) | length(x) == 1 | length(y) == 1)\n    if(length(x) != length(y) & (length(x) == 1 | length(y) == 1)){\n        warning(glue::glue(\"x has length {length(x)}, while y has length {length(y)}, are you sure?\"))\n    }\n    return(x*sqrt(y))\n}\n\n\n\ntest(x=1:2,y=1)\n\n#&gt; [1] 1 2\n\ntest(x=1:2,y=\"A\")\n\n#&gt; Error in test(x = 1:2, y = \"A\"): is.numeric(y) is not TRUE\n\ntest(x=1:2,y=3:4)\n\n#&gt; [1] 1.732051 4.000000\n\ntest(x=1:2,y=3:10)\n\n#&gt; Error in test(x = 1:2, y = 3:10): length(x) == length(y) | length(x) == 1 | length(y) == 1 is not TRUE",
    "crumbs": [
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Functions</span>"
    ]
  },
  {
    "objectID": "10-functions.html#documenting-your-function",
    "href": "10-functions.html#documenting-your-function",
    "title": "\n9  Functions\n",
    "section": "\n9.5 Documenting your function",
    "text": "9.5 Documenting your function\nIt is also good practise to document your function by describing its purpose, its input parameters, its output, and some use cases. For this, the syntax is as follows:\n\n#' Title of the function\n#'\n#' Description of the function\n#' \n#' @param param1 Description of param1\n#' @param param2 Description of param2\n#'\n#' @return Description of the output\n#'\n#' @examples\n#' # Some examples on how to use the function\nmy_func &lt;- function(param1, param2) {\n    # do some stuff\n}\n\nRStudio simplifies this process with a tool available in Code &gt; Insert Roxygen skeleton (just place your cursor within the {} of the function before clicking this).",
    "crumbs": [
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Functions</span>"
    ]
  },
  {
    "objectID": "10-functions.html#interpolation-of-data",
    "href": "10-functions.html#interpolation-of-data",
    "title": "\n9  Functions\n",
    "section": "\n9.6 Interpolation of data",
    "text": "9.6 Interpolation of data\nIt is possible to interpolate data through the approxfun() and splinefun() functions: while the former uses linear interpolation, the latter uses cubic splines (polynomials).\n\nxmin &lt;- -2*pi; xmax &lt;- 2*pi\nx  &lt;- runif(30, min=xmin, max=xmax)\nxx &lt;- seq(xmin, xmax, .1)\ny  &lt;- sin(x)\n# Linear interpolation\nlin_interp &lt;- approxfun(x,y)        #is a function\nlin_interp(0); lin_interp(pi)\n\n#&gt; [1] -0.007535477\n\n\n#&gt; [1] -0.002902468\n\nyy_lin     &lt;- approx(x, y, xout=xx) #is a list containing x and y\n\n# Cubic spline interpolation\nspl_interp &lt;- splinefun(x,y)        #is a function\nyy_spl     &lt;- spline(x, y, xout=xx) #is a list containing x and y\n\npar(family = \"Helvetica\", cex.lab=1.5, cex.axis=1.4, \n    mgp = c(2.4, .5, 0), tck=0.02, mar=c(4, 4, 2, .5), lwd=2, las=1)\nplot(x, y, pch=16, cex=2, ylim=c(-1,1.6))\nlines(xx, lin_interp(xx), col=\"royalblue\") # equivalent to: lines(yy_lin, col=\"royalblue\")\nlines(xx, spl_interp(xx), col=\"red\", lty=2)# equivalent to: lines(yy_spl, col=\"red\")\nlegend(\"topright\",\n    cex=1.2,\n    lty=c(NA, 1, 2),\n    lwd=c(NA, 2, 2),\n    pch=c(16, NA, NA),\n    col=c(\"black\", \"royalblue\", \"red\"),\n    bty = \"n\",\n    legend=c(\"'Experimental' points\", \"Linear interpolation\", \"Spline interpolation\")\n    )",
    "crumbs": [
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Functions</span>"
    ]
  },
  {
    "objectID": "10-functions.html#exo-functions",
    "href": "10-functions.html#exo-functions",
    "title": "\n9  Functions\n",
    "section": "\n9.7 Exercises",
    "text": "9.7 Exercises\nDownload the exercises and solutions from the following repository, then create a Rstudio project from the unzipped folder:\n\nBeginner exercises",
    "crumbs": [
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Functions</span>"
    ]
  },
  {
    "objectID": "11-conditions_loops.html",
    "href": "11-conditions_loops.html",
    "title": "\n10  Conditional actions and loops\n",
    "section": "",
    "text": "10.1 Conditional actions\nConditional actions in R can be determined through the usual if then else statements:\nx &lt;- 1; y &lt;- 2\nif(x&gt;y){\n    print(\"x is larger than y\")\n}else if(x&lt;y){\n    print(\"x is smaller than y\")\n}else{\n    print(\"x is equal to y\")\n}\n\n#&gt; [1] \"x is smaller than y\"\nSometimes, it’s usefull to be able to do this in one line using ifelse(test, yes, no):\nx &lt;- 3:7\nifelse(x&gt;5, \"larger than 5\", \"lower than 5\") \n\n#&gt; [1] \"lower than 5\"  \"lower than 5\"  \"lower than 5\"  \"larger than 5\"\n#&gt; [5] \"larger than 5\"",
    "crumbs": [
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Conditional actions and loops</span>"
    ]
  },
  {
    "objectID": "11-conditions_loops.html#loops",
    "href": "11-conditions_loops.html#loops",
    "title": "\n10  Conditional actions and loops\n",
    "section": "\n10.2 Loops…",
    "text": "10.2 Loops…\nLoops in R are provided through the usual for and while keywords:\n\n# For loop\nfor(i in 1:100){\n    # pass to next index directly\n    if(i %in% c(3,8,5)) next \n    # break loop\n    if(i==10) break\n    print(i)\n}\n\n#&gt; [1] 1\n#&gt; [1] 2\n#&gt; [1] 4\n#&gt; [1] 6\n#&gt; [1] 7\n#&gt; [1] 9\n\nphrase &lt;- c(\"hello\", \"world\")\nfor(word in phrase){\n    print(word)\n}\n\n#&gt; [1] \"hello\"\n#&gt; [1] \"world\"\n\n# While loop\ni &lt;- 1\nwhile(i&lt;8){\n    print(i)\n    i &lt;- i+2\n}\n\n#&gt; [1] 1\n#&gt; [1] 3\n#&gt; [1] 5\n#&gt; [1] 7",
    "crumbs": [
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Conditional actions and loops</span>"
    ]
  },
  {
    "objectID": "11-conditions_loops.html#and-how-to-avoid-them",
    "href": "11-conditions_loops.html#and-how-to-avoid-them",
    "title": "\n10  Conditional actions and loops\n",
    "section": "\n10.3 … and how to avoid them",
    "text": "10.3 … and how to avoid them\nHowever, since R is a vectorized language, it means that loops are to be avoided when possible because they are very inefficient:\n\nforloop &lt;- function(x){\n    for(i in seq_along(x)){\n        x[i] &lt;- 2*x[i]\n    }\n    x\n}\nnoforloop &lt;- function(x){\n    2*x\n}\nx &lt;- runif(1e7)\nmicrobenchmark::microbenchmark(\n    forloop   = forloop(x),\n    noforloop = noforloop(x),\n    times = 10L\n)\n\n#&gt; Unit: milliseconds\n#&gt;       expr       min         lq      mean     median         uq       max neval\n#&gt;    forloop 231.80478 234.295853 235.96625 235.833210 238.454688 239.42266    10\n#&gt;  noforloop   1.43131   1.983129   5.73688   3.889301   8.333537  17.77772    10\n#&gt;  cld\n#&gt;   a \n#&gt;    b\n\n\n\n10.3.1 The apply family\nAvoiding loops should therefore be sought for when possible. R helps us in this way through the base functions apply(), sapply() and lapply(). Operations in the tidyverse are also a very good way of avoiding loops.\nTake a look at the help on these functions, but the summary is that apply(df, direction, function) applies a function in the wanted direction (1 for rows, 2 for columns) of the given data.frame (or vector). Example:\n\nlibrary(tibble)\ndt &lt;- tibble(x=1:5, y=x^2, z=x^3);dt\n\n#&gt; # A tibble: 5 × 3\n#&gt;       x     y     z\n#&gt;   &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt;\n#&gt; 1     1     1     1\n#&gt; 2     2     4     8\n#&gt; 3     3     9    27\n#&gt; 4     4    16    64\n#&gt; 5     5    25   125\n\napply(dt, 1, mean) # mean of the rows\n\n#&gt; [1]  1.000000  4.666667 13.000000 28.000000 51.666667\n\napply(dt, 2, mean) # mean of the columns\n\n#&gt;  x  y  z \n#&gt;  3 11 45\n\n# row/column means\nrowMeans(dt)\n\n#&gt; [1]  1.000000  4.666667 13.000000 28.000000 51.666667\n\ncolMeans(dt)\n\n#&gt;  x  y  z \n#&gt;  3 11 45\n\n\nlapply() (and equivalently, sapply()) is basically the same thing but applied to lists and it returns a list (a vector):\n\nmy_list &lt;- list(dt/3, dt/5);my_list\n\n#&gt; [[1]]\n#&gt;           x         y          z\n#&gt; 1 0.3333333 0.3333333  0.3333333\n#&gt; 2 0.6666667 1.3333333  2.6666667\n#&gt; 3 1.0000000 3.0000000  9.0000000\n#&gt; 4 1.3333333 5.3333333 21.3333333\n#&gt; 5 1.6666667 8.3333333 41.6666667\n#&gt; \n#&gt; [[2]]\n#&gt;     x   y    z\n#&gt; 1 0.2 0.2  0.2\n#&gt; 2 0.4 0.8  1.6\n#&gt; 3 0.6 1.8  5.4\n#&gt; 4 0.8 3.2 12.8\n#&gt; 5 1.0 5.0 25.0\n\nlapply(my_list, \"[\", 1, )  # print first row\n\n#&gt; [[1]]\n#&gt;           x         y         z\n#&gt; 1 0.3333333 0.3333333 0.3333333\n#&gt; \n#&gt; [[2]]\n#&gt;     x   y   z\n#&gt; 1 0.2 0.2 0.2\n\nsapply(my_list, rowSums)   # sum on rows\n\n#&gt;           [,1] [,2]\n#&gt; [1,]  1.000000  0.6\n#&gt; [2,]  4.666667  2.8\n#&gt; [3,] 13.000000  7.8\n#&gt; [4,] 28.000000 16.8\n#&gt; [5,] 51.666667 31.0\n\nlapply(my_list, round, 1)  # round to first decimal\n\n#&gt; [[1]]\n#&gt;     x   y    z\n#&gt; 1 0.3 0.3  0.3\n#&gt; 2 0.7 1.3  2.7\n#&gt; 3 1.0 3.0  9.0\n#&gt; 4 1.3 5.3 21.3\n#&gt; 5 1.7 8.3 41.7\n#&gt; \n#&gt; [[2]]\n#&gt;     x   y    z\n#&gt; 1 0.2 0.2  0.2\n#&gt; 2 0.4 0.8  1.6\n#&gt; 3 0.6 1.8  5.4\n#&gt; 4 0.8 3.2 12.8\n#&gt; 5 1.0 5.0 25.0\n\n# For more complex operations, use it this way:\nsapply(1:nrow(dt), function(i){\n    dt$x[i] + dt$y[(i+2)%%nrow(dt)+1] - dt$z[(i+4)%%nrow(dt)+1]\n})\n\n#&gt; [1]   16   19  -23  -56 -111\n\n\n\n10.3.2 The tidyverse way\nThe package tidyverse offers numerous ways to avoid explicit for loops. To see how to do this, refer to the section on operations in the tidyverse.",
    "crumbs": [
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Conditional actions and loops</span>"
    ]
  },
  {
    "objectID": "11-conditions_loops.html#exo-loops",
    "href": "11-conditions_loops.html#exo-loops",
    "title": "\n10  Conditional actions and loops\n",
    "section": "\n10.4 Exercises",
    "text": "10.4 Exercises\nExercise 1\nGiven x &lt;- runif(1e3, min=-1, max=1), create a tibble like this one:\n\n\n#&gt; # A tibble: 1,000 × 2\n#&gt;         x y    \n#&gt;     &lt;dbl&gt; &lt;chr&gt;\n#&gt;  1  0.455 x&gt;0  \n#&gt;  2 -0.471 x&lt;=0 \n#&gt;  3  0.169 x&gt;0  \n#&gt;  4 -0.380 x&lt;=0 \n#&gt;  5  0.787 x&gt;0  \n#&gt;  6  0.548 x&gt;0  \n#&gt;  7  0.307 x&gt;0  \n#&gt;  8  0.262 x&gt;0  \n#&gt;  9  0.148 x&gt;0  \n#&gt; 10  0.674 x&gt;0  \n#&gt; # ℹ 990 more rows\n\n\nExercise 2\nGiven:\nLL &lt;- list(A = runif(1e2),\n           B = rnorm(1e3),\n           C = data.frame(x=runif(1e2), y=runif(1e2))\n           )\nPrint the sum of each element of LL in a list, in a vector.\n\nSolution\n\nLL &lt;- list(A = runif(1e2),\n           B = rnorm(1e3),\n           C = data.frame(x=runif(1e2), y=runif(1e2))\n           )\nlapply(LL, sum)\n\n#&gt; $A\n#&gt; [1] 51.45259\n#&gt; \n#&gt; $B\n#&gt; [1] 3.355978\n#&gt; \n#&gt; $C\n#&gt; [1] 99.24129\n\nunlist(lapply(LL, sum)); sapply(LL, sum)\n\n#&gt;         A         B         C \n#&gt; 51.452588  3.355978 99.241293\n\n\n#&gt;         A         B         C \n#&gt; 51.452588  3.355978 99.241293\n\n\nExercise 3\n\nDownload population.csv and load it into a data.frame\n\nWhat is the total population over the years?\nWhat is the mean population for each city?\n\n\nSolution\n\n# Download population.csv and load it into a `data.frame`\ndf &lt;- read.csv(\"Data/population.csv\")\n# What is the total population over the years?\ndata.frame(year=df[,\"year\"],\n           pop =rowSums(df[,-1]),     # a first way\n           pop2=apply(df[,-1], 1, sum)# another way\n          )\n\n#&gt;   year     pop    pop2\n#&gt; 1 1962 7349547 7349547\n#&gt; 2 1968 7550999 7550999\n#&gt; 3 1975 7298183 7298183\n#&gt; 4 1982 6933230 6933230\n#&gt; 5 1990 6857291 6857291\n#&gt; 6 1999 6965325 6965325\n#&gt; 7 2007 7235114 7235114\n#&gt; 8 2012 7334805 7334805\n\n# A tidy-compatible version \nlibrary(tidyverse)\npopul &lt;- pivot_longer(df, cols=-year, names_to=\"city\", values_to=\"pop\")\npopul |&gt; \n  group_by(year) |&gt; \n  summarise(totpop = sum(pop))\n\n#&gt; # A tibble: 8 × 2\n#&gt;    year  totpop\n#&gt;   &lt;int&gt;   &lt;int&gt;\n#&gt; 1  1962 7349547\n#&gt; 2  1968 7550999\n#&gt; 3  1975 7298183\n#&gt; 4  1982 6933230\n#&gt; 5  1990 6857291\n#&gt; 6  1999 6965325\n#&gt; 7  2007 7235114\n#&gt; 8  2012 7334805\n\n# or equivalently\nsummarise(group_by(popul, year), totpop = sum(pop))\n\n#&gt; # A tibble: 8 × 2\n#&gt;    year  totpop\n#&gt;   &lt;int&gt;   &lt;int&gt;\n#&gt; 1  1962 7349547\n#&gt; 2  1968 7550999\n#&gt; 3  1975 7298183\n#&gt; 4  1982 6933230\n#&gt; 5  1990 6857291\n#&gt; 6  1999 6965325\n#&gt; 7  2007 7235114\n#&gt; 8  2012 7334805\n\n# What is the mean population for each city?\napply(df[,-1], 2, mean)\n\n#&gt;        Angers      Bordeaux         Brest         Dijon      Grenoble \n#&gt;      138783.4      234814.9      149125.1      146735.2      157526.4 \n#&gt;       LeHavre        LeMans         Lille          Lyon     Marseille \n#&gt;      193989.6      144347.4      220018.4      470371.1      844253.4 \n#&gt;   Montpellier        Nantes          Nice         Paris         Reims \n#&gt;      203114.4      260924.9      334311.6     2321031.9      172278.0 \n#&gt;        Rennes Saint.Etienne    Strasbourg        Toulon      Toulouse \n#&gt;      193424.9      198134.6      255429.1      169682.6      382264.9\n\npopul |&gt; \n  group_by(city) |&gt; \n  summarise(avepop = mean(pop))\n\n#&gt; # A tibble: 20 × 2\n#&gt;    city            avepop\n#&gt;    &lt;chr&gt;            &lt;dbl&gt;\n#&gt;  1 Angers         138783.\n#&gt;  2 Bordeaux       234815.\n#&gt;  3 Brest          149125.\n#&gt;  4 Dijon          146735.\n#&gt;  5 Grenoble       157526.\n#&gt;  6 LeHavre        193990.\n#&gt;  7 LeMans         144347.\n#&gt;  8 Lille          220018.\n#&gt;  9 Lyon           470371.\n#&gt; 10 Marseille      844253.\n#&gt; 11 Montpellier    203114.\n#&gt; 12 Nantes         260925.\n#&gt; 13 Nice           334312.\n#&gt; 14 Paris         2321032.\n#&gt; 15 Reims          172278 \n#&gt; 16 Rennes         193425.\n#&gt; 17 Saint.Etienne  198135.\n#&gt; 18 Strasbourg     255429.\n#&gt; 19 Toulon         169683.\n#&gt; 20 Toulouse       382265.",
    "crumbs": [
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Conditional actions and loops</span>"
    ]
  },
  {
    "objectID": "12-plotting.html",
    "href": "12-plotting.html",
    "title": "\n11  Plotting\n",
    "section": "",
    "text": "11.1 Base graphics",
    "crumbs": [
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Plotting</span>"
    ]
  },
  {
    "objectID": "12-plotting.html#base-graphics",
    "href": "12-plotting.html#base-graphics",
    "title": "\n11  Plotting\n",
    "section": "",
    "text": "11.1.1 Basic plotting\n\nx  &lt;- seq(-3*pi,3*pi,length=50)\ny  &lt;- sin(x)\nz  &lt;- sin(x)^2\ndf &lt;- data.frame(x=x, y=y)\nplot(x,y) # plot providing x and y data\n\n\n\n\n\n\nplot(df)  # plot providing a two-columns data.frame\n\n\n\n\n\n\nplot(df, type=\"l\")\n\n\n\n\n\n\nplot(df, type=\"b\")\n\n\n\n\n\n\ndf &lt;- data.frame(x=x, y=y, z=z, w=z*y)\nplot(df)  # plot providing a multi-columns data.frame\n\n\n\n\n\n\n\n\n11.1.2 Adding some style\nOK, easy. Now let’s do some tuning of this, because it’s a tad ugly… Type in each command and see what they do.\n\n# create some fake data\nx  &lt;- seq(-3*pi,3*pi,length=100)\ndf &lt;- data.frame(x=x, y=sin(x), z=sin(x)^2)\n# add some styling parameters\npar(family = \"Helvetica\", cex.lab=1.5, cex.axis=1.4, \n    mgp = c(2.4, .5, 0), tck=0.02, mar=c(4, 4, 2, .5), lwd=2, las=1)\nplot(df$x,df$y,\n     type = \"l\",     # \"l\" for lines, \"p\" for points\n     xlab = \"X values\",\n     ylab = \"Intensity\",\n     axes = FALSE,\n     main = \"Some Plot\",\n     ylim = c(-1,2)\n    )\n# vertical line in 0\nabline(v=0,lty=2,lwd=2)\n# horizontal line in 0\nabline(h=0,lty=3,lwd=2)\n# line with coefficients a (intercept) and b (slope)\nabline(a=0,b=.1,lty=4,lwd=1)\n# add a line\nlines(df$x,df$z,type = \"l\",col=\"red\",lwd=3)\n# add points\npoints(df$x,df$z*df$y,col=\"royalblue\",pch=16,cex=1)\n# add custom axis. \n# Default with axis(1);axis(2);axis(3, labels=FALSE);axis(4, labels=FALSE);\n# Bottom\naxis(1,at=seq(-10,10,2),labels=TRUE,tck=0.02)\naxis(1,at=seq(-10,10,1),labels=FALSE,tck=0.01); # small inter-ticks\n# Top\naxis(3,at=seq(-10,10,2),labels=FALSE)\naxis(3,at=seq(-10,10,1),labels=FALSE,tck=0.01); # small inter-ticks\n# Left\naxis(2,at=seq(-1,2,.5),labels=TRUE)\naxis(2,at=seq(-1,2,.25),labels=FALSE,tck=0.01); # small inter-ticks\n# Right\naxis(4,at=seq(-1,2,.5),labels=FALSE)\naxis(4,at=seq(-1,2,.25),labels=FALSE,tck=0.01); # small inter-ticks\n# Draw a box\nbox()\n# Print legend\nlegend(\"topleft\",\n    cex=1.4, #size of text\n    lty=c(1,1,NA),   # type of line (1 is full, 2 is dashed...)\n    lwd=c(1,3,NA),   # line width\n    pch=c(NA,NA,16), # type of points\n    col=c(\"black\",\"red\",\"royalblue\"), # color\n    bty = \"n\", # no box around legend\n    legend=c(\"sin(x)\",expression(\"sin(x)\"^2),expression(\"sin(x)\"^3))\n    )\n\n\n\n\n\n\n\nMost needs should be covered with this simple plot that can be adapted.\n\n\n\n\n\n\nPro Tip: make a code snippet\n\n\n\n\n\nGo to Rstudio Preferences, Code, Edit code snippets, and add the following lines:\nsnippet plot\n    #pdf(\"xxx.pdf\", height=6, width=8)\n    par(cex.lab=1.7, cex.axis=1.7, mgp = c(3, 0.9, 0), \n        tck=0.02, mar=c(4.5, 4.5, 1, 1), lwd = 3, las=1)\n    plot(${1:x},${2:y},\n        type=\"l\",      # plot with a line\n        ylim=c( , ),\n        xlim=c( , ),\n        lwd=2,         # width of the line\n        lty=1,         # type of line\n        axes=FALSE,    # do not show axes\n        xlab=\"${1:x}\", # x label\n        ylab=\"${2:y}\", # y label\n        main=\"\")       # Title\n    legend(\"topright\",\n        cex=1.5,       # size of the text\n        pch=c(),       # list of point types\n        lty=c(),       # list of line types\n        lwd=c(),       # list of line widths\n        col=c(),       # list of line colors\n        bty=\"n\",       # no box around the legend\n        legend=c()     # list of legend labels\n        )\n    # Draw axes with minor ticks\n    axis(1, at=seq(0,1,.2), labels=TRUE)\n    axis(1, at=seq(0,1,.1), labels=FALSE, tck=0.01)\n    axis(3, at=seq(0,1,.2), labels=FALSE)\n    axis(3, at=seq(0,1,.1), labels=FALSE, tck=0.01)\n    par(mgp = c(2.5, 0.2, 0))\n    axis(2, at=seq(0,10,1), labels=TRUE)\n    axis(2, at=seq(0,10,.5), labels=FALSE, tck=0.01)\n    axis(4, at=seq(0,10,1), labels=FALSE)\n    axis(4, at=seq(0,10,.5), labels=FALSE, tck=0.01)\n    box() # drow box around plot\n    #dev.off()\n\n\n\n\n\n\n\n\n\n\nGoing further\n\n\n\n\n\n\n11.1.2.1 Panel plots\nLets create a plot with different panels (a bit ugly without styling, you need to tweak the margins and text distance to plot with par(mar(), mgp()) before each plot):\n\n# some fake data\nx  &lt;- seq(-10,10,1)\nd1 &lt;- data.frame(x=x, y=sin(x))\nd2 &lt;- data.frame(x=x, y=cos(x))\nd3 &lt;- data.frame(x=x, y=exp(-x^2)*sin(x)^2)\n# on a simple grid, use:\n# par(mfrow=c(nrows, ncols))\npar(mfrow=c(1, 3), mar=c(4,4,1,1))\nplot(d1,type=\"l\")\nplot(d2,type=\"p\")\nplot(d3,type=\"b\")\n\n\n\n\n\n\n\n\n# creating the layout and styling\nM  &lt;- matrix(c(c(1,1),c(2,3)), byrow=TRUE, ncol=2); M\n\n#&gt;      [,1] [,2]\n#&gt; [1,]    1    1\n#&gt; [2,]    2    3\n\nnf &lt;- layout(M, heights=c(1), widths=c(1))\n# first plot\nplot(d1,type=\"l\")\n# second plot\nplot(d2,type=\"p\")\n# third plot\nplot(d3,type=\"b\")\n\n\n\n\n\n\n\n\n# creating the layout and styling\nM  &lt;- matrix(c(c(1,1),c(2,3)), byrow=FALSE, ncol=2); M\n\n#&gt;      [,1] [,2]\n#&gt; [1,]    1    2\n#&gt; [2,]    1    3\n\nnf &lt;- layout(M, heights=c(1), widths=c(1))\n# first plot\nplot(d1,type=\"l\")\n# second plot\nplot(d2,type=\"p\")\n# third plot\nplot(d3,type=\"b\")\n\n\n\n\n\n\n\n\n11.1.2.2 Barplots and densities\n\nx &lt;- rnorm(1e4, mean = 0, sd = 1)\n# Barplot\nhist(x)\n\n\n\n\n\n\n# Density\ny  &lt;- density(x, bw=0.1) # small kernel bandwidth\ny2 &lt;- density(x, bw=0.5) # larger kernel bandwidth\nplot(y, lwd=2, main=\"\", xlab=\"X values\", xlim=c(-4,4))\nlines(y2,col=\"red\",lwd=2)\npoints(x, jitter(rep(.01,length(x)), amount=.01), \n        cex=1,pch=16, col=adjustcolor(\"royalblue\", alpha=.01))\n\n\n\n\n\n\n\n\n\n\n\nExercise\nTry reproducing these plots:",
    "crumbs": [
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Plotting</span>"
    ]
  },
  {
    "objectID": "12-plotting.html#advanced-plotting-using-ggplot2",
    "href": "12-plotting.html#advanced-plotting-using-ggplot2",
    "title": "\n11  Plotting\n",
    "section": "\n11.2 Advanced plotting using ggplot2",
    "text": "11.2 Advanced plotting using ggplot2\nFurther reading here and on the cheatsheet for example.\nggplot2 is a package (now even available for python) that completely changes the methodology of plotting data. With ggplot2, data are gathered in a tidy data.frame, and each column can be used as a parameter to tweak colors, point size, etc.\nFirst things first, load the library :\n\nlibrary(ggplot2)\n\nActually, ggplot2 is attached to tidyverse so a simple:\n\nlibrary(tidyverse)\n\nis enough, as it will load ggplot2 and most of the useful data manipulation libraries.\n\n11.2.1 The grammar of graphics\nWith ggplot2 is introduced the notion of “grammar of graphics” through the function ggplot(). What it means is that the plots are built through independent blocks that can be combined to create any wanted graphical display. To construct a plot, you need to provide building blocks such as:\n\ndata gathered in a tidy data.frame\nan aesthetics mapping: what column is x, y, the color, the size, etc…\ngeometric object: point, line, bar, histogram, tile…\nstatistical transformations if needed\nscales: color_manual, x_continuous, …\ncoordinate system\nfaceting: wrap, grid\ntheme: theme_bw(), theme_light()…\n\nThe typical call to ggplot() is thus (the arguments between &lt;&gt; are yours to specify):\nggplot(data=&lt;data&gt;, aes(x=&lt;x&gt;, y=&lt;y&gt;, color=&lt;z&gt;, size=&lt;w&gt;))+\n    geom_&lt;geometry&gt;()+\n    scale_&lt;scales&gt;()+\n    facet_&lt;facets&gt;()+\n    &lt;theme&gt;\nSince a figure is worth a thousand words, let’s get to it. We will use the dataset diamonds built-in with the ggplot2 package. Let’s have a look:\n\ndiamonds\n\n#&gt; # A tibble: 53,940 × 10\n#&gt;    carat cut       color clarity depth table price     x     y     z\n#&gt;    &lt;dbl&gt; &lt;ord&gt;     &lt;ord&gt; &lt;ord&gt;   &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n#&gt;  1  0.23 Ideal     E     SI2      61.5    55   326  3.95  3.98  2.43\n#&gt;  2  0.21 Premium   E     SI1      59.8    61   326  3.89  3.84  2.31\n#&gt;  3  0.23 Good      E     VS1      56.9    65   327  4.05  4.07  2.31\n#&gt;  4  0.29 Premium   I     VS2      62.4    58   334  4.2   4.23  2.63\n#&gt;  5  0.31 Good      J     SI2      63.3    58   335  4.34  4.35  2.75\n#&gt;  6  0.24 Very Good J     VVS2     62.8    57   336  3.94  3.96  2.48\n#&gt;  7  0.24 Very Good I     VVS1     62.3    57   336  3.95  3.98  2.47\n#&gt;  8  0.26 Very Good H     SI1      61.9    55   337  4.07  4.11  2.53\n#&gt;  9  0.22 Fair      E     VS2      65.1    61   337  3.87  3.78  2.49\n#&gt; 10  0.23 Very Good H     VS1      59.4    61   338  4     4.05  2.39\n#&gt; # ℹ 53,930 more rows\n\n\ndiamonds contains 53940 lines and 10 columns in a tibble. ggplot2 can easily handle such large dataset.\nLet’s say we want to see whether there is a correlation between price and weight (carat) of the diamonds. We will make a call to ggplot() by providing it the data and the x and y mapping:\n\np &lt;- ggplot(data = diamonds, aes(x = carat,y = price))\np\n\n\n\n\n\n\n\nYou see that our plot p here has the proper axis labels and range:\n\nglue::glue(\"carat {c('min','max')}: {range(diamonds$carat)}\")\n\n#&gt; carat min: 0.2\n#&gt; carat max: 5.01\n\nglue::glue(\"price {c('min','max')}: {range(diamonds$price)}\")\n\n#&gt; price min: 326\n#&gt; price max: 18823\n\n\nbut it does not display any data points. For this we have to add a geometry to the plot, using one of the geom_xx() functions. Let’s plot it using points for now:\n\np + geom_point()\n\n\n\n\n\n\n\nOK, we’re onto something, but we can probably add some information to this plot. We will first cut the data above 3 carats because they are not relevant, and add some transparency to the points to see some statistical information. Let’s make use of the pipe operator |&gt; to make this easily readable:\n\np &lt;- diamonds |&gt; \n        filter(carat&lt;=3) |&gt; \n        ggplot(aes(x = carat, y = price))\np + geom_point(alpha=0.5)\n\n\n\n\n\n\n\nLet’s now see whether the type of cut plays a role here by coloring the points according to the cut variable:\n\np &lt;- diamonds |&gt; \n        filter(carat&lt;=3) |&gt; \n        ggplot(aes(x = carat, y = price, color = cut))\np + geom_point(alpha=0.5)\n\n\n\n\n\n\n\nIt looks like the price dispersion is homogeneous, we can make sure by adding a spline smoothing:\n\np + geom_point(alpha=0.5) + \n    geom_smooth()\n\n\n\n\n\n\n\nThe slope evolution shows that in general, the better the cut, the higher the price. But there are some discrepancies that may be explained in another manner:\n\np &lt;- diamonds |&gt; \n        filter(carat&lt;=3) |&gt; \n        ggplot(aes(x = carat, y = price, color = clarity))\np + geom_point(alpha=0.5) + geom_smooth()\n\n\n\n\n\n\n\nIt is often easier to grasp a multi-variable problem by plotting all our data in a facet plot using facet_wrap(~variable1) if you want one variable changing in each plot:\n\ncolors &lt;- rainbow(length(unique(diamonds$clarity)))\np &lt;- diamonds |&gt; \n        ggplot(aes(x = price, y = carat, color = clarity)) + \n        geom_point(alpha = 0.5, size = 1) + \n        geom_smooth(color = \"black\") + \n        scale_colour_manual(values = colors, name = \"Clarity\") +\n        facet_wrap(~cut) \np\n\n\n\n\n\n\n\n… or facet_grid(y_variable ~ x_variable) if you want to see one variable as a function of another:\n\np &lt;- diamonds |&gt; \n        ggplot(aes(x = price, y = carat, color = color)) + \n        geom_point(alpha = 0.8, size = 1) + \n        geom_smooth(method = \"lm\", color = \"black\") + \n        scale_colour_brewer(palette = \"Spectral\", name = \"Color\") +\n        facet_grid(clarity ~ cut) \np\n\n\n\n\n\n\n\nOr by adding another graphical parameter such as the size of the points:\n\np &lt;- diamonds |&gt; \n        ggplot(aes(x = price, y = carat, color = clarity, size = cut)) + \n        geom_point(alpha = 0.5) + \n        scale_colour_manual(values = colors, name = \"Clarity\")\np\n\n\n\n\n\n\n\nOK, maybe not here because the graph gets clogged, so we can lighten it by sampling data:\n\np &lt;- diamonds |&gt; \n        sample_n(500) |&gt; \n        ggplot(aes(x = carat, y = price, color = clarity, size = cut)) + \n        geom_point(alpha = 0.5) + \n        scale_colour_manual(values = colors, name = \"Clarity\")\np\n\n\n\n\n\n\n\n\n11.2.2 Writing maths in the plot\nTo write mathematical expressions, including subscripts/superscripts, or more complex mathematical formulas, the easiest way is to use \\(\\LaTeX\\) expressions thanks to the latex2exp package. Just write your text within a latex2exp::TeX() function, and that is all. Since R 4.0, it is recommended to use the raw string literal syntax. The syntax looks like r\"(...)\", where ... can contain any character sequence, including \\ (no need to escape the \\ character).\nAlso, in case you have a variables to add in your string, it is often clearer/easier to use glue::glue() instead of paste() or paste0(). Then, you can combine the two, like so:\n\nlibrary(latex2exp)\nlibrary(glue)\nA &lt;- 1.2\nB &lt;- 4\ndiamonds |&gt; \n    sample_n(100) |&gt; \n    ggplot(aes(x = carat, y = price))+\n        geom_point(alpha = 0.5) +\n        labs(x = \"Carat\",\n             y = \"Price\",\n             title = TeX(glue(r'(This is some $\\,\\LaTeX\\,$ maths: $\\,\\sum_i^{N}\\frac{x_i^{[A]}}{[B]}$)', \n                        .open = \"[\", .close = \"]\"))\n            )\n\n\n\n\n\n\n\nFor more complicated stuff, I however advise to not use the TeX() function and write directly your text in \\(\\LaTeX\\), then export your plot with tikzDevice as a .tex file and compile it to pdf.\n\n11.2.3 Logarithmic scale\nTo transform the axis with a logarithmic scale, use the transform = \"log10\" option of the or scale_x(y)_continuous() functions. Here is an example:\n\nbreakslog10 &lt;- function(x){\n    low &lt;- floor(log10(min(x)))\n    high &lt;- ceiling(log10(max(x)))\n    return(10^(seq(low, high)))\n}\nminorbreakslog10 &lt;- function(x){\n    low &lt;- floor(log10(min(x)))\n    high &lt;- ceiling(log10(max(x)))\n    return(rep(1:9, length(low:high))*(10^rep(low:high, each = 9)))\n}\ndiamonds |&gt; \n    sample_n(100) |&gt; \n    ggplot(aes(x = carat, y = price))+\n        geom_point(alpha = 0.5) +\n        labs(x = \"Carat\",\n             y = \"Price\")+\n        scale_y_continuous(\n            # tweak the limits if you want\n            limits = c(10,1e5),\n            # transform the scale\n            transform = \"log10\",\n            # major breaks in powers of 10\n            breaks = breakslog10,\n            # minor breaks (only useful for the grid)\n            minor_breaks = minorbreakslog10,\n            # write labels in scientific notation\n            labels = scales::trans_format(\"log10\", scales::math_format(10^.x)),\n            # add logticks\n            guide = guide_axis_logticks(long = 2, mid = 1, short = 0.5)\n        )\n\n\n\n\n\n\n\n\n11.2.4 Theming\nIt is very easy to keep the same theme on all your graphs thanks to the theme() function. There are a collection of pre-defined themes, like:\n\n\n\n\n\n\n\n\nYou can define all the parameters you want, like this (hit ?theme like usual to see all the parameters):\n\nmy_theme &lt;- theme_bw()+\n            theme(text = element_text(size = 18, \n                                      family = \"Times\", \n                                      face = \"bold\"),\n                  axis.ticks = element_line(linewidth = 1),\n                  legend.text = element_text(size = 14, family = \"Times\"),\n                  panel.border = element_rect(linewidth = 2),\n                  panel.grid.major = element_blank(), \n                  panel.grid.minor = element_blank()\n                  )\np + my_theme\n\n\n\n\n\n\n\n\n\n\n\n\n\nPro Tip: make a code snippet\n\n\n\n\n\nGo to Rstudio Preferences, Code, Edit code snippets, and add the following lines:\nsnippet ggplot\n     |&gt;\n    ggplot(aes(x=${1:x}, y=${2:y}, color=${3:z})) +\n        geom_point() +\n        labs(x = \"X label\", \n             y = \"Y label\",\n             color = \"Color label\") +\n        theme_bw()\n\n\n\n\n11.2.5 Making interactive plots with ggplot2 and plotly\nThanks to the plotly package, it is really easy to transform a ggplot plot into an interactive plot:\n# load plotly\nlibrary(plotly)\n\np &lt;- diamonds |&gt; \n        sample_n(100) |&gt; \n        ggplot(aes(x = carat, y = price)) + \n        geom_point(aes(color = clarity), alpha = 0.5, size = 2) + \n        my_theme\nggplotly(p, dynamicTicks = TRUE)\n\n\n\n\n\n\n11.2.6 Gathering plots on a grid\nIf you have several plot you want to gather on a grid and you can’t use facet_wrap() (because they come from different data sets), you can use the library patchwork:\n\nlibrary(patchwork)\nlibrary(ggplot2)\ntheme_set(theme_bw())\nx  &lt;- seq(-2*pi,2*pi,.1)\np1 &lt;- qplot(x,sin(x), geom = \"line\")\np2 &lt;- qplot(x,cos(x), geom = \"line\")\np3 &lt;- qplot(x,atan(x), geom = \"line\")\np4 &lt;- qplot(x,dnorm(x), geom = \"line\")\np1 + p2\n\n\n\n\n\n\np1 + p2 / p3 + p4 + \n    plot_annotation(tag_levels = 'a', tag_suffix=\")\")\n\n\n\n\n\n\n(p1 + p2 + plot_layout(widths = c(1,3))) /\np3/p4 + \n    plot_layout(heights = c(6, 2, 1))\n\n\n\n\n\n\n\n\n11.2.7 Plots with insets\nIf you want to make an inset plot, first make your plots, then add a plot within the other using patchwork::inset_element(), specifying the x and y positions of the 4 corners of the inset plot using relative values:\n\np4 + inset_element(p3, left   = 0.01, right = .4, \n                       bottom = .45,    top = .99)",
    "crumbs": [
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Plotting</span>"
    ]
  },
  {
    "objectID": "12-plotting.html#exporting-a-plot-to-pdf-or-png",
    "href": "12-plotting.html#exporting-a-plot-to-pdf-or-png",
    "title": "\n11  Plotting\n",
    "section": "\n11.3 Exporting a plot to pdf or png",
    "text": "11.3 Exporting a plot to pdf or png\n\n11.3.1 A single plot\nA plot can be exported if surrounded by XXX and dev.off(), with XXX that can be pdf(\"xxx.pdf\",height=6, width=8), png(\"xxx.png\",height=600, width=800)… Examples:\nP &lt;- ggplot(df, aes(x,y)) + geom_point()\npdf(\"plot.pdf\",height=6, width=8)\nP\ndev.off()\npdf(\"plot.png\",height=600, width=800)\nplot(x,y,\n     type=\"l\",\n     xlab=\"x\"\n     )\ndev.off()\nYou can also export the graph as a .tex file using tikz(), which allows you to use \\(\\LaTeX\\) mathematical expressions (don’t forget to escape the \\ character or to use raw string literal syntax r\"(...)\"):\nlibrary(tikzDevice)\ntikz(\"plot.tex\",height=6, width=8, pointsize = 10, standAlone=TRUE)\nplot(x,y,\n     type=\"l\",\n     xlab=r\"($\\omega_i$)\"\n     )\ndev.off()\ntools::texi2pdf(\"plot.tex\") # compile the tex file to pdf\nsystem(\"open -a Skim plot.pdf\") # on Mac: open the resulting pdf with Skim\n\n\n\n\n\n\nPro Tip: make a plot_to_pdf() function\n\n\n\n\n\nHere is a function I use to save my plots as pdf using tikzDevice:\n#' plot_to_pdf()\n#'\n#' Saves a ggplot to pdf through a tikzDevice\n#'\n#' @param P A ggplot plot.\n#' @param filename A file name if pdf export wanted in the folder \"Plots\".\n#' @param out.folder The folder where the pdf will be saved.\n#' @param H Height of the exported plot\n#' @param W Width of the exported plot\n#' @param open logical. Open the file once created?\nplot_to_pdf &lt;- function(P, \n                        filename=\"plot\",\n                        out.folder=\".\",\n                        H=6, \n                        W=8, \n                        open=TRUE) {\n    # if tikzDevice is not loaded, load it and set the options\n    if (! \"tikzDevice\" %in%(.packages())) {\n        library(tikzDevice)\n        options(tikzLatexPackages \n            =c(getOption( \"tikzLatexPackages\" ),\n            r\"(\\usepackage{cmbright})\", # for sans serif font\n            r\"(\\usepackage{bm})\", # for bold maths\n            r\"(\\usepackage[utf8]{inputenc})\",\n            r\"(\\usepackage{wasysym})\")\n        )\n    }\n\n    tikz(paste0(filename, \".tex\"), height = H, \n        width = W, pointsize = 10, standAlone = TRUE)\n    print(P)\n    dev.off()\n    # compile the .tex file to pdf\n    tools::texi2pdf(paste0(filename, \".tex\"))\n    # move the pdf to the output folder\n    file.copy(from = paste0(filename, \".pdf\"), \n              to = paste0(out.folder, \"/\"))\n    # clean compilation files\n    toremove &lt;- list.files(pattern = filename)\n    if(out.folder == \".\"){\n        toremove &lt;- toremove[!grepl(\".pdf\", toremove)]\n    }\n    file.remove(toremove)\n    # open the pdf file with Skim (on Mac)\n    if (open) system(paste0(\"open -a Skim \",out.folder,\"/\",filename,\".pdf\"))\n}\n\n\n\n\n11.3.2 Multiple plots\nIn case you want to output multiple plots with a for loop, you have two options:\n\nOuptut a separate file for each plot\nFor pdf output only: ouptut a single file with a each plot in a different page\n\nIn both cases, if you plot with ggplot (which I always recommend), then you need to explicitly print() the plot in the for loop, like so:\n\nOutput a separate file for each plot:\n\nfor(i in 1:4){\n    plot_name = paste0(\"plot_\",i,\".pdf\")\n    P &lt;- ggplot(my_data[[i]], aes(x, y)) + geom_point()\n    pdf(plot_name, height = 6, width = 8)\n    print(P)\n    dev.off()\n}\n\nOutput a single file with a page for each plot:\n\npdf(\"plots.pdf\", height = 6, width = 8)\nfor(i in 1:4){\n    P &lt;- ggplot(my_data[[i]], aes(x, y)) + geom_point()\n    print(P)\n}\ndev.off()",
    "crumbs": [
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Plotting</span>"
    ]
  },
  {
    "objectID": "12-plotting.html#further-reading",
    "href": "12-plotting.html#further-reading",
    "title": "\n11  Plotting\n",
    "section": "\n11.4 Further reading",
    "text": "11.4 Further reading\n\nThe R graph gallery\nA must read: caveats\n\nColor palettes and themes:\n\n\nRColorBrewer palettes: RColorBrewer::display.brewer.all()\n\nggtheme\nggtheme color palettes\nhrbrthemes\nColour picker\n\n\nTuning manually the legend",
    "crumbs": [
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Plotting</span>"
    ]
  },
  {
    "objectID": "12-plotting.html#exo-plots",
    "href": "12-plotting.html#exo-plots",
    "title": "\n11  Plotting\n",
    "section": "\n11.5 Exercises",
    "text": "11.5 Exercises\nDownload the exercises and solutions from the following repositories, then create a Rstudio project from the unzipped folder:\n\nBeginner exercises\nAdvanced exercises\nGGplot2 exercises\n\nExercise 1\n\nDownload the two sample Raman spectra: PPC60_G_01.txt and PPC60_G_30.txt\n\nLoad them in two separate tibble\n\nGather the two data.frame in another single tidy one: it should have three columns, w, Intensity and file_name\n\nCreate a function norm01() that, given a vector, returns the same vector normalized to [0,1]\nUsing group_by() and mutate(), add a column norm_int of normalized intensity for each file\nPlot the two normalized spectra on the same graph using lines of different colors\nPlay with the theme and parameters to reproduce the following plot:\n\n\n\n\n\n\n\n\n\n\nSolution\n\n# Load them in two separate `tibbles`\nlibrary(tidyverse)\n# Using read.table (who returns a data.frame)\ndf1 &lt;- read.table(\"Data/PPC60_G_01.txt\", col.names=c(\"w\",\"Intensity\"))\ndf2 &lt;- read.table(\"Data/PPC60_G_30.txt\", col.names=c(\"w\",\"Intensity\"))\ndf1 &lt;- tibble(df1) # make a tibble from a data.frame\ndf2 &lt;- tibble(df2)\n# Direct version using tidyverse (read_table returns a tibble)\ndf1 &lt;- read_table(\"Data/PPC60_G_01.txt\", col_names=c(\"w\",\"Intensity\"))\ndf2 &lt;- read_table(\"Data/PPC60_G_30.txt\", col_names=c(\"w\",\"Intensity\"))\n# Gather the two `tibbles` in another single tidy one: \n# it should have three columns, `w`, `Intensity` and `file_name`\ndf1$file_name &lt;- \"PPC60_G_01\" # add the \"file_name\" column\ndf2$file_name &lt;- \"PPC60_G_30\"\ndf_tidy &lt;- bind_rows(df1,df2) # stack the two tibbles\n# Create a function `norm01` that, given a vector, returns the same vector normalized to [0,1]\nnorm01 &lt;- function(x) {\n    (x-min(x))/(max(x)-min(x))\n}\n# Using `group_by` and `mutate`, add a column `norm_int` in df_tidy of normalized intensity for each file\ndf_tidy &lt;- df_tidy |&gt; \n    group_by(file_name) |&gt; \n    mutate(norm_int=norm01(Intensity))\n# Plot the two normalized spectra on the same graph using lines of different colors\nlibrary(ggplot2)\ndf_tidy |&gt; \n    ggplot(aes(x=w, y=norm_int, color=file_name))+\n        geom_line()+\n        theme_bw()\n\n\n\n\n\n\n# Play with the theme and parameters to reproduce the following plot:\ndf_tidy |&gt; \n    ggplot(aes(x=w, y=norm_int, color=file_name)) +\n        geom_line()+\n        scale_color_manual(values=c(\"red\",\"royalblue\"), name=\"\") +\n        labs(x=\"Raman Shift [1/cm]\", y=\"Intensity [arb. unit]\") +\n        theme_bw() +\n        theme(legend.position = \"top\",\n              text = element_text(size = 14,family = \"Times\"),\n              panel.grid.major = element_blank(), \n              panel.grid.minor = element_blank())\n\n\n\n\n\n\n\nExercise 2\n\nDownload rubis_01.txt, rubis_02.txt, rubis_03.txt and rubis_04.txt and load them into a tidy tibble.\nNormalize all data to [0,1] in a 4th column\nPlot the 4 spectra on top of each other with a vertical shift of 1, with a different color for each spectrum\n\nFor this, check out the factor() function:\n\n\n\n\nx &lt;- c(\"a\",\"a\",\"b\",\"c\",\"a\")\nfactor(x)\n\n#&gt; [1] a a b c a\n#&gt; Levels: a b c\n\nas.numeric(factor(x))\n\n#&gt; [1] 1 1 2 3 1\n\n\n\nAnnotate on the base line with the name of the file. For this, use annotate(\"text\", x, y, label)\n\nIt should look like this:\n\n\n\n\n\n\n\n\n\n\nSolution\n\nlibrary(tidyverse)\nlibrary(ggplot2)\ndf &lt;- tibble()\nnorm01 &lt;- function(x) {\n    (x-min(x))/(max(x)-min(x))\n}\nfor (i in 1:4) {\n    d  &lt;- read_table(paste0(\"Data/rubis_0\",i,\".txt\"), col_names=c(\"w\", \"Int\"))\n    d$Int_n &lt;- norm01(d$Int)\n    d$name  &lt;- paste0(\"rubis_0\",i)\n    df      &lt;- bind_rows(df, d)\n}\nfnames &lt;- unique(df$name)\nggplot(data=df, aes(x=w, \n                    y=Int_n+as.numeric(factor(name))-1, \n                    color=name))+\n    geom_line(size=1)+\n    annotate(\"text\", x=3080, y=1:length(fnames)-.85, label=fnames, size=5)+\n    labs(x=\"Raman Shift [1/cm]\", y=\"Intensity [arb. units]\")+\n    theme_bw()+\n    theme(legend.position = \"none\",\n          text            = element_text(size = 14),\n          axis.text.y     = element_blank(),\n          axis.text       = element_text(size = 14))\n\n\n\n\n\n\n\nExercise 3\n\nDownload dataG.zip\n\nMake a plot similar to this one (don’t bother with the fit), plotting the evolution of a Raman spectrum as a function of pressure:\n\n\nBonus:\n\nLooking at data for increasing pressures\n\nPlot the data using an interactive slider (see about the frame option here)\nPlot the data using a 3D color map. Since the data are not on a regular grid, you will need to interpolate the data on a regular grid with the akima package and its interp() function. See chapter @ref(colorplots) on 3D plotting for help.\n\n\n\n\nSolution\n\n# get the list of files for the ramps up and down and out of cell\nfiles_up   &lt;- list.files(\"Data/dataG/\", pattern=\"up\")\nfiles_down &lt;- list.files(\"Data/dataG/\", pattern=\"down\")\nout_cell   &lt;- list.files(\"Data/dataG/\", pattern=\"out\")\n# store all file names in the correct order\nallfiles &lt;- c(out_cell, files_up, files_down)\n# load the wanted package\nlibrary(tidyverse)\nlibrary(ggplot2)\n# create the norm01 function\nnorm01 &lt;- function(x) { (x-min(x))/(max(x)-min(x)) }\n# initialize an empty tibble to store all data\nalldata &lt;- tibble()\nfor (file in allfiles) {#file &lt;- allfiles[1]\n    # read the data and stor it in d\n    d &lt;- read_table(paste0(\"Data/dataG/\",file), col_names=TRUE)\n    # normalize data\n    d$Int_n &lt;- norm01(d$Int)\n    # store file name\n    d$name &lt;- file\n    # store run number for the stacking\n    d$run_number &lt;- which(file==allfiles)\n    # store all data in a single tidy tibble\n    alldata &lt;- bind_rows(alldata, d)\n}\n# plot all data\nalldata |&gt; \n    filter(w&lt;=1750, w&gt;=1500) |&gt; # zoom on the interesting part\n    ggplot(aes(x=w, \n               y=Int_n + run_number - 1))+ # to stack the plots\n        geom_point(color=\"gray\", alpha=.5, size=.2)+ #plot data with points\n        xlim(c(1500,1800))+ #add some white space on the right to write the pressure\n        geom_vline(xintercept=1592, lty=2, size=1)+#show a vertical line\n        annotate(geom  = \"text\", size=5, #show the pressure values\n                 x = 1760, y=seq_along(allfiles)-1, hjust = 0,\n                 label  = paste(unique(alldata$P),\"GPa\"),\n                 family = \"Times\")+\n        labs(x=\"Raman Shift [1/cm]\", #have the good axis labels\n             y=\"Intensity [arb. units]\")+\n        theme_bw()+#black and white theme\n        theme(legend.position = \"none\",#no legend\n              text            = element_text(size = 14, family = \"Times\"),#text in font Times\n              axis.text.y     = element_blank(),# no y axis values\n              axis.text       = element_text(size = 14),\n              panel.grid.major = element_blank(), # no grid\n              panel.grid.minor = element_blank())\n\n\n\n\n\n\n\n\n# Looking at data for increasing pressures, plot the data using an interactive slider\nlibrary(plotly)\nP &lt;- alldata |&gt; \n    filter(grepl(\"up\",name)) |&gt; # only increasing pressures\n    filter(w&lt;=1850, w&gt;=1500) |&gt; # zoom on the interesting part\n    ggplot(aes(x=w, \n               y=Int_n,\n               frame=P))+ # each pressure in a new frame\n        geom_point(color=\"gray\", alpha=.5, size=1)+ #plot data with points\n        labs(x=\"Raman Shift [1/cm]\", #have the good axis labels\n             y=\"Intensity [arb. units]\")+\n        theme_bw()+#black and white theme\n        theme(legend.position = \"none\",#no legend\n              text            = element_text(size = 14, family = \"Times\"),\n              axis.text       = element_text(size = 14),\n              panel.grid.major = element_blank(), # no grid\n              panel.grid.minor = element_blank())\nggplotly(P, dynamicTicks = TRUE)\n\n\n\n\n\n\n# Plot the data using a 3D color map. Since the data are not on a regular grid, \n# you will need to interpolate the data on a regular grid \n# with the `akima` package and its `interp()` function\nlibrary(akima)\ntoplot &lt;- alldata |&gt; \n            filter(grepl(\"up\",name)) |&gt;             filter(w&lt;=1850, w&gt;=1500)\ntoplot.interp &lt;- with(toplot, \n                    interp(x = w, y = P, z = Int_n, \n                           duplicate=\"median\",\n                           xo=seq(min(toplot$w), max(toplot$w), length = 100),\n                           yo=seq(min(toplot$P), max(toplot$P), length = 100),\n                           extrap=FALSE, linear=FALSE)\n                   )\n# toplot.interp is a list of 2 vectors and a matrix\nstr(toplot.interp)\n\n#&gt; List of 3\n#&gt;  $ x: num [1:100] 1500 1504 1507 1511 1514 ...\n#&gt;  $ y: num [1:100] 2.12 2.35 2.59 2.82 3.06 ...\n#&gt;  $ z: num [1:100, 1:100] NA NA NA 0.0287 0.0291 ...\n\n# Regrouping this list to a 3-columns data.frame\nmelt_x &lt;- rep(toplot.interp$x, times=length(toplot.interp$y))\nmelt_y &lt;- rep(toplot.interp$y, each=length(toplot.interp$x))\nmelt_z &lt;- as.vector(toplot.interp$z)\ntoplot.smooth &lt;- na.omit(data.frame(w=melt_x, Pressure=melt_y, Intensity=melt_z))\n# Plotting\ncolors &lt;- colorRampPalette(c(\"white\",\"royalblue\",\"seagreen\",\"orange\",\"red\",\"brown\"))(500)\nP &lt;- ggplot(data=toplot.smooth, aes(x=w, y=Pressure, fill=Intensity)) + \n      geom_raster() + \n      scale_fill_gradientn(colors=colors, name=\"Normalized\\nIntensity\\n[arb. units]\") +\n      labs(x = \"Raman Shift [1/cm]\",y=\"Pressure [GPa]\") +\n      theme_bw()+\n      theme(text            = element_text(size = 14, family = \"Times\"),\n            axis.text       = element_text(size = 14),\n            panel.grid.major = element_blank(), # no grid\n            panel.grid.minor = element_blank())\nggplotly(P, dynamicTicks = TRUE)\n\n\n\n\n\nExercise 4\n\nDownload population.csv and load it into a data.frame\n\nIs it a tidy data.frame?\n\nDo we want a tidy data.frame?\nWhy?\nAct accordingly\n\n\nPlot the population vs. year with a color for each city\n\nWith points\nWith lines\nWith a black and white theme\nMake it interactive\n\n\nTry reproducing the following plots (Google is your friend) (look into the function reorder() and this help to use it with facets):\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSolution\n# Load and tidy population data.frame\nlibrary(tidyverse)\ndf &lt;- read.csv(\"Data/population.csv\")\ndf &lt;- pivot_longer(df, \n                   cols=-year, #year should stay a column\n                   names_to=\"City\", #column names should go to the column `city`\n                   values_to=\"Population\" #values should go to the column `population`\n                   )\ndf$City &lt;- gsub(\"\\\\.\", \" \", df$City) # replace dots by spaces in city names\n# Plot the population vs. year with a different color for each city\np &lt;- ggplot(data=df, aes(x=year, y=Population, color=City))\n# With points\np + geom_point()\n# With lines\np + geom_line()\n# With a black and white theme\n# Change the axis labels to \"year\" and \"Population\"\np &lt;- p + geom_line() + theme_bw(); p\n# Make it interactive\nlibrary(plotly)\nggplotly(p, dynamicTicks = TRUE)\n# Reproduce the plots\nmy_theme &lt;- theme_bw()+\n            theme(axis.text = element_text(size = 14,family = \"Helvetica\",colour=\"black\"),\n                  text = element_text(size = 14,family = \"Helvetica\"),\n                  axis.ticks = element_line(colour = \"black\"),\n                  legend.text = element_text(size = 10,family = \"Helvetica\",colour=\"black\"),\n                  panel.border = element_rect(colour = \"black\", fill=NA, linewidth=1)\n                  )\ncolors &lt;- c(\"royalblue\",\"red\")\np1 &lt;- df |&gt; filter(City%in%c(\"Montpellier\",\"Nantes\")) |&gt; \n        ggplot(aes(x=year, y=Population, size=Population, color=City)) +\n            geom_point() + \n            geom_smooth(method=\"lm\", aes(fill=City), \n                        alpha=0.1, show.legend = FALSE) + \n            scale_color_manual(values=colors)+\n            scale_fill_manual(values=colors)+\n            ggtitle(\"Population in Montpellier and Nantes\")+\n            labs(x=\"Year\", y=\"Population\")+\n            my_theme \np1\np2 &lt;- df |&gt; filter(year==2012) |&gt; \n        ggplot(aes(x=reorder(City,-Population), \n                   y=Population/1e6, \n                   fill=Population/1e6)) +\n            geom_bar(stat=\"identity\", position=\"dodge\") + \n            ggtitle(\"Population in 2012 (in millions)\")+\n            labs(x=\"\", y=\"Population (in millions)\")+\n            scale_fill_gradientn(colors=colors, \n                                 name=\"Population\\n(in millions)\") +\n            my_theme + \n            theme(axis.text.x = element_text(angle = 45, hjust=1))\np2",
    "crumbs": [
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Plotting</span>"
    ]
  },
  {
    "objectID": "13-3d_plots.html",
    "href": "13-3d_plots.html",
    "title": "12  3D color plots",
    "section": "",
    "text": "12.1 The ggplot2 solution\nLet’s create a dummy set of spectra that we will gather in a tidy tibble.\nlibrary(tidyverse)\nNspec &lt;- 40                           # Amount of spectra\nN     &lt;- 500                          # Size of the x vector\n# Create a fake data tibble\nfake_data &lt;- tibble(T = round(seq(273, 500, length=Nspec), 1)) |&gt; \n    mutate(spec = map(T, ~tibble(w = seq(0, 100, length = N),\n                         Intensity = 50*dnorm(w, mean = (./T[1])*20 + 25, \n                                                  sd  = 10+runif(1,max=5)))))\nfake_data\n\n#&gt; # A tibble: 40 × 2\n#&gt;        T spec              \n#&gt;    &lt;dbl&gt; &lt;list&gt;            \n#&gt;  1  273  &lt;tibble [500 × 2]&gt;\n#&gt;  2  279. &lt;tibble [500 × 2]&gt;\n#&gt;  3  285. &lt;tibble [500 × 2]&gt;\n#&gt;  4  290. &lt;tibble [500 × 2]&gt;\n#&gt;  5  296. &lt;tibble [500 × 2]&gt;\n#&gt;  6  302. &lt;tibble [500 × 2]&gt;\n#&gt;  7  308. &lt;tibble [500 × 2]&gt;\n#&gt;  8  314. &lt;tibble [500 × 2]&gt;\n#&gt;  9  320. &lt;tibble [500 × 2]&gt;\n#&gt; 10  325. &lt;tibble [500 × 2]&gt;\n#&gt; # ℹ 30 more rows\n\nfake_data &lt;- fake_data |&gt; unnest(spec)\nfake_data\n\n#&gt; # A tibble: 20,000 × 3\n#&gt;        T     w Intensity\n#&gt;    &lt;dbl&gt; &lt;dbl&gt;     &lt;dbl&gt;\n#&gt;  1   273 0       0.00177\n#&gt;  2   273 0.200   0.00188\n#&gt;  3   273 0.401   0.00200\n#&gt;  4   273 0.601   0.00212\n#&gt;  5   273 0.802   0.00225\n#&gt;  6   273 1.00    0.00239\n#&gt;  7   273 1.20    0.00254\n#&gt;  8   273 1.40    0.00269\n#&gt;  9   273 1.60    0.00285\n#&gt; 10   273 1.80    0.00303\n#&gt; # ℹ 19,990 more rows\nOK, so now we have some fake experimental data stored in a tidy tibble called fake_data. We want to plot it as a color map in order to grasp the evolution of the spectra. This can be done through the use of geom_contour() and geom_contour_filled() functions and by providing the z aesthetics, or by using the geom_raster() or geom_tile() functions with a fill aesthetics. Both methods can be combined, as shown below:\n# Plotting\ncolors &lt;- colorRampPalette(c(\"white\",\"royalblue\",\"seagreen\",\n                             \"orange\",\"red\",\"brown\"))\nNbins &lt;- 10\nggplot(data=fake_data, aes(x=w, y=T, z=Intensity)) + \n      geom_contour_filled(bins = Nbins) + \n      ggtitle(\"Some fake data\") + \n      scale_fill_manual(values = colors(Nbins),\n                        name = \"Intensity\\n[arb. units]\") +\n      labs(x = \"Fake Raman Shift [1/cm]\",\n           y = \"Fake Temperature [K]\") +\n      theme_bw()\n\n\n\n\n\n\nggplot(data=fake_data, aes(x = w, y = T)) + \n      geom_raster(aes(fill = Intensity)) + #geom_tile would work\n      geom_contour(aes(z = Intensity), color = \"black\", bins = 5)+\n      ggtitle(\"Some fake data\") + \n      scale_fill_gradientn(colors = colors(10), \n                           name = \"Intensity\\n[arb. units]\") +\n      labs(x = \"Fake Raman Shift [1/cm]\",\n           y = \"Fake Temperature [K]\") +\n      theme_bw()\nAnother option is to make a “ridge plot”, or a stacking of plots:\ncolors &lt;- colorRampPalette(c(\"royalblue\",\"seagreen\",\"orange\",\n                             \"red\",\"brown\"))(length(unique(fake_data$T)))\nggplot(data = fake_data, \n       aes(x = w, \n           y = Intensity + as.numeric(factor(T))-1,\n           color = factor(T))\n       ) + \n    geom_line() + \n    labs(x = \"Fake Raman Shift [1/cm]\", \n         y = \"Fake Intensity [arb. units]\") +\n    coord_cartesian(xlim = c(25,75)) +\n    scale_color_manual(values=colors,name=\"Fake\\nTemperature [K]\") +\n    theme_bw()\n\n\n\n\n\n\nggplot(data=fake_data, \n       aes(x = w, \n           y = Intensity + as.numeric(factor(T))-1, \n           color = T, \n           group = T)\n       )+\n    geom_line() + \n    labs(x=\"Fake Raman Shift [1/cm]\", y=\"Fake Intensity [arb. units]\") +\n    scale_color_gradientn(colors=colors,name=\"Fake\\nTemperature [K]\") +\n    coord_cartesian(xlim = c(25,75)) +\n    theme_bw()",
    "crumbs": [
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>3D color plots</span>"
    ]
  },
  {
    "objectID": "13-3d_plots.html#the-base-graphics-solution",
    "href": "13-3d_plots.html#the-base-graphics-solution",
    "title": "12  3D color plots",
    "section": "\n12.2 The base graphics solution",
    "text": "12.2 The base graphics solution\nIn some cases you end up with a matrix z, and two vectors x and y. This is easy to plot using the base image() function. For the sake of example, let’s just pivot our 3-columns data.frame to such a matrix using pivot_wider():\n\nx &lt;- sort(unique(fake_data$w))\ny &lt;- sort(unique(fake_data$T))\nz &lt;- as.matrix(fake_data |&gt; \n                pivot_wider(values_from = Intensity, names_from = T) |&gt; \n                select(-w)\n               )\ncolors &lt;- colorRampPalette(c(\"white\",\"royalblue\",\"seagreen\",\"orange\",\"red\",\"brown\"))(50)\npar(mar = c(4, 4, .5, 4), lwd = 2)\nimage(x, y, z, col = colors)\n\n\n\n\n\n\n\nYou can add a legend by using the image.plot function:\n\nlibrary(fields)\npar(mar=c(4, 4, .5, 4), lwd=2)\nimage.plot(x,y,z, col = colors)",
    "crumbs": [
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>3D color plots</span>"
    ]
  },
  {
    "objectID": "13-3d_plots.html#the-plotly-solution",
    "href": "13-3d_plots.html#the-plotly-solution",
    "title": "12  3D color plots",
    "section": "\n12.3 The plotly solution",
    "text": "12.3 The plotly solution\nAnd finally, if you want to make this an interactive plot, you can use plot_ly():\n\nlibrary(plotly)\naX &lt;- list(title = \"Raman Shift [1/cm]\")\naY &lt;- list(title = \"Temperature [K]\")\n# Weird but you need to use t(z) here:\nz &lt;- t(z)\n# Color plot\nplot_ly(x = x, y = y, z = z, type = \"heatmap\", colors = colors) |&gt; \n   layout(xaxis = aX, yaxis = aY)\n\n\n\n\n\nOr, very cool, an interactive surface plot:\n\nplot_ly(x=x, y=y, z=z, type = \"surface\", colors=colors) |&gt;\n   layout(scene = list(xaxis = aX, yaxis = aY, dragmode=\"turntable\"))",
    "crumbs": [
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>3D color plots</span>"
    ]
  },
  {
    "objectID": "13-3d_plots.html#the-case-of-non-regular-data",
    "href": "13-3d_plots.html#the-case-of-non-regular-data",
    "title": "12  3D color plots",
    "section": "\n12.4 The case of non-regular data",
    "text": "12.4 The case of non-regular data\nIn case you have a set of non-regular data, plotting it as a color map can get tricky: how do we tell the plotting device what color should be in a place where there is no data point?\nThe solution is to use a spline (or linear, but spline looks usually nicer) interpolation of your 2D data. For this, we can use the akima package and its interp() function, like so:\n\n# let's make our data irregular and see the plot is now not working:\nirreg.df &lt;- fake_data[sample(nrow(fake_data), nrow(fake_data)/3),]\n# let's plot these irregular data\ncolors &lt;- colorRampPalette(c(\"white\",\"royalblue\",\"seagreen\",\n                             \"orange\",\"red\",\"brown\"))(500)\nggplot(data=irreg.df, aes(x=w, y=T, fill=Intensity)) + \n      geom_raster() + #geom_tile would work\n      ggtitle(\"Some irregular and ugly fake data\") + \n      scale_fill_gradientn(colors=colors,name=\"Intensity\\n[arb. units]\") +\n      labs(x = \"Fake Raman Shift [1/cm]\",\n           y = \"Fake Temperature [K]\") +\n      theme_bw()\n\n\n\n\n\n\n# now let's interpolate the data on a 100x100 regular grid\n# linear = FALSE -&gt; cubic interpolation\nlibrary(akima)\nirreg.df.interp &lt;- with(irreg.df, \n    interp(x=w, y=T, z=Intensity, nx = 100, ny = 100,\n           duplicate = \"median\", extrap = FALSE, linear = FALSE)\n    )\n# irreg.df.interp is a list of 2 vectors and a matrix\nstr(irreg.df.interp)\n\n#&gt; List of 3\n#&gt;  $ x: num [1:100] 0 1.01 2.02 3.03 4.04 ...\n#&gt;  $ y: num [1:100] 273 275 278 280 282 ...\n#&gt;  $ z: num [1:100, 1:100] NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN ...\n\n# Regrouping this list to a 3-columns data.frame\nirreg.df.smooth &lt;- expand.grid(w = irreg.df.interp$x, \n                               T = irreg.df.interp$y) |&gt; \n                        tibble() |&gt; \n                        mutate(Intensity = as.vector(irreg.df.interp$z)) |&gt; \n                        na.omit()\n# Plotting\nirreg.df.smooth |&gt; \n    ggplot(aes(x=w, y=T, fill=Intensity)) + \n        geom_raster() + \n        ggtitle(\"Some irregular fake data that have been interpolated with cubic splines\") + \n        scale_fill_gradientn(colors=colors, name=\"Intensity\\n[arb. units]\") +\n        labs(x = \"Fake Raman Shift [1/cm]\", \n             y = \"Fake Temperature [K]\") +\n        theme_bw()",
    "crumbs": [
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>3D color plots</span>"
    ]
  },
  {
    "objectID": "13-3d_plots.html#d-density-of-points",
    "href": "13-3d_plots.html#d-density-of-points",
    "title": "12  3D color plots",
    "section": "\n12.5 2D density of points",
    "text": "12.5 2D density of points\nIn case you want to plot a density of points, you have a variety of solutions:\n\ndf &lt;- tibble(x=rnorm(1e3, mean=c(1,5)),\n             y=rnorm(1e3, mean=c(5,1)))\np1 &lt;- ggplot(data=df, aes(x=x,y=y))+ geom_density2d() + ggtitle('geom_density2d()')\np2 &lt;- ggplot(data=df, aes(x=x,y=y))+ geom_hex() + ggtitle('geom_hex()')\np3 &lt;- ggplot(data=df, aes(x=x,y=y))+ geom_bin2d() + ggtitle('geom_bin2d()')\np4 &lt;- ggplot(data=df, aes(x=x,y=y))+ ggtitle('stat_density2d()') +\n        stat_density2d(aes(fill = ..density..), geom = \"tile\", contour = FALSE, n = 200) +\n        scale_fill_continuous(low = \"white\", high = \"dodgerblue4\")\nlibrary(cowplot)\nplot_grid(p1,p2,p3,p4)\n\n\n\n\n\n\n\nOr the base smoothScatter() function could do the trick:\n\nsmoothScatter(df)",
    "crumbs": [
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>3D color plots</span>"
    ]
  },
  {
    "objectID": "14-fitting.html",
    "href": "14-fitting.html",
    "title": "\n13  Fitting\n",
    "section": "",
    "text": "13.1 What does it mean to “fit data”?\nIt might sound like a trivial question, but let’s make sure we’re all on the same page…\nFor the sake of the example, let’s take a look at some experimental measurements of the oscillation period T of a pendulum1. We have measured this period for various lengths L of the pendulum, and it results in such an evolution:\nFigure 13.1: Some experimental data showing the period of a pendulum measured as a function of its length.\nNow, if you recall your high school physics class, you might remember that the period of the pendulum T is given by:\n\\[\nT \\simeq 2\\pi\\sqrt{\\frac{L}{g}},\n\\tag{13.1}\\]\nwhere L is the pendulum length and g the acceleration of gravity. Such and experimental design, i.e. measuring T as a function of L, is therefore a means to determining the value of g.\nFor this, we need to perform a fit of our experimental data by a physical model, i.e. the one of Equation 13.1. When doing so, one has to distinguish between:\nSo now, what exactly is a fit? Fitting a model to experimental data means:\nHow do we know the parameters are the best ones to describe our data? For this, we use a tool called the residual error function, \\(\\chi^2\\), such as:\n\\[\n\\chi^2=\\sum_{i=1}^N\\left(y_i(x_i)-m_i(x_i, \\{p\\})\\right)^2,\n\\] where \\(y_i(x_i)\\) are the N experimental observations of the value \\(y\\) as a function of \\(x\\), and \\(m_i(x_i, \\{p\\})\\) is the value of the model as a function of \\(x\\) and the ensemble of parameters \\(\\{p\\}\\). We use the squared sum of residuals and not the simple sum of residuals because the residuals can either be positive or negative, and we are interested in minimizing the total distance from our model to our experimental data.\nApplied to our pendulum problem, we thus get:\n\\[\n\\chi^2=\\sum_{i=1}^N\\left(T_i-2\\pi\\sqrt{\\frac{L_i}{g}}\\right)^2,\n\\] where the summation is performed on the N points that we have recorded in Figure 13.1. In this case there is only one parameter, but you will encounter other models needing more than one parameter (for example if you’re fitting a peak, you’ll need it’s position, width, and height: 3 parameters). The rule of thumb is that the less parameters you introduce the better, “less” being compared to the number of data points.\nSo, let’s try a few values of g and see what is the resulting residual error \\(\\chi^2\\) in each case:\nFigure 13.2: Measuring the residual error \\(\\chi^2\\) for different values of the parameter g. The distances from each experimental data point to the model (i.e. the residuals) are shown in blue. The sum of these squared residuals yields the residual error \\(\\chi^2\\).\nWe see that there is a sweet spot in the values of g for which \\(\\chi^2\\) is minimum:\nFigure 13.3: Evolution of \\(\\chi^2\\) as a function of g. The sweet spot is found for the red value.\nThere are numerous algorithms out there to perform this optimization, but we will not delve into their mechanics.\nNow, let’s get back to R. You will mainly use two functions to perform these optimizations:",
    "crumbs": [
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Fitting</span>"
    ]
  },
  {
    "objectID": "14-fitting.html#what-does-it-mean-to-fit-data",
    "href": "14-fitting.html#what-does-it-mean-to-fit-data",
    "title": "\n13  Fitting\n",
    "section": "",
    "text": "Variables: the period T and the pendulum length L are variables, they are the quantities that vary for a given parameter.\n\nParameters: the gravity g is a parameter of the fit that we wish to determine, i.e. it is a constant for this set of measurements.\n\n\n\n\nFinding the model that best describe our data (a line, a Gaussian, a polynomial, Equation 13.1, etc.). You can try several models and compare them to determine which model is the best.\n\nFinding the set of parameters of the model that best describe our data. This is done through an optimization algorithm.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nImportant\n\n\n\nFitting a model to experimental data is finding this sweet spot for the ensemble of parameters through an optimization procedure.\n\n\n\n\n\nWhen your experimental data follow a linear trend: lm()\nThe rest of the time: nls()\n\n\n\n\n\n\n\nImportant\n\n\n\nNote that, whenever it is possible, it is usually preferable to make your problem a linear one, as it avoids the hassle of providing starting values. For example, in the pendulum case above, taking the square of Equation 13.1 results in a linear evolution of \\(T^2\\) with respect to \\(l\\).",
    "crumbs": [
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Fitting</span>"
    ]
  },
  {
    "objectID": "14-fitting.html#linear-fitting-with-lm",
    "href": "14-fitting.html#linear-fitting-with-lm",
    "title": "\n13  Fitting\n",
    "section": "\n13.2 Linear fitting with lm()\n",
    "text": "13.2 Linear fitting with lm()\n\n\nLet’s learn how to do simple linear fits with R’s lm() and plot the results. Let’s start with some fake data stored in a tibble called d:\n\n\n\n\n\n\n\n\nWe see that this data shows a linear evolution, for which we might want to extract the slope and the intercept. This is very simply done by applying the lm() function, like so:\n\n# Fit with a linear model:\n# 3 equivalent ways of calling it\nfit &lt;- lm(data = d, y ~ x)\nfit &lt;- lm(d$y ~ d$x)\nfit &lt;- d |&gt; lm(data=_, y ~ x)\n\nHere, and everywhere else in R, the operator ~ is to be understood as “as a function of”. So with this bit of code, we tell R to “fit y as a function of x using a linear model”.\nNow to see the fit results, we can just display fit, or call summary(fit)\n\n# Summary of the fit\nfit\n\n#&gt; \n#&gt; Call:\n#&gt; lm(formula = y ~ x, data = d)\n#&gt; \n#&gt; Coefficients:\n#&gt; (Intercept)            x  \n#&gt;       1.616        0.230\n\nsummary(fit)\n\n#&gt; \n#&gt; Call:\n#&gt; lm(formula = y ~ x, data = d)\n#&gt; \n#&gt; Residuals:\n#&gt;     Min      1Q  Median      3Q     Max \n#&gt; -0.1477 -0.1109 -0.0420  0.0732  0.3424 \n#&gt; \n#&gt; Coefficients:\n#&gt;             Estimate Std. Error t value Pr(&gt;|t|)    \n#&gt; (Intercept)  1.61556    0.10823   14.93 4.00e-07 ***\n#&gt; x            0.22999    0.01744   13.19 1.04e-06 ***\n#&gt; ---\n#&gt; Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n#&gt; \n#&gt; Residual standard error: 0.1584 on 8 degrees of freedom\n#&gt; Multiple R-squared:  0.956,  Adjusted R-squared:  0.9505 \n#&gt; F-statistic: 173.9 on 1 and 8 DF,  p-value: 1.042e-06\n\n\nTo actually retrieve and store the fit parameters, call coef(fit):\n\n# Retrieve the coefficients and errors\ncoef(fit)\n\n#&gt; (Intercept)           x \n#&gt;   1.6155554   0.2299894\n\ncoef(fit)[1]\n\n#&gt; (Intercept) \n#&gt;    1.615555\n\n\nTo get it properly stored in a tibble, see the broom package that we describe later in this chapter:\n\n# Summary of the fit\nbroom::tidy(fit)\n\n#&gt; # A tibble: 2 × 5\n#&gt;   term        estimate std.error statistic     p.value\n#&gt;   &lt;chr&gt;          &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;       &lt;dbl&gt;\n#&gt; 1 (Intercept)    1.62     0.108       14.9 0.000000400\n#&gt; 2 x              0.230    0.0174      13.2 0.00000104\n\n\nTo get the standard error of the fitted parameters and the R2:\n\nsummary(fit)$coefficients\n\n#&gt;              Estimate Std. Error  t value     Pr(&gt;|t|)\n#&gt; (Intercept) 1.6155554 0.10822627 14.92757 4.000756e-07\n#&gt; x           0.2299894 0.01744224 13.18577 1.042351e-06\n\nsummary(fit)$coefficients[\"x\", \"Std. Error\"]\n\n#&gt; [1] 0.01744224\n\nsummary(fit)$r.squared\n\n#&gt; [1] 0.9560112\n\n\nAnd finally, to plot the result of the fit:\n\n# Get the fitted paramters and make a string with it to be printed\nto_print &lt;- glue(\"y = {round(coef(fit)[1],2)} + x*{round(coef(fit)[2],2)}\")\n# Base plot\nplot(d, pch = 16, main = \"With base plot\", sub = to_print)\nabline(coef(fit), col=\"red\")\n\n\n\n\n\n\n# GGplot versions\nggplot(data=d, aes(x,y)) + \n    geom_point(cex=3) +\n    geom_abline(slope = coef(fit)[2], intercept = coef(fit)[1], col=\"red\") +\n    labs(title = \"With ggplot and the parameters you get from the external call to lm()\",\n         subtitle = to_print)\n\n\n\n\n\n\nggplot(data=d, aes(x,y)) + \n    geom_point(cex=3) +\n    geom_smooth(method=\"lm\") + # does the fit but does not allow saving the parameters\n    labs(title = \"With ggplot and the geom_smooth() function\",\n         subtitle = to_print)\n\n\n\n\n\n\n\nThe function geom_smooth() will fit the data and display the fitted line, but to retrieve the actual coefficients you still need to run lm().\nFinally, you may want to impose an intercept that will be 0 or a given value. For this, you will need to add +0 in the formula, like so:\n\nfit0 &lt;- lm(data = d, y ~ x + 0) # intercept will be fixed in 0\nfit1.5 &lt;- lm(data = d, y - 1.5 ~ x + 0) # intercept will be fixed in 1.5\n\n\nd |&gt; ggplot(aes(x,y)) + \n    geom_point(cex=3) +\n    geom_abline(slope = coef(fit0)[1], intercept = 0, col=\"red\")+\n    geom_abline(slope = coef(fit1.5)[1], intercept = 1.5, col=\"royalblue\")+\n    expand_limits(x = 0, y = 0)",
    "crumbs": [
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Fitting</span>"
    ]
  },
  {
    "objectID": "14-fitting.html#nonlinear-least-squares-fitting",
    "href": "14-fitting.html#nonlinear-least-squares-fitting",
    "title": "\n13  Fitting\n",
    "section": "\n13.3 Nonlinear Least Squares fitting",
    "text": "13.3 Nonlinear Least Squares fitting\n\n13.3.1 The nls() workhorse\nYou can fit data with your own functions and constraints using nls(). Here is an example of data we may want to fit, stored into a tibble called df:\n\nggplot(data=df, aes(x,y))+\n    geom_point()+\n    ggtitle(\"Some fake data we want to fit with 2 Gaussians\")\n\n\n\n\n\n\n\nWe first need to define a function to fit our data. We see here that it contains two peaks that look Gaussian, so let’s go with the sum of two Gaussian functions:\n\n# Create a function to fit the data\nmyfunc &lt;- function(x, y0, x1, x2, A1, A2, sd1, sd2) {\n    y0 +                                # baseline\n    A1 * dnorm(x, mean = x1, sd = sd1) +# 1st Gaussian\n    A2 * dnorm(x, mean = x2, sd = sd2)  # 2nd Gaussian\n}\n# Fit the data using a user function\nfit_nls &lt;- nls(data=df,\n               y ~ myfunc(x, y0, x1, x2, A1, A2, sd1, sd2),\n               # Provide starting point for parameters values:\n               start = list(y0=0, x1=0, x2=1.5, \n                            sd1=.2, sd2=.2, \n                            A1=1, A2=1) \n               )\nsummary(fit_nls)\n\n#&gt; \n#&gt; Formula: y ~ myfunc(x, y0, x1, x2, A1, A2, sd1, sd2)\n#&gt; \n#&gt; Parameters:\n#&gt;      Estimate Std. Error t value Pr(&gt;|t|)    \n#&gt; y0  -0.002037   0.003631  -0.561    0.576    \n#&gt; x1  -0.011202   0.011919  -0.940    0.349    \n#&gt; x2   1.943891   0.047978  40.517   &lt;2e-16 ***\n#&gt; sd1  0.486918   0.012254  39.735   &lt;2e-16 ***\n#&gt; sd2  1.054978   0.049109  21.482   &lt;2e-16 ***\n#&gt; A1   0.945850   0.035520  26.629   &lt;2e-16 ***\n#&gt; A2   1.034246   0.046665  22.163   &lt;2e-16 ***\n#&gt; ---\n#&gt; Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n#&gt; \n#&gt; Residual standard error: 0.02833 on 114 degrees of freedom\n#&gt; \n#&gt; Number of iterations to convergence: 9 \n#&gt; Achieved convergence tolerance: 1.218e-06\n\n\nAnd to plot the data and the result of the fit, we use predict(fit) to retrieve the fitted y values:\n\n# With base R\nplot(x, y, pch=16)\nlines(x, predict(fit_nls), col=\"red\", lwd=2)\n\n\n\n\n\n\n# With ggplot2\nggplot(data=df, aes(x,y))+\n    geom_point(size=2, alpha=.5) +\n    geom_line(aes(y = predict(fit_nls)), color=\"red\", linewidth=1)\n\n\n\n\n\n\n\n\n13.3.2 Using constraints\nIn nls() it is even possible to constraint the fitting by adding lower and upper boundaries. These boundaries are useful when you want to give some physical meaning to your parameters, for example, like forcing the width and amplitude to be positive or above a certain minimum value. However, you have to be careful with these and not provide stupid ones, e.g.:\n\n# Constraining the upper and lower values of the fitting parameters\nfit_constr &lt;- nls(data = df,\n                  y ~ myfunc(x, y0, x1, x2, A1, A2, sd1, sd2),\n                  start = list(y0=0, x1=0, x2=3, \n                               sd1=.2, sd2=.2, A1=1, A2=1),\n                  upper = list(y0=Inf, x1=Inf, x2=Inf, \n                               sd1=Inf, sd2=Inf, A1=2, A2=2),\n                  lower = list(y0=-Inf, x1=-Inf, x2=2.9, \n                               sd1=0, sd2=0, A1=0, A2=0),\n                  algorithm = \"port\"\n                 )\n# Plotting the resulting function in blue\nggplot(data=df, aes(x,y))+\n    ggtitle(\"Beware of bad constraints!\")+\n    geom_point(size=2, alpha=.5) +\n    geom_line(aes(y = predict(fit_constr)), color=\"royalblue\", linewidth=1)\n\n\n\n\n\n\n\n\n13.3.3 A more robust version of nls\n\nSometimes, nls() will struggle to converge towards a solution, especially if you provide initial guesses that are too far from the expected values.\n\nfit3 &lt;- nls(data = df,\n            y ~ myfunc(x, y0, x1, x2, A1, A2, sd1, sd2),\n            start = list(y0 = 0, x1 = 1, x2 = 5, \n                         sd1 = .2, sd2 = .2, A1 = 10, A2 = 10)\n            )\n\n#&gt; Error in numericDeriv(form[[3L]], names(ind), env, central = nDcentral): Missing value or an infinity produced when evaluating the model\n\n\nIn that case, you may want to use a more robust nls() function such as nlsLM() from the minpack.lm package.\n\nlibrary(minpack.lm)\nfit_nlsLM &lt;- nlsLM(data = df,\n                   y ~ myfunc(x, y0, x1, x2, A1, A2, sd1, sd2),\n                   start = list(y0 = 0, x1 = 1, x2 = 5, \n                                sd1 = .2, sd2 = .2, A1 = 10, A2 = 10)\n                   )\nsummary(fit_nlsLM)\n\n#&gt; \n#&gt; Formula: y ~ myfunc(x, y0, x1, x2, A1, A2, sd1, sd2)\n#&gt; \n#&gt; Parameters:\n#&gt;      Estimate Std. Error t value Pr(&gt;|t|)    \n#&gt; y0  -0.002037   0.003631  -0.561    0.576    \n#&gt; x1  -0.011203   0.011919  -0.940    0.349    \n#&gt; x2   1.943889   0.047978  40.516   &lt;2e-16 ***\n#&gt; sd1  0.486917   0.012254  39.735   &lt;2e-16 ***\n#&gt; sd2  1.054981   0.049109  21.482   &lt;2e-16 ***\n#&gt; A1   0.945848   0.035520  26.628   &lt;2e-16 ***\n#&gt; A2   1.034249   0.046666  22.163   &lt;2e-16 ***\n#&gt; ---\n#&gt; Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n#&gt; \n#&gt; Residual standard error: 0.02833 on 114 degrees of freedom\n#&gt; \n#&gt; Number of iterations to convergence: 18 \n#&gt; Achieved convergence tolerance: 1.49e-08\n\n\nAlso, nlsLM() won’t fail when the fit is exact, whereas nls() will:\n\ntestdf &lt;- tibble(x = seq(-10,10),\n                 y = dnorm(x))\nnls(data = testdf,\n    y ~ A*dnorm(x, sd=B, mean=x0) + y0,\n    start = list(y0=0, x0=0, A=1, B=1)\n    )\n\n#&gt; Error in nls(data = testdf, y ~ A * dnorm(x, sd = B, mean = x0) + y0, : number of iterations exceeded maximum of 50\n\nnlsLM(data = testdf,\n    y ~ A*dnorm(x, sd=B, mean=x0) + y0,\n    start = list(y0=0, x0=0, A=1, B=1)\n    )\n\n#&gt; Nonlinear regression model\n#&gt;   model: y ~ A * dnorm(x, sd = B, mean = x0) + y0\n#&gt;    data: testdf\n#&gt; y0 x0  A  B \n#&gt;  0  0  1  1 \n#&gt;  residual sum-of-squares: 0\n#&gt; \n#&gt; Number of iterations to convergence: 1 \n#&gt; Achieved convergence tolerance: 1.49e-08",
    "crumbs": [
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Fitting</span>"
    ]
  },
  {
    "objectID": "14-fitting.html#the-broom-library",
    "href": "14-fitting.html#the-broom-library",
    "title": "\n13  Fitting\n",
    "section": "\n13.4 The broom library",
    "text": "13.4 The broom library\nThanks to the broom library, it is easy to retrieve all the fit parameters in a tibble:\n\nlibrary(broom)\n# Get all parameters and their error\ntidy(fit_nls)\n\n#&gt; # A tibble: 7 × 5\n#&gt;   term  estimate std.error statistic  p.value\n#&gt;   &lt;chr&gt;    &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;    &lt;dbl&gt;\n#&gt; 1 y0    -0.00204   0.00363    -0.561 5.76e- 1\n#&gt; 2 x1    -0.0112    0.0119     -0.940 3.49e- 1\n#&gt; 3 x2     1.94      0.0480     40.5   1.58e-69\n#&gt; 4 sd1    0.487     0.0123     39.7   1.26e-68\n#&gt; 5 sd2    1.05      0.0491     21.5   6.93e-42\n#&gt; 6 A1     0.946     0.0355     26.6   9.28e-51\n#&gt; 7 A2     1.03      0.0467     22.2   3.91e-43\n\n# Get the fitted curve and residuals next to the original data\naugment(fit_nls)\n\n#&gt; # A tibble: 121 × 4\n#&gt;        x       y  .fitted   .resid\n#&gt;    &lt;dbl&gt;   &lt;dbl&gt;    &lt;dbl&gt;    &lt;dbl&gt;\n#&gt;  1  -5   -0.0119 -0.00204 -0.00986\n#&gt;  2  -4.9 -0.0221 -0.00204 -0.0201 \n#&gt;  3  -4.8 -0.0107 -0.00204 -0.00867\n#&gt;  4  -4.7  0.0133 -0.00204  0.0153 \n#&gt;  5  -4.6 -0.0455 -0.00204 -0.0434 \n#&gt;  6  -4.5 -0.0447 -0.00204 -0.0427 \n#&gt;  7  -4.4 -0.0477 -0.00204 -0.0457 \n#&gt;  8  -4.3 -0.0397 -0.00204 -0.0376 \n#&gt;  9  -4.2  0.0256 -0.00204  0.0277 \n#&gt; 10  -4.1 -0.0183 -0.00204 -0.0162 \n#&gt; # ℹ 111 more rows\n\n\nIt is then easy to make a recursive fit on your data without using a for loop, like so:\n\nlibrary(broom)\nlibrary(tidyverse)\nlibrary(ggplot2)\ntheme_set(theme_bw())\n# Create fake data\na &lt;- seq(-10,10,.1)\ncenters &lt;- c(-2*pi,pi,pi/6)\nwidths  &lt;- runif(3, min=0.5, max=1)\namp     &lt;- runif(3, min=2, max=10)\nnoise   &lt;- .3*runif(length(a))-.15\nd &lt;- tibble(x=rep(a,3),\n            y=c(amp[1]*dnorm(a,mean=centers[1],sd=widths[1])+sample(noise),\n                amp[2]*dnorm(a,mean=centers[2],sd=widths[2])+sample(noise),\n                amp[3]*dnorm(a,mean=centers[3],sd=widths[3])+sample(noise)),\n            T=rep(1:3, each=length(a))\n            )\n# Plot the data\nd |&gt; ggplot(aes(x=x, y=y, color=factor(T))) + \n    geom_point()\n\n\n\n\n\n\n# Fit all data\nd_fitted &lt;- d |&gt; \n    nest(data = -T) |&gt;\n    mutate(fit = map(data, ~ nls(data = .,\n                     y ~ y0 + A*dnorm(x, mean=x0, sd=FW), \n                     start=list(A  = max(.$y),\n                                y0 = .01, \n                                x0 = .$x[which.max(.$y)], \n                                FW = .7)\n                     )),\n           tidied = map(fit, tidy),\n           augmented = map(fit, augment)\n          )\nd_fitted\n\n#&gt; # A tibble: 3 × 5\n#&gt;       T data               fit    tidied           augmented         \n#&gt;   &lt;int&gt; &lt;list&gt;             &lt;list&gt; &lt;list&gt;           &lt;list&gt;            \n#&gt; 1     1 &lt;tibble [201 × 2]&gt; &lt;nls&gt;  &lt;tibble [4 × 5]&gt; &lt;tibble [201 × 4]&gt;\n#&gt; 2     2 &lt;tibble [201 × 2]&gt; &lt;nls&gt;  &lt;tibble [4 × 5]&gt; &lt;tibble [201 × 4]&gt;\n#&gt; 3     3 &lt;tibble [201 × 2]&gt; &lt;nls&gt;  &lt;tibble [4 × 5]&gt; &lt;tibble [201 × 4]&gt;\n\n\nIn case you want to provide fit parameters that vary depending on the group you are looking at, use the notation .$column_name, like is done here.\nThen you can see the results for all your data at once:\n\n# data and fit resulting curve\nd_fitted |&gt; \n  unnest(augmented)\n\n#&gt; # A tibble: 603 × 8\n#&gt;        T data               fit    tidied       x       y    .fitted  .resid\n#&gt;    &lt;int&gt; &lt;list&gt;             &lt;list&gt; &lt;list&gt;   &lt;dbl&gt;   &lt;dbl&gt;      &lt;dbl&gt;   &lt;dbl&gt;\n#&gt;  1     1 &lt;tibble [201 × 2]&gt; &lt;nls&gt;  &lt;tibble&gt; -10   -0.123  -0.00612   -0.116 \n#&gt;  2     1 &lt;tibble [201 × 2]&gt; &lt;nls&gt;  &lt;tibble&gt;  -9.9 -0.0449 -0.00596   -0.0390\n#&gt;  3     1 &lt;tibble [201 × 2]&gt; &lt;nls&gt;  &lt;tibble&gt;  -9.8  0.114  -0.00572    0.120 \n#&gt;  4     1 &lt;tibble [201 × 2]&gt; &lt;nls&gt;  &lt;tibble&gt;  -9.7  0.111  -0.00538    0.117 \n#&gt;  5     1 &lt;tibble [201 × 2]&gt; &lt;nls&gt;  &lt;tibble&gt;  -9.6 -0.0252 -0.00489   -0.0203\n#&gt;  6     1 &lt;tibble [201 × 2]&gt; &lt;nls&gt;  &lt;tibble&gt;  -9.5 -0.0958 -0.00419   -0.0916\n#&gt;  7     1 &lt;tibble [201 × 2]&gt; &lt;nls&gt;  &lt;tibble&gt;  -9.4 -0.0602 -0.00320   -0.0570\n#&gt;  8     1 &lt;tibble [201 × 2]&gt; &lt;nls&gt;  &lt;tibble&gt;  -9.3  0.120  -0.00185    0.122 \n#&gt;  9     1 &lt;tibble [201 × 2]&gt; &lt;nls&gt;  &lt;tibble&gt;  -9.2 -0.147   0.0000112 -0.147 \n#&gt; 10     1 &lt;tibble [201 × 2]&gt; &lt;nls&gt;  &lt;tibble&gt;  -9.1 -0.0645  0.00252   -0.0670\n#&gt; # ℹ 593 more rows\n\n# fit parameters\nd_fitted |&gt; \n  unnest(tidied)\n\n#&gt; # A tibble: 12 × 9\n#&gt;        T data     fit    term   estimate std.error statistic   p.value augmented\n#&gt;    &lt;int&gt; &lt;list&gt;   &lt;list&gt; &lt;chr&gt;     &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt; &lt;list&gt;   \n#&gt;  1     1 &lt;tibble&gt; &lt;nls&gt;  A      2.12       0.0714     29.7   1.12e- 74 &lt;tibble&gt; \n#&gt;  2     1 &lt;tibble&gt; &lt;nls&gt;  y0    -0.00643    0.00713    -0.903 3.68e-  1 &lt;tibble&gt; \n#&gt;  3     1 &lt;tibble&gt; &lt;nls&gt;  x0    -6.24       0.0317   -197.    3.29e-228 &lt;tibble&gt; \n#&gt;  4     1 &lt;tibble&gt; &lt;nls&gt;  FW     0.940      0.0334     28.2   5.46e- 71 &lt;tibble&gt; \n#&gt;  5     2 &lt;tibble&gt; &lt;nls&gt;  A      8.13       0.0682    119.    1.56e-185 &lt;tibble&gt; \n#&gt;  6     2 &lt;tibble&gt; &lt;nls&gt;  y0    -0.000927   0.00713    -0.130 8.97e-  1 &lt;tibble&gt; \n#&gt;  7     2 &lt;tibble&gt; &lt;nls&gt;  x0     3.14       0.00730   430.    9.70e-295 &lt;tibble&gt; \n#&gt;  8     2 &lt;tibble&gt; &lt;nls&gt;  FW     0.857      0.00765   112.    2.61e-180 &lt;tibble&gt; \n#&gt;  9     3 &lt;tibble&gt; &lt;nls&gt;  A      9.82       0.0723    136.    1.19e-196 &lt;tibble&gt; \n#&gt; 10     3 &lt;tibble&gt; &lt;nls&gt;  y0    -0.00376    0.00722    -0.521 6.03e-  1 &lt;tibble&gt; \n#&gt; 11     3 &lt;tibble&gt; &lt;nls&gt;  x0     0.521      0.00691    75.3   3.43e-147 &lt;tibble&gt; \n#&gt; 12     3 &lt;tibble&gt; &lt;nls&gt;  FW     0.938      0.00728   129.    3.93e-192 &lt;tibble&gt;\n\n# fit parameters as a wide table\nd_fitted |&gt; \n  unnest(tidied) |&gt; \n  select(T, term, estimate, std.error) |&gt; \n  pivot_wider(names_from = term, \n              values_from = c(estimate,std.error))\n\n#&gt; # A tibble: 3 × 9\n#&gt;       T estimate_A estimate_y0 estimate_x0 estimate_FW std.error_A std.error_y0\n#&gt;   &lt;int&gt;      &lt;dbl&gt;       &lt;dbl&gt;       &lt;dbl&gt;       &lt;dbl&gt;       &lt;dbl&gt;        &lt;dbl&gt;\n#&gt; 1     1       2.12   -0.00643       -6.24        0.940      0.0714      0.00713\n#&gt; 2     2       8.13   -0.000927       3.14        0.857      0.0682      0.00713\n#&gt; 3     3       9.82   -0.00376        0.521       0.938      0.0723      0.00722\n#&gt; # ℹ 2 more variables: std.error_x0 &lt;dbl&gt;, std.error_FW &lt;dbl&gt;\n\n# plot fit result\nd_fitted |&gt; \n    unnest(augmented) |&gt; \n    ggplot(aes(x=x, color=factor(T)))+\n        geom_point(aes(y=y), alpha=0.5, size=3) + \n        geom_line(aes(y=.fitted))\n\n\n\n\n\n\n# plot fit parameters\nd_fitted |&gt; \n  unnest(tidied) |&gt; \n  ggplot(aes(x=T, y=estimate, color=term))+\n    geom_point()+\n    geom_errorbar(aes(ymin=estimate-std.error,\n                      ymax=estimate+std.error),\n                  width=.1)+\n    facet_wrap(~term, scales=\"free_y\")+\n    theme(legend.position = \"none\")",
    "crumbs": [
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Fitting</span>"
    ]
  },
  {
    "objectID": "14-fitting.html#exo-fits",
    "href": "14-fitting.html#exo-fits",
    "title": "\n13  Fitting\n",
    "section": "\n13.5 Exercises",
    "text": "13.5 Exercises\nDownload the exercises and solutions from the following repositories, then create a Rstudio project from the unzipped folder:\n\nBeginner exercises\nAdvanced exercises\nGGplot2 exercises\n\n\nExercise 1\n\nLoad exo_fit.txt in a tibble.\nUsing lm() or nls() fit each column as a function of x and display the “experimental” data and the fit on the same graph.\n\nTip: Take a look at the function dnorm() to define a Gaussian\n\n\nExercise 2\n\nLoad the tidyverse library.\nDefine a function norm01(x), that, given a vector x, returns this vector normalized to [0,1].\nLoad the Raman spectrum rubis_01.txt, normalize it to [0,1] and plot it\nDefine the normalized Lorentzian function Lorentzian(x, x0, FWHM), defined by \\(L(x, x_0, FWHM)=\\frac{FWHM}{2\\pi}\\frac{1}{(FWHM/2)^2 + (x-x_0)^2}\\)\n\nGuess grossly the initial parameters and plot the resulting curve as a blue dashed line\nFit the data by a sum of 2 Lorentzians using nls()\n\nAdd the result on the plot as a red line\nAdd the 2 Lorentzian components as area-filled curves with alpha=0.2 and two different colors\n\n\nSolution\n\n# Load the `tidyverse` library.\nlibrary(tidyverse)\n# Define a function `norm01(x)`, that, given a vector `x`, returns this vector normalized to [0,1].\nnorm01 &lt;- function(x) {(x-min(x))/(max(x)-min(x))}\n# Load rubis_1.txt, normalize it to [0,1] and plot it\nd &lt;- read_table(\"Data/rubis_01.txt\", col_names=c(\"w\", \"Int\")) |&gt; \n    mutate(Int_n = norm01(Int))\nP &lt;- d |&gt;\n    ggplot(aes(x=w, y=Int_n))+\n        geom_point(alpha=0.5)\nP\n\n\n\n\n\n\n# Define the Lorentzian function\nLorentzian &lt;- function(x, x0=0, FWHM=1){\n    FWHM / (2*pi) / ((FWHM/2)^2 + (x - x0)^2)\n}\n# Guess grossly the initial parameters and plot the resulting curve as a blue dashed line\nP+geom_line(aes(y = 0.03 + \n                    3*Lorentzian(w, x0=3160, FWHM=10) +\n                    7*Lorentzian(w, x0=3210, FWHM=10)),\n            col=\"blue\", lty=2)\n\n\n\n\n\n\n# Fit the data by a sum of 2 Lorentzians using `nls`\nfit &lt;- nls(data=d, \n           Int_n ~ y0 + A1*Lorentzian(w,x1,FWHM1) + A2*Lorentzian(w,x2,FWHM2), \n           start=list(y0=0.03,\n                      x1=3160, FWHM1=10, A1=3,\n                      x2=3200, FWHM2=10, A2=7))\nsummary(fit)\n\n#&gt; \n#&gt; Formula: Int_n ~ y0 + A1 * Lorentzian(w, x1, FWHM1) + A2 * Lorentzian(w, \n#&gt;     x2, FWHM2)\n#&gt; \n#&gt; Parameters:\n#&gt;        Estimate Std. Error   t value Pr(&gt;|t|)    \n#&gt; y0    9.825e-03  6.165e-04     15.94   &lt;2e-16 ***\n#&gt; x1    3.173e+03  3.503e-02  90576.82   &lt;2e-16 ***\n#&gt; FWHM1 1.076e+01  1.087e-01     98.96   &lt;2e-16 ***\n#&gt; A1    1.039e+01  8.028e-02    129.38   &lt;2e-16 ***\n#&gt; x2    3.203e+03  2.709e-02 118214.68   &lt;2e-16 ***\n#&gt; FWHM2 1.453e+01  8.600e-02    169.00   &lt;2e-16 ***\n#&gt; A2    2.112e+01  9.680e-02    218.19   &lt;2e-16 ***\n#&gt; ---\n#&gt; Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n#&gt; \n#&gt; Residual standard error: 0.01568 on 1008 degrees of freedom\n#&gt; \n#&gt; Number of iterations to convergence: 10 \n#&gt; Achieved convergence tolerance: 7.652e-06\n\n# Add the result on the plot as a red line\nP + geom_line(aes(y=.03 + \n                    3*Lorentzian(w, x0=3160, FWHM=10) +\n                    7*Lorentzian(w, x0=3210, FWHM=10)),\n            col=\"blue\", lty=2)+\n    geom_line(aes(y=predict(fit)), col=\"red\")\n\n\n\n\n\n\n# Add the 2 Lorentzian components as area-filled curves with `alpha=0.2` and two different colors\ny0  &lt;- coef(fit)['y0']\nA1  &lt;- coef(fit)['A1'];   A2   &lt;- coef(fit)['A2']\nx1  &lt;- coef(fit)['x1'];   x2   &lt;- coef(fit)['x2']\nFW1 &lt;- coef(fit)['FWHM1']; FW2 &lt;- coef(fit)['FWHM2']\nP + geom_line(aes(y=.03 + \n                    3*Lorentzian(w, x0=3160, FWHM=10) +\n                    7*Lorentzian(w, x0=3210, FWHM=10)),\n            col=\"blue\", lty=2)+\n    geom_line(aes(y = predict(fit)), col=\"red\")+\n    geom_area(aes(y = A1*Lorentzian(w, x0=x1, FWHM=FW1)), \n                fill=\"royalblue\", alpha=.2)+\n    geom_area(aes(y = A2*Lorentzian(w, x0=x2, FWHM=FW2)), \n                fill=\"orange\", alpha=.2)\n\n\n\n\n\n\n\nExercise 3\n\nCreate an Exercise_fit folder, and create an Rstudio project linked to this folder\n\nDownload the corresponding data files and unzip them in a folder called Data.\nCreate a new .R file in which you will write your code and save it.\nLike in the previous exercise, we will fit ruby Raman spectra, but we will do it on many files at once. First, using list.files(), save in flist the list of ruby files in the Data folder.\nDefine the Lorentzian(x, x0, FWHM) function\nDefine the norm01(x) function returning the vector x normalized to [0,1]\nCreate a read_ruby(filename) function that, given a file name filename, reads the file into a tibble, gives the proper column names, normalizes the intensity to [0,1], and returns the tibble.\nCreate a fitfunc(tib) function that, given a tibble tib, fits this tibble’s y values as a function of the x values using the sum of two Lorentzians, and returns the nls() fit result. Make sure to provide “clever” starting parameters, especially for the positions of the two peaks. For example, one peak is where the spectrum maximum is, and the other one is always at an energy roughly 30 cm-1 lower.\nUsing pipe operations and map(), recursively:\n\nCreate a tibble with only one column called file, which contains the list of file names flist.\nCreate a column data containing a list of all read files, obtained by mapping read_ruby() onto flist.\nCreate a column fit containing a list of nls() objects, obtained by mapping fitfunc() onto the list (column) data\n\nCreate a column tidied containing a list of tidied nls() tibbles, obtained by mapping bbroom::tidy() onto the list (column) fit\n\nCreate a column augmented containing a list of augmented nls() tibbles, obtained by mapping bbroom::augment() onto the list (column) fit\n\nTurn the file column into run that will contain the run number (i.e. the number in the file name) as a numeric value. Use the function separate() to do so.\n\n\nPlot all the experimental data and the fit with black points and red lines into a faceted plot. Play with various ways of plotting this, like a ridge or slider plot.\nPlot the evolution of all fitting parameters as a function of the run number.\nPlot the evolution of the position of the higher energy peak as a function of the file name.\nFit linearly the evolution of the higher intensity peaks with respect to the run number. Display the fitted parameters and R2. Plot the fit as a red line. Make sure to use proper weighing for the fit.\n\n\nSolution\n\n# - Using `list.files()`, save in `flist` the list of ruby files in the `Data` folder.\nflist &lt;- list.files(path = \"Data\", pattern = \"rubis\", full.names = TRUE)\n# - Define the `Lorentzian(x, x0, FWHM)` function\nLorentzian &lt;- function(x, x0 = 0, FWHM = 1) {\n    2 / (pi * FWHM) / (1 + ((x - x0) / (FWHM / 2))^2)\n}\n# - Define the `norm01(x)` function returning the vector x normalized to [0,1]\nnorm01 &lt;- function(x) {\n    (x - min(x)) / (max(x) - min(x))\n}\n# - Create a `read_ruby(filename)` function that, given a file name `filename`, \n# reads the file into a tibble, gives the proper column names, normalizes the \n# intensity to [0,1], and returns the tibble.\nread_ruby &lt;- function(filename){\n    read_table(filename, col_names = c(\"w\", \"Int\")) |&gt; \n        mutate(Int = norm01(Int))\n}\n# - Create a `fitfunc(tib)` function that, given a tibble `tib`, fits this \n# tibble's *y* values as a function of the *x* values using the sum of two Lorentzians, \n# and returns the `nls()` fit result. Make sure to provide \"clever\" starting parameters, \n# especially for the positions of the two peaks. For example, one peak is where \n# the spectrum maximum is, and the other one is always at an energy roughly 30 cm^-1^ lower.\nfitfunc &lt;- function(tib){\n    nls(data=tib,\n        Int ~ y0 + A1*Lorentzian(w,x1,FWHM1)+\n                   A2*Lorentzian(w,x2,FWHM2), \n           start=list(y0=0.03,\n                      x1=tib$w[which.max(tib$Int)] - 30, \n                      FWHM1=10, \n                      A1=max(tib$Int)*10,\n                      x2=tib$w[which.max(tib$Int)], \n                      FWHM2=10, \n                      A2=max(tib$Int)*10)\n        )\n}\n# Test it:\n# df &lt;- read_ruby(flist[1])\n# fitfunc(df)\n# \n# - Using pipe operations and `map()`, recursively:\n#     - Create a tibble with only one column called `file`, which contains the \n#       list of file names `flist`.\n#     - Create a column `data` containing a list of all read files, \n#       obtained by mapping `read_ruby()` onto `flist`.\n#     - Create a column `fit` containing a list of `nls()` objects, \n#       obtained by mapping `fitfunc()` onto the list (column) `data`\n#     - Create a column `tidied` containing a list of tidied `nls()` tibbles, \n#       obtained by mapping `bbroom::tidy()` onto the list (column) `fit`\n#     - Create a column `augmented` containing a list of augmented `nls()` tibbles, \n#       obtained by mapping `bbroom::augment()` onto the list (column) `fit`\n#     - Turn the `file` column into `run` that will contain the run number \n#       (*i.e.* the number in the file name) as a numeric value. \n#       Use the function `separate()`{.R} to do so.\ndata &lt;- tibble(file=flist) |&gt; \n    mutate(data = map(file, read_ruby),\n           fit = map(data, fitfunc),\n           tidied = map(fit, tidy),\n           augmented = map(fit, augment)\n           ) |&gt; \n    separate(file, c(NA, NA, \"run\", NA), convert = TRUE)\n# - Plot all the experimental data and the fit with black points and red lines \n# into a faceted plot. Play with various ways of plotting this, \n# like a ridge or slider plot.\ndata |&gt; \n    unnest(augmented) |&gt; \n    ggplot(aes(x = w, y = Int)) +\n       geom_point(alpha=0.5)+\n       geom_line(aes(y=.fitted), col=\"red\")+\n       facet_wrap(~run)\n\n\n\n\n\n\ndata |&gt; \n    unnest(augmented) |&gt; \n    ggplot(aes(x = w, y = Int + as.numeric(factor(run)), group=run)) +\n       geom_point(alpha=0.5)+\n       geom_line(aes(y = .fitted + as.numeric(factor(run))), col = \"red\")\n\n\n\n\n\n\nP &lt;- data |&gt;\n    unnest(augmented) |&gt;\n    ggplot(aes(x = w, y = Int, frame=run)) +\n        geom_point(alpha = 0.5) +\n        geom_line(aes(y = .fitted), col = \"red\")\nlibrary(plotly)\nggplotly(P, dynamicTicks = TRUE) |&gt; \n    animation_opts(5)|&gt;\n    layout(xaxis = list(autorange=FALSE, range = c(3050, 3550)))\n\n\n\n\n# - Plot the evolution of all fitting parameters as a function of the run number.\ndata |&gt;\n    unnest(tidied) |&gt; \n    ggplot(aes(x = run, y = estimate)) +\n        geom_point()+\n        facet_wrap(~term, scales = \"free\")+\n        geom_errorbar(aes(ymin = estimate - std.error,\n                          ymax = estimate + std.error),\n                      width=0.5)\n\n\n\n\n\n\n# - Plot the evolution of the position of the higher intensity peaks.\ndata |&gt;\n    unnest(tidied) |&gt; \n    filter(term == \"x1\") |&gt; \n    ggplot(aes(x = run, y = estimate)) +\n        geom_point()+\n        geom_errorbar(aes(ymin = estimate - std.error,\n                          ymax = estimate + std.error),\n                      width=0.5)\n\n\n\n\n\n\n# - Fit linearly the evolution of the higher intensity peaks with respect to the \n#   run number. Display the fitted parameters and R^2^.Plot the fit as a red line. \n#   Make sure to use proper weighing for the fit.\nlmfit &lt;- data |&gt;\n    unnest(tidied) |&gt;\n    filter(term == \"x1\") |&gt; \n    lm(data=_, \n       estimate ~ run, \n       weights = 1/std.error^2)\ntidy(lmfit)\n\n#&gt; # A tibble: 2 × 5\n#&gt;   term        estimate std.error statistic  p.value\n#&gt;   &lt;chr&gt;          &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;    &lt;dbl&gt;\n#&gt; 1 (Intercept)  3169.      0.557     5686.  6.39e-49\n#&gt; 2 run             6.99    0.0756      92.6 4.23e-22\n\nglance(lmfit)\n\n#&gt; # A tibble: 1 × 12\n#&gt;   r.squared adj.r.squared sigma statistic  p.value    df logLik   AIC   BIC\n#&gt;       &lt;dbl&gt;         &lt;dbl&gt; &lt;dbl&gt;     &lt;dbl&gt;    &lt;dbl&gt; &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n#&gt; 1     0.998         0.998  57.6     8566. 4.23e-22     1  -36.0  78.1  80.6\n#&gt; # ℹ 3 more variables: deviance &lt;dbl&gt;, df.residual &lt;int&gt;, nobs &lt;int&gt;\n\ndata |&gt;\n    unnest(tidied) |&gt; \n    filter(term == \"x1\") |&gt; \n    ggplot(aes(x = run, y = estimate)) +\n        geom_point()+\n        geom_errorbar(aes(ymin = estimate - std.error,\n                          ymax = estimate + std.error),\n                      width=0.5)+\n        geom_line(aes(y = predict(lmfit)), col=\"red\")",
    "crumbs": [
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Fitting</span>"
    ]
  },
  {
    "objectID": "14-fitting.html#footnotes",
    "href": "14-fitting.html#footnotes",
    "title": "\n13  Fitting\n",
    "section": "",
    "text": "Wikipedia page on the pendulum.↩︎",
    "crumbs": [
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Fitting</span>"
    ]
  },
  {
    "objectID": "15-quarto.html",
    "href": "15-quarto.html",
    "title": "\n14  Writing documents with Quarto\n",
    "section": "",
    "text": "14.1 What is markdown?\nMarkdown is a simplified language that can be used to produce a variety of rich documents: a single .md file can be compiled and outputted to .docx, .odt, .html, .rtf, .pdf or .tex. This output format as well as various options (font size, template, table of contents, numbered sections…) are specified in a YAML header, i.e. text between two lines like that --- (we’ll see an example later).\nIn markdown can be embedded \\(\\LaTeX\\) code for displaying math expressions, html tags for more complicated html stuff, and the rest of the formatting is given by a few easy commands:\nYou can also add in-line code by writing text between back-ticks:\nwill render as: Text with in-line code\nFor more commands, you can for example get a digested cheat-sheet here and a tutorial here.",
    "crumbs": [
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>Writing documents with Quarto</span>"
    ]
  },
  {
    "objectID": "15-quarto.html#what-is-markdown",
    "href": "15-quarto.html#what-is-markdown",
    "title": "\n14  Writing documents with Quarto\n",
    "section": "",
    "text": "# Title\n## sub-title\n### sub-sub-title\n...\n###### sub_6-title\n**bold**\n*italic*\n[link](http://google.com/)\n![image caption](image.png)\n\nTable:\n|   |   |\n|---|---|\n|   |   |\n\nUnordered list:\n- bla\n- bla bla\n\nOrdered list:\n1. bla\n1. bla bla\n\nLaTeX code: $\\int_{-\\infty}^{\\infty} e^{-x^2}=\\sqrt{\\pi}$\n\nHTML code: &lt;a href=\"some_link\"&gt;text&lt;/a&gt;\n\nText with `in-line code`",
    "crumbs": [
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>Writing documents with Quarto</span>"
    ]
  },
  {
    "objectID": "15-quarto.html#and-quarto",
    "href": "15-quarto.html#and-quarto",
    "title": "\n14  Writing documents with Quarto\n",
    "section": "\n14.2 … and Quarto?",
    "text": "14.2 … and Quarto?\nQuarto is basically the same thing as markdown (extension: .qmd instead of .md), with the difference that code chunks in which you specify the language between accolades will be computed and the result will be displayed.\n```r\n# Not computed\n1+1\n```\n```{r}\n# Computed\n1+1\n```\n\n\n#&gt; [1] 2\n\n\nAnd in-line code can be computed and rendered:\nIn-line code `{r} 1+2`\nwill render as: In-line code 3.\nThis very webpage is fully written in Quarto (see the “View book source” at the bottom of the left sidebar).\nQuarto supports a number of languages:\n\nnames(knitr::knit_engines$get())\n\n#&gt;  [1] \"awk\"       \"bash\"      \"coffee\"    \"gawk\"      \"groovy\"    \"haskell\"  \n#&gt;  [7] \"lein\"      \"mysql\"     \"node\"      \"octave\"    \"perl\"      \"php\"      \n#&gt; [13] \"psql\"      \"Rscript\"   \"ruby\"      \"sas\"       \"scala\"     \"sed\"      \n#&gt; [19] \"sh\"        \"stata\"     \"zsh\"       \"asis\"      \"asy\"       \"block\"    \n#&gt; [25] \"block2\"    \"bslib\"     \"c\"         \"cat\"       \"cc\"        \"comment\"  \n#&gt; [31] \"css\"       \"ditaa\"     \"dot\"       \"embed\"     \"eviews\"    \"exec\"     \n#&gt; [37] \"fortran\"   \"fortran95\" \"go\"        \"highlight\" \"js\"        \"julia\"    \n#&gt; [43] \"python\"    \"R\"         \"Rcpp\"      \"sass\"      \"scss\"      \"sql\"      \n#&gt; [49] \"stan\"      \"targets\"   \"tikz\"      \"verbatim\"  \"ojs\"       \"mermaid\"\n\n\nAnd python and R code chunks can communicate thanks to the reticulate package.\nSo… are you starting to see the power of this tool…?\nBasically, you can use the best language for each task and combine it in a single Rmd file that will display text and images that are computed at each compilation of the qmd file: you can fully automatize your data treatment and reporting.\nExample:\n\nChunk 1: bash, call a program that creates some files\nChunk 2: python, call a program that do some big computation on these files\nChunk 3: R, do some data treatment, plot the data",
    "crumbs": [
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>Writing documents with Quarto</span>"
    ]
  },
  {
    "objectID": "15-quarto.html#further-readings-and-ressources",
    "href": "15-quarto.html#further-readings-and-ressources",
    "title": "\n14  Writing documents with Quarto\n",
    "section": "\n14.3 Further readings and ressources",
    "text": "14.3 Further readings and ressources\nThere are numerous ressources out there to help you on your Rmarkdown journey:\n\nQuarto website\nQuarto cheatsheet\n\nThe Quarto gallery: to help you chose between formats and templates, with example codes\n\nI also provide a collection of Quarto and Rmarkdown examples on the github repo of this class:\n\nHTML outputs:\n\nSimple page\nDashboard\nGitbook\nBS4 book (like this course)\nBook\nioslide\n\n\nPDF outputs:\n\nOne- and two-columns documents with template\nBeamer presentation\nBook\nExercises with hidden solution\nData-driven CV\nWith Quarto\n\n\nMicrosoft Office outputs:\n\nPowerPoint\nWord (with template)",
    "crumbs": [
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>Writing documents with Quarto</span>"
    ]
  },
  {
    "objectID": "15-quarto.html#example-Rmd",
    "href": "15-quarto.html#example-Rmd",
    "title": "\n14  Writing documents with Quarto\n",
    "section": "\n14.4 Example",
    "text": "14.4 Example\nDownload biblio.bib and nature.csl and put them at the root of your project.\nCreate an example.Rmd file with the following YAML header (the indentation is important):\n---\ntitle  : Your Title\nauthor : John Doe\ndate-modified : last-modified\nformat:\n  html:\n        toc            : true\n        toc-location   : left\n        highlight-style: tango\n        number-sections: false\n        code-fold      : true\n        code-overflow  : wrap\nbibliography: \"biblio.bib\"\ncsl         : \"nature.csl\"\n---\nHow to understand this header:\n\n\n---: surrounds the YAML header. The body comes after that.\n\ntitle, author and date-modified: easy. The date can automatically be set to the current one by setting it to:\n\nformat: this tells Quarto the output format you want. When compiling, in case there are multiple entries, the compiler will only look to the first one. Click the links below to see more options.\n\nOutput formats allowed:\n\nhtml\ndocx\npdf\nbeamer\njupyter\n…\n\n\nBelow and indented, you can supply a series of options for the output format. Here, the table of contents will be on the left, the code will be highlighted with the tango style, the sections will not be numbered, the code will be folded and the code will wrap if it is too long.\n\n\n\nbibliography: path to your .bib file. To create a bibliography, add a # References header at the end of your document.\n\ncsl: path to the bibliography style for the output – in this example, nature.csl. Find your style or edit your own.\n\nNow you can start adding some content, like:\n---\ntitle: \"The title\"\nauthor: John Doe\ndate-modified: last-modified\nformat: \n  html:\n        toc: true\n        toc-location: left\n        highlight-style: tango\n        number-sections: false\n        code-fold: true\n        code-overflow: wrap\nexecute:\n  out-width: '75%'\n  fig-asp: 0.618034\n  fig-align: center\n  warning: false\n  message: false\n---\n\n# First section\n## First subsection\nI am writing _italic_ and __bold__ stuff.\n\n- This is an item\n- Another one with \n\nCitations are written like this `[@bevan_statistical_2013;@rcoreteam_language_2017]`\n\n# Second section\n## First subsection that I want to refer to {#sec-subsectionID}\n\nThis is a text with a footnote[^1].\n\nNow I can refer to my subsection using `@sec-subsectionID` like so:\nsection @sec-subsectionID. Or see [References](#references).\n\nThis is an image with a caption:\n\n```{r} \n#| label: fig-CHUNKname\n#| fig-cap: \"This is a very nice caption\"\nknitr::include_graphics(\"https://cdn.foliovision.com/images/2017/03/i-love-markdown.png\")\n```\n\nAnd I can refer to this figure using `@fig-CHUNKname`. \nExample : @fig-CHUNKname.\n\nHere is a code chunk in R in @fig-Rfigure:\n```{r}\n#| label: fig-Rfigure\n#| fig-cap: \"Test figure in R\"\nx &lt;- seq(0,10,.1)\nplot(x, sin(x), main=\"R plot\")\n```\n\nAnd one in python in @fig-Pythonfigure:\n```{python}\n#| label: fig-Pythonfigure\n#| fig-cap: \"Test figure in python\"\n# Load some libraries\nimport numpy as np\n# Matplotlib non interactive plots\nimport matplotlib.pyplot as plt\nN = 100\nx = np.linspace(0,10,N)\nplt.plot(x, np.sin(x))\nplt.title(\"Matplotlib Plot\")\nplt.ylabel(\"Y values\")\nplt.xlabel(\"X values\")\nplt.show()\n```\n\n# References\n\n[^1]: This is a footnote.\nNote that when you choose to output to an html format, you can’t use PDF images: use .svg (pdf2svg) or other non vectorial images.\nWhat’s nice with html output, it’s that you can include interactive figures with plotly like we saw in the previous sections. Of course, this won’t work with static documents like PDF or Word…",
    "crumbs": [
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>Writing documents with Quarto</span>"
    ]
  },
  {
    "objectID": "15-quarto.html#code-chunks-options",
    "href": "15-quarto.html#code-chunks-options",
    "title": "\n14  Writing documents with Quarto\n",
    "section": "\n14.5 Code chunks options",
    "text": "14.5 Code chunks options\nYou can add options to a code chunk, like:\n\n\necho: false: hide the code, show the output\n\ninclude: false: hide the code and the output\n\nwarnings: false: hide the warning messages\n\nerror: true: will compute the code chunk despite errors\n\ncache: true: cache the result of the chunk for faster re-compilation\n\nfig-asp: figure aspect ratio\n\nfig-caption: figure caption\n…and more",
    "crumbs": [
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>Writing documents with Quarto</span>"
    ]
  },
  {
    "objectID": "15-quarto.html#compilation",
    "href": "15-quarto.html#compilation",
    "title": "\n14  Writing documents with Quarto\n",
    "section": "\n14.6 Compilation",
    "text": "14.6 Compilation\nTo knit your qmd file to the desired output, in Rstudio, click the “Render” button.\nThe corresponding output file will be created in the same folder.",
    "crumbs": [
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>Writing documents with Quarto</span>"
    ]
  },
  {
    "objectID": "15-quarto.html#and-what-about-jupyter-notebooks",
    "href": "15-quarto.html#and-what-about-jupyter-notebooks",
    "title": "\n14  Writing documents with Quarto\n",
    "section": "\n14.7 And what about JuPyteR notebooks?",
    "text": "14.7 And what about JuPyteR notebooks?\nJuPyteR notebooks are basically a web-based interactive version or Rmarkdown/Quarto documents working with Julia, Python and R.\nQuarto can render JuPyteR notebooks, or convert between the two formats.",
    "crumbs": [
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>Writing documents with Quarto</span>"
    ]
  },
  {
    "objectID": "15-quarto.html#coming-from-rmarkdown",
    "href": "15-quarto.html#coming-from-rmarkdown",
    "title": "\n14  Writing documents with Quarto\n",
    "section": "\n14.8 Coming from Rmarkdown?",
    "text": "14.8 Coming from Rmarkdown?\nQuarto is fully compatible with Rmarkdown – it is an evolution of Rmarkdown. All your Rmd files should thus be directly compatible with quarto upon changing the extension name to qmd.",
    "crumbs": [
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>Writing documents with Quarto</span>"
    ]
  },
  {
    "objectID": "15-quarto.html#exo-rmd",
    "href": "15-quarto.html#exo-rmd",
    "title": "\n14  Writing documents with Quarto\n",
    "section": "\n14.9 Exercises",
    "text": "14.9 Exercises\nDownload the exercises and solutions from the following repository, then create a Rstudio project from the unzipped folder:\n\nQuarto and Rmd exercises",
    "crumbs": [
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>Writing documents with Quarto</span>"
    ]
  },
  {
    "objectID": "16-shiny.html",
    "href": "16-shiny.html",
    "title": "15  Graphical interfaces with Shiny",
    "section": "",
    "text": "15.1 Stand-alone shiny application\nA shiny application is an app.R file (it must be named like that) containing 3 elements:\nIn Rstudio, create a new “Shiny web app”. It will create an app.R file containing this:\nRun it by clicking “Run App”: a window opens and you can pan the slider and see the resulting output.\nIn case you want to clean up the code, you can separate app.R into ui.R and server.R. No need to add the shinyApp(ui = ui, server = server) line in that case.\nAll user-defined functions and variable definitions can be defined in a global.R file that will be sourced by default when launching the app.",
    "crumbs": [
      "<span class='chapter-number'>15</span>  <span class='chapter-title'>Graphical interfaces with Shiny</span>"
    ]
  },
  {
    "objectID": "16-shiny.html#stand-alone-shiny-application",
    "href": "16-shiny.html#stand-alone-shiny-application",
    "title": "15  Graphical interfaces with Shiny",
    "section": "",
    "text": "ui: definition of the interface layout (where are the buttons, text input, plot output, etc.) and the input parameters\nserver: definition of the various actions to perform with the input parameters\nshinyApp(ui, server): launches the shiny app with the above defined parameters\n\n\nlibrary(shiny)\n# Define UI for application that draws a histogram\nui &lt;- fluidPage(\n    # Application title\n    titlePanel(\"Old Faithful Geyser Data\"),\n    # Sidebar with a slider input for number of bins \n    sidebarLayout(\n        sidebarPanel(\n            sliderInput(\"bins\",\n                        \"Number of bins:\",\n                        min = 1,\n                        max = 50,\n                        value = 30)\n        ),\n        # Show a plot of the generated distribution\n        mainPanel(\n           plotOutput(\"distPlot\")\n        )\n    )\n)\n# Define server logic required to draw a histogram\nserver &lt;- function(input, output, session) {\n    output$distPlot &lt;- renderPlot({\n        # generate bins based on input$bins from ui.R\n        x    &lt;- faithful[, 2]\n        bins &lt;- seq(min(x), max(x), length.out = input$bins + 1)\n\n        # draw the histogram with the specified number of bins\n        hist(x, breaks = bins, col = 'darkgray', border = 'white')\n    })\n}\n# Run the application \nshinyApp(ui = ui, server = server)\n\n\n\n\n15.1.1 The layout\nIn the ui &lt;- fluidPage(...) item, you define the layout of your application. In the above example:\n\ntitlePanel(\"Title\") creates a title\nsidebarLayout() separates the layout in a short one on the left (sidebarPanel()) and a main one on the right (mainPanel())\nsliderInput(\"name_of_slider\", \"text to display\", min=min_value, max=max_value, value=current_value, step=step_value) creates a slider to input a value. This value will be retrieved by input$name_of_slider in the server() function.\nplotOutput(\"name_of_plot\") plots the result of output$name_of_plot defined in the server() function.\n\nSee the guide to application layout for more layout options. I also recommend taking a look at the packages shinydashboard and shinymaterial.\n\n\n15.1.2 The server\nIn the server &lt;- function(input, output){...} function, you define the various actions and outputs in reaction to an input change.\nIn the above example, we define output$distPlot as a renderPlot() function whose results depends on input$bins. The plot is rendered in the ui by plotOutput(\"distPlot\").\n\n\n15.1.3 Various useful functions\n\n\nInput\n\nButtons\nCheckbox\nText/numeric\nSlider\nFile\nDropdown menu\n\nOutput\n\nDisplay a plot\nDisplay text\nDisplay a table\nReactive events\nWriting a file\n\n\n\n\n\n15.1.3.1 Input\n\n\n15.1.3.1.1 Buttons\n# # # # # # # # # \n# In ui:\nactionButton(\"button_name\", \"Text to display\")\n# # # # # # # # # \n# In server:\nobserveEvent(input$button_name, {\n    # do something\n})\n# or\nsome_function &lt;- eventReactive(input$button_name, {\n                               # do something\n                               })\n\n\n15.1.3.1.2 Checkbox\n# # # # # # # # # \n# In ui:\ncheckboxInput(\"checkbox_name\", \"Text to display\", value=FALSE)\n# # # # # # # # # \n# In server:\ninput$checkbox_name #TRUE or FALSE\n\n\n\n15.1.3.1.3 Text/numeric\n# # # # # # # # # \n# In ui:\ntextInput(\"text_name\", \n            label = \"Text to display\", \n            value = \"initial value\", \n            width = '100%')\n\ntextAreaInput(\"text_name\", \n            label=\"Text to display\", \n            value = \"initial_value\", \n            rows = 5) %&gt;%\n            shiny::tagAppendAttributes(style = 'width: 100%;')\n\nnumericInput(\"value_name\", 'Text to display', value=0)\n# # # # # # # # # \n# In server, retrieve it as:\ninput$text_name\ninput$value_name\n\n\n\n15.1.3.1.4 Slider\n# # # # # # # # # \n# In ui:\nsliderInput(\"slider_name\", \"Text to display\",\n            min = 1,\n            max = 50,\n            step= 1,\n            value = 30)\n# # # # # # # # # \n# In server, retrieve it as:\ninput$slider_name\n\n\n\n15.1.3.1.5 File\n# # # # # # # # # \n# In ui:\nfileInput(\"file_in\", \n          \"Choose input file:\", accept = c(\".txt\") \n          )\n# # # # # # # # # \n# In server, retrieve it as:\ninput$file_in$datapath\n# For example, read it as a data.frame with myData():\nmyData &lt;- reactive({\n        inFile &lt;- input$file_in\n        if (is.null(inFile)) {\n            return(NULL)\n        } else {\n            return(read.table(inFile$datapath, header=TRUE))\n        }\n    })\n\n\n\n15.1.3.1.6 Dropdown menu\n# # # # # # # # # \n# In ui:\nselectInput(\"menu_name\", \"Text to display\", \n            choices=c(\"choice 1\", \"choice 2\"), \n            multiple = FALSE # multiple selection possible\n            )\n# # # # # # # # # \n# In server, retrieve it as:\ninput$menu_name\n\n\n\n\n15.1.3.2 Output\n\n\n15.1.3.2.1 Display a plot\n# # # # # # # # # \n# In ui:\nplotOutput(\"plot_name\", height = 600,\n           click = \"plot_click\", # to retrieve the click position\n           dblclick = \"plot_dblclick\", # to retrieve the double click position\n           hover = \"plot_hover\", # to retrieve the mouse position\n           brush = \"plot_brush\" # to retrieve the rectangle coordinates\n           )\n# # # # # # # # # \n# In server:\noutput$plot_name &lt;- renderPlot({\n        # do plot:\n        plot(...)\n        # or\n        ggplot(...)\n    })\nIf you want an interactive plot, use plotlyOutput() and renderPlotly() instead.\n\n\n\n15.1.3.2.2 Display text\n# # # # # # # # # \n# In ui:\ntextOutput(\"text_to_display\")\n# Verbatim text (fixed width characters):\nverbatimTextOutput(\"text_to_display\")\n# # # # # # # # # \n# In server:\noutput$text_to_display &lt;- renderText({ \"some text\" })\noutput$text_to_display &lt;- renderPrint({ \"some text\" })\n\n\n\n15.1.3.2.3 Display a table\n# # # # # # # # # \n# In ui:\ntableOutput(\"table_to_display\")\n# # # # # # # # # \n# In server:\noutput$table_to_display &lt;- renderTable({ df })\nOr in case you want interactive tables, use the package datatable:\nlibrary(DT)\n# # # # # # # # # \n# In ui:\ndataTableOutput(\"table_to_display\")\n# # # # # # # # # \n# In server:\noutput$table_to_display &lt;- renderDataTable({ df })\n\n\n\n15.1.3.2.4 Reactive events\nIn case you want the plots or text display to react to a change in input value, you can wrap the corresponding code in the reactive() function on the server side:\n# # # # # # # # # \n# In ui:\nfileInput(\"file_in\", \n          \"Choose input file:\", accept = c(\".txt\") \n          ),\ncheckboxInput(\"header\", \"Header?\", value=TRUE),\nselectInput(\"menu\", \"Columns to display\", \n            choices=1, selected = 1, multiple = TRUE),\ntableOutput(\"table\")\n# # # # # # # # # \n# In server:\nmyData &lt;- reactive({\n        inFile &lt;- input$file_in\n        if (is.null(inFile)) {\n            return(NULL)\n        } else {\n            df &lt;- read.table(inFile$datapath, header=input$header)\n            updateSelectInput(session, \"menu\", choices=1:ncol(df), selected=input$menu)\n            return(df)\n        }\n    })\noutput$table &lt;- renderTable( myData()[,sort(as.numeric(input$menu))] )\nThe various input default values can be updated using the following functions on the server side:\n# Dropdown menu\nupdateSelectInput(session, \"menu_name\", choices=new_choices)\n# Text\nupdateTextInput(session, \"text_name\", value = new_value)\n# Numeric\nupdateNumericInput(session, \"value_name\", value = new_value)\n\n\n\n15.1.3.2.5 Writing a file\nThis is not a function of shiny, but you may want to write a text file. If this comes from a data.frame, you can use the function write.table():\ndf &lt;- data.frame(x=1:10,y=sin(1:10))\nwrite.table(df, \"test.dat\", quote=FALSE, row.names=FALSE)\nFor other forms of printing, look into the write() function:\ntoprint &lt;- paste(\"hello\", \"world\")\noutfile &lt;- file(\"file_name.txt\", encoding=\"UTF-8\")\nwrite(toprint, file=outfile)\nclose(outfile)\nYou can for example write a Rmd file that you will render (as pdf, etc…) using render():\nrmarkdown::render(\"file_name.Rmd\")\n\n\n\n\n\n15.1.4 Example\nCreate a new shiny app with the following code, and play around with it. The input file should be the tidy population.txt.\nlibrary(shiny)\nlibrary(tidyverse)\nlibrary(plotly)\nlibrary(DT)\n\nui &lt;- fluidPage(\n    titlePanel(\"City population in France\"),\n    sidebarLayout(\n        sidebarPanel(\n            fileInput(\"file_in\", \"Choose input file:\",\n                      accept = c(\".txt\") ),\n            selectInput(\"sel_city\", \"City:\", choices = \"\", multiple = TRUE)\n        ),\n        mainPanel(\n            tabsetPanel(\n                tabPanel(\"Plot\", plotlyOutput(\"cityplot\", height = \"400px\")),\n                tabPanel(\"Table\", dataTableOutput(\"table\"))\n            )\n        )\n    )\n)\n\nserver &lt;- function(input, output, session) {\n\n    # myData() returns the data if a file is provided\n    myData &lt;- reactive({\n        inFile &lt;- input$file_in\n        if (is.null(inFile)) {\n            return(NULL)\n        } else {\n            df &lt;- read.table(inFile$datapath, header=TRUE)\n            # in case something changes,\n            # update the city input selection list\n            updateSelectInput(session, \"sel_city\",\n                              choices = unique(df$city),\n                              selected = unique(df$city)[1])\n            return(df)\n        }\n    })\n\n    # plot the pop vs year for the selected cities\n    output$cityplot &lt;- renderPlotly({\n        df &lt;- myData()\n        if(is.null(df)) return(NULL)\n        p &lt;- df %&gt;% \n            filter(city %in% input$sel_city) %&gt;%\n            ggplot(aes(x=year, y=pop, size=pop, color=city)) +\n                geom_point() +\n                geom_smooth(method=\"lm\", alpha=0.1,\n                            show.legend = FALSE,\n                            aes(fill=city)) +\n                ggtitle(paste0(\"Population in \",\n                               paste(input$sel_city, collapse = \", \")\n                               ))+\n                labs(x=\"Year\", y=\"Population\")+\n                theme_light()\n        ggplotly(p, dynamicTicks = TRUE)\n    })\n\n    # show data as a table\n    output$table &lt;- renderDataTable({\n        df &lt;- myData() %&gt;% filter(city %in% input$sel_city)\n        if(is.null(df)) return(NULL)\n        df &lt;- pivot_wider(df, names_from=year, values_from=pop)\n        datatable(df, rownames = FALSE)\n    })\n\n}\n\nshinyApp(ui = ui, server = server)\nThis will render like this.",
    "crumbs": [
      "<span class='chapter-number'>15</span>  <span class='chapter-title'>Graphical interfaces with Shiny</span>"
    ]
  },
  {
    "objectID": "16-shiny.html#rmarkdown-embedded-shiny-application",
    "href": "16-shiny.html#rmarkdown-embedded-shiny-application",
    "title": "15  Graphical interfaces with Shiny",
    "section": "15.2 Rmarkdown-embedded shiny application",
    "text": "15.2 Rmarkdown-embedded shiny application\nA shiny application can even be embedded inside a Rmarkdown document by providing runtime: shiny in the YAML header. A short example here, try to compile it:\n---\ntitle: \"Test\"\noutput: html_document\nruntime: shiny\n---\n\nThis is a test Rmarkdown document.\n\n`r ''````{r, echo=FALSE, message=FALSE}\nlibrary(ggplot2)\nlibrary(plotly)\ndf &lt;- read.table(\"Data/population.txt\", header=TRUE)\n\n\nshinyApp(\n  ui = fluidPage(\n    selectInput(\"city\", \"City:\", choices = unique(df$city)),\n    plotlyOutput(\"cityplot\", height = 600)\n  ),\n\n  server = function(input, output) {\n    output$cityplot = renderPlotly({\n      p &lt;- ggplot(data=subset(df,city==input$city), \n                aes(x=year, y=pop, size=pop)) +\n            geom_point() + \n            geom_smooth(method=\"lm\", alpha=0.1, show.legend = FALSE) + \n            ggtitle(paste(\"Population in \",input$city,sep=\"\"))+\n            labs(x=\"Year\", y=\"Population\")+\n            theme_light()\n      ggplotly(p)\n    })\n  }\n)\n```\nThe only “problem” with this solution is that the html file that is produced will not run the shiny app by itself, you have to open the Rmd file in Rstudio and hit “Run Document”.\nAnother solution consists in deploying your app on shinyapps.io and embedding the page in your document with:\n`r ''````{r, echo=FALSE}\nknitr::include_app(\"https://cbousige.shinyapps.io/shiny_example/\", \n                    height = \"800px\")\n```",
    "crumbs": [
      "<span class='chapter-number'>15</span>  <span class='chapter-title'>Graphical interfaces with Shiny</span>"
    ]
  },
  {
    "objectID": "16-shiny.html#deploying-your-shiny-app",
    "href": "16-shiny.html#deploying-your-shiny-app",
    "title": "15  Graphical interfaces with Shiny",
    "section": "15.3 Deploying your shiny app",
    "text": "15.3 Deploying your shiny app\nThere are 4 ways to deploy your app: passing the app.R file to your users, deploying to shinyapps.io, deploying on your own server, or building an executable with Electron.\n\n\n15.3.1 Passing the app.R file to your users\nThis option is certainly easy: just send your app.R file (or Rmd file with shiny embedded app) as well as any other files needed (e.g. global.R) to your users, explain to them how to run it, and voilà.\nHowever, this needs a little bit of know-how from the users: they need to install R and Rstudio, install the needed packages, and run the app.\nA good option to remove the “package-installing” step is to define a function check.package() that will check if the package is installed, install it if needed, and load it:\ncheck.packages &lt;- function(pkg){\n    new.pkg &lt;- pkg[!(pkg %in% installed.packages()[, \"Package\"])]\n    if (length(new.pkg)) \n        install.packages(new.pkg, dependencies = TRUE)\n    sapply(pkg, require, character.only = TRUE)\n}\n# Usage:\ncheck.packages(\"ggplot2\")\n\n\n\n15.3.2 Deploying to shinyapps.io\nApplications deployed on shinyapps.io will be accessible from anywhere through a weblink. See for example my application to determine the pressure from a ruby Raman spectrum or the expected Raman shift for a given pressure and laser wavelength. Your application will however be public and you will have some limitations in the number of online applications and time of use (if you don’t pay a fee, see here for the various plans).\n\nFirst, create an account on shinyapps.io\nFollow the steps described here to:\n\nConfigure RSconnect: in your shinyapps.io dashboard, click your name, then Tokens, and create a token for a new app. Copy the text in the popup window.\nDeploy the app from the Rstudio window by clicking on the “Publish” button in the top right corner of the interface. Follow the steps along the shinyapps.io way.\n\n\nNote that in that case, you should not have any install.package() command in your code. Most packages are supported by shinyapps.io.\n\n\n\n15.3.3 Deploying on your own Linux server\nThis option is more advanced and I’m not going into details for that, but you have a number of tutorials online. See e.g. here, here or here.\nYou might consider this option if you work in a company that want to handle privately its data (which sounds plausible) and not pay the shinyapps.io fee to password protect the app. In that case, just work with the IT department to get it running.\n\n\n\n15.3.4 Building an executable\nOn Windows, there is this possibility that looks nice but that I never tried because I don’t have Windows: RInno.\nOn any platform: there is the possibility described here with the corresponding github page. This option is actually awesome and a quite recent possibility. However, since the produced application will contain R and the needed packages, the executable file is quite heavy.",
    "crumbs": [
      "<span class='chapter-number'>15</span>  <span class='chapter-title'>Graphical interfaces with Shiny</span>"
    ]
  },
  {
    "objectID": "16-shiny.html#further-reading",
    "href": "16-shiny.html#further-reading",
    "title": "15  Graphical interfaces with Shiny",
    "section": "15.4 Further reading",
    "text": "15.4 Further reading\n\nThe Shiny cheatsheet\nHelp on deploying your shiny app\nGuide to application layout\nThe Shiny Gallery: find what you want to do and adapt it to your needs\nThe official Shiny video tutorial",
    "crumbs": [
      "<span class='chapter-number'>15</span>  <span class='chapter-title'>Graphical interfaces with Shiny</span>"
    ]
  },
  {
    "objectID": "16-shiny.html#exo-shiny",
    "href": "16-shiny.html#exo-shiny",
    "title": "15  Graphical interfaces with Shiny",
    "section": "15.5 Exercises",
    "text": "15.5 Exercises\n\n\nExercise 1\n\n\nCreate a new empty app with a blank user-interface and run it.\nAdd a title, a left panel and a main panel\nAdd an input numerical value defaulting to 1 and with a step of 0.05, name it “bw”\nAdd a slider input from 0 to 1e3 by steps of 1e2 defaulting to 5e2, name it “N_val”\nAdd a plot of the density of rnorm(N_val) with bandwidth bw\nMake sure bw&gt;0, otherwise don’t produce the plot\n\n\n\nSolution\n\nlibrary(shiny)\n\nui &lt;- fluidPage(\n    titlePanel(\"Some title\"),\n    sidebarLayout(\n        sidebarPanel(\n            numericInput(\"bw\", \"Enter bandwidth:\", 1, step=0.05),\n            sliderInput(\"N_val\", \"Number of points:\", \n                        min = 0, max = 1e4, step= 1e2, value = 5e2)\n        ),\n        mainPanel(\n            plotOutput(\"plot\", height = 600)\n        )\n    )\n)\n\nserver &lt;- function(input, output, session) {\n    output$plot &lt;- renderPlot({\n                        if(input$bw==0) return(NULL)\n                        plot(density(rnorm(input$N_val), bw=abs(input$bw)))\n                    })\n}\n\nshinyApp(ui = ui, server = server)\n\n\n\n\nExercise 2\n\nCreate a shiny application that will:\n\nread an input (through a file dialog) Raman spectrum from a ruby (XPdata.zip)\nfit the data by two Lorentzians\nplot the data interactively\nask for the laser wavelength as an input and give 568.189 nm as default\nwrite the corresponding pressure on the page using the Pruby() function defined in myfunc.R found in XPdata.zip.\ninsert a button that will, when pressed, render a pdf report displaying the laser wavelength, the plot, the fit and the pressure found:\n\nwrite a separate Rmd file with the proper parameters\nrender the Rmd file as a pdf (see the render() function and this help)",
    "crumbs": [
      "<span class='chapter-number'>15</span>  <span class='chapter-title'>Graphical interfaces with Shiny</span>"
    ]
  },
  {
    "objectID": "17-units.html",
    "href": "17-units.html",
    "title": "\n16  Working with units and experimental errors\n",
    "section": "",
    "text": "16.1 Working with units\nIt is easy to work with units in R thanks to the package units (see vignette).\nWorking with the units package can prove a very good idea to avoid conversion errors in your data treatment…\nHere is the gist of it:\n# Load the 'units' library\nlibrary(units)\nt &lt;- seq(0.1,1,length=3)\n# attribute a unit, here 'seconds':\nt &lt;- set_units(t, \"s\") \nt\n\n#&gt; Units: [s]\n#&gt; [1] 0.10 0.55 1.00\nAnd it works with the pipe too:\nt &lt;- seq(0.1,1,length=3) |&gt; set_units(\"s\")\nt\n\n#&gt; Units: [s]\n#&gt; [1] 0.10 0.55 1.00\nd1    &lt;- seq(1,2,length=3) |&gt; set_units(\"m\")\n(tib1 &lt;- tibble(t=t, d=d1, speed=d1/t))\n\n#&gt; # A tibble: 3 × 3\n#&gt;      t   d speed\n#&gt;    [s] [m] [m/s]\n#&gt; 1 0.1  1   10   \n#&gt; 2 0.55 1.5  2.73\n#&gt; 3 1    2    2\n\nd2    &lt;- seq(0.1, .3, length=3) |&gt; set_units(\"cm\")\n(tib2 &lt;- tibble(t=t, d=d2, speed=d2/t))\n\n#&gt; # A tibble: 3 × 3\n#&gt;      t    d  speed\n#&gt;    [s] [cm] [cm/s]\n#&gt; 1 0.1   0.1  1    \n#&gt; 2 0.55  0.2  0.364\n#&gt; 3 1     0.3  0.3\n\nbind_rows(tib1,tib2)\n\n#&gt; # A tibble: 6 × 3\n#&gt;      t     d    speed\n#&gt;    [s]   [m]    [m/s]\n#&gt; 1 0.1  1     10      \n#&gt; 2 0.55 1.5    2.73   \n#&gt; 3 1    2      2      \n#&gt; 4 0.1  0.001  0.01   \n#&gt; 5 0.55 0.002  0.00364\n#&gt; 6 1    0.003  0.003\nT &lt;- set_units(1, \"fs\")\nset_units(1/T, \"THz\")\n\n#&gt; 1000 [THz]\n\n1/T |&gt; set_units(THz)\n\n#&gt; 0.001 [1/THz]\n\nunits(T) &lt;- \"ns\"; T\n\n#&gt; 1e-06 [ns]\nUNIT &lt;- \"m\"\nset_units(1:10, UNIT)\n\n#&gt; Error: In 'UNIT', 'UNIT' is not recognized by udunits.\n#&gt; \n#&gt; See a table of valid unit symbols and names with valid_udunits().\n#&gt; Custom user-defined units can be added with install_unit().\n#&gt; \n#&gt; See a table of valid unit prefixes with valid_udunits_prefixes().\n#&gt; Prefixes will automatically work with any user-defined unit.\n\nset_units(1:10, UNIT, mode=\"standard\")\n\n#&gt; Units: [m]\n#&gt;  [1]  1  2  3  4  5  6  7  8  9 10\n\nset_units(1:10, units(T), mode=\"standard\")\n\n#&gt; Units: [ns]\n#&gt;  [1]  1  2  3  4  5  6  7  8  9 10\nlibrary(tidyverse)\nstarwars\n\n#&gt; # A tibble: 87 × 14\n#&gt;    name     height  mass hair_color skin_color eye_color birth_year sex   gender\n#&gt;    &lt;chr&gt;     &lt;int&gt; &lt;dbl&gt; &lt;chr&gt;      &lt;chr&gt;      &lt;chr&gt;          &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; \n#&gt;  1 Luke Sk…    172    77 blond      fair       blue            19   male  mascu…\n#&gt;  2 C-3PO       167    75 &lt;NA&gt;       gold       yellow         112   none  mascu…\n#&gt;  3 R2-D2        96    32 &lt;NA&gt;       white, bl… red             33   none  mascu…\n#&gt;  4 Darth V…    202   136 none       white      yellow          41.9 male  mascu…\n#&gt;  5 Leia Or…    150    49 brown      light      brown           19   fema… femin…\n#&gt;  6 Owen La…    178   120 brown, gr… light      blue            52   male  mascu…\n#&gt;  7 Beru Wh…    165    75 brown      light      blue            47   fema… femin…\n#&gt;  8 R5-D4        97    32 &lt;NA&gt;       white, red red             NA   none  mascu…\n#&gt;  9 Biggs D…    183    84 black      light      brown           24   male  mascu…\n#&gt; 10 Obi-Wan…    182    77 auburn, w… fair       blue-gray       57   male  mascu…\n#&gt; # ℹ 77 more rows\n#&gt; # ℹ 5 more variables: homeworld &lt;chr&gt;, species &lt;chr&gt;, films &lt;list&gt;,\n#&gt; #   vehicles &lt;list&gt;, starships &lt;list&gt;\n\nstarwars |&gt; \n    mutate(height = set_units(height,\"cm\"),\n           mass   = set_units(mass,\"kg\"))\n\n#&gt; # A tibble: 87 × 14\n#&gt;    name     height mass hair_color  skin_color eye_color birth_year sex   gender\n#&gt;    &lt;chr&gt;      [cm] [kg] &lt;chr&gt;       &lt;chr&gt;      &lt;chr&gt;          &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; \n#&gt;  1 Luke Sk…    172   77 blond       fair       blue            19   male  mascu…\n#&gt;  2 C-3PO       167   75 &lt;NA&gt;        gold       yellow         112   none  mascu…\n#&gt;  3 R2-D2        96   32 &lt;NA&gt;        white, bl… red             33   none  mascu…\n#&gt;  4 Darth V…    202  136 none        white      yellow          41.9 male  mascu…\n#&gt;  5 Leia Or…    150   49 brown       light      brown           19   fema… femin…\n#&gt;  6 Owen La…    178  120 brown, grey light      blue            52   male  mascu…\n#&gt;  7 Beru Wh…    165   75 brown       light      blue            47   fema… femin…\n#&gt;  8 R5-D4        97   32 &lt;NA&gt;        white, red red             NA   none  mascu…\n#&gt;  9 Biggs D…    183   84 black       light      brown           24   male  mascu…\n#&gt; 10 Obi-Wan…    182   77 auburn, wh… fair       blue-gray       57   male  mascu…\n#&gt; # ℹ 77 more rows\n#&gt; # ℹ 5 more variables: homeworld &lt;chr&gt;, species &lt;chr&gt;, films &lt;list&gt;,\n#&gt; #   vehicles &lt;list&gt;, starships &lt;list&gt;\np &lt;- starwars |&gt; \n    mutate(height = set_units(height,\"cm\"),\n           mass   = set_units(mass,\"kg\")) |&gt; \n    filter(sex != \"hermaphroditic\") |&gt;\n    ggplot(aes(x=height, y=mass, color=sex))+\n        geom_point(size=2)+\n        labs(x=\"Height\", y=\"Mass\")\np\n\n\n\n\n\n\np + ggforce::scale_x_unit(unit = \"inches\") +\n    ggforce::scale_y_unit(unit = \"pounds\")",
    "crumbs": [
      "<span class='chapter-number'>16</span>  <span class='chapter-title'>Working with units and experimental errors</span>"
    ]
  },
  {
    "objectID": "17-units.html#working-with-units",
    "href": "17-units.html#working-with-units",
    "title": "\n16  Working with units and experimental errors\n",
    "section": "",
    "text": "When possible, automatic units conversion is performed. Also, it is possible to attribute units to columns of tibbles and data.frames:\n\n\n\nYou can moreover convert between units systems using set_units(vector, \"unit\") or units(vector) &lt;- \"unit\":\n\n\n\nSometimes, you may define the unit outside of the set_units() call and want to retrieve it, or use a unit from another variable in a new variable. For this, use the mode=\"standard\" option:\n\n\n\nYou can give units to table columns:\n\n\n\nYou can plot using units and easily convert between units while plotting:",
    "crumbs": [
      "<span class='chapter-number'>16</span>  <span class='chapter-title'>Working with units and experimental errors</span>"
    ]
  },
  {
    "objectID": "17-units.html#working-with-experimental-errors",
    "href": "17-units.html#working-with-experimental-errors",
    "title": "\n16  Working with units and experimental errors\n",
    "section": "\n16.2 Working with experimental errors",
    "text": "16.2 Working with experimental errors\nWhen working in experimental science, you have to account for measurement errors and error propagation all along your data treatment. This is made really easy thanks to the quantities package that gathers the error and units packages. Most importantly, this allows you propagating the errors in the proper way. So, you input your experimental error once, and you don’t have to think about it anymore. Neat, isn’t it?\nHere is the gist of it:\n\nlibrary(quantities)\noptions(errors.notation=\"plus-minus\", errors.digits=4)\na &lt;- set_errors(1, 0.1)\nb &lt;- 2 |&gt; set_errors(0.2)\na+b\n\n#&gt; 3.0000 ± 0.2236\n\na*b\n\n#&gt; 2.0000 ± 0.2828\n\na^3\n\n#&gt; 1.0000 ± 0.3000\n\nerrors(a)\n\n#&gt; [1] 0.1\n\nerrors_min(a)\n\n#&gt; [1] 0.9\n\nerrors_max(a)\n\n#&gt; [1] 1.1\n\n\nIt thus becomes easy to plot the error bars from your experimental data. I recommend using the ggforce library to make ggplot2 work better with quantities:\n\nlibrary(ggforce)\noptions(errors.notation=\"parenthesis\", errors.digits=1)\nstarwars |&gt; \n    mutate(height=set_quantities(height,\"cm\",height*.05),\n           mass=set_quantities(mass,\"kg\",mass*.05)\n           )\n\n#&gt; # A tibble: 87 × 14\n#&gt;    name         height     mass hair_color skin_color eye_color birth_year sex  \n#&gt;    &lt;chr&gt;      (err) [… (err) [… &lt;chr&gt;      &lt;chr&gt;      &lt;chr&gt;          &lt;dbl&gt; &lt;chr&gt;\n#&gt;  1 Luke Skyw…   172(9)    77(4) blond      fair       blue            19   male \n#&gt;  2 C-3PO        167(8)    75(4) &lt;NA&gt;       gold       yellow         112   none \n#&gt;  3 R2-D2         96(5)    32(2) &lt;NA&gt;       white, bl… red             33   none \n#&gt;  4 Darth Vad…  200(10)   136(7) none       white      yellow          41.9 male \n#&gt;  5 Leia Orga…   150(8)    49(2) brown      light      brown           19   fema…\n#&gt;  6 Owen Lars    178(9)   120(6) brown, gr… light      blue            52   male \n#&gt;  7 Beru Whit…   165(8)    75(4) brown      light      blue            47   fema…\n#&gt;  8 R5-D4         97(5)    32(2) &lt;NA&gt;       white, red red             NA   none \n#&gt;  9 Biggs Dar…   183(9)    84(4) black      light      brown           24   male \n#&gt; 10 Obi-Wan K…   182(9)    77(4) auburn, w… fair       blue-gray       57   male \n#&gt; # ℹ 77 more rows\n#&gt; # ℹ 6 more variables: gender &lt;chr&gt;, homeworld &lt;chr&gt;, species &lt;chr&gt;,\n#&gt; #   films &lt;list&gt;, vehicles &lt;list&gt;, starships &lt;list&gt;\n\nstarwars |&gt; \n    mutate(height=set_quantities(height,\"cm\",height*.05),\n           mass=set_quantities(mass,\"kg\",mass*.05)\n           ) |&gt; \n    filter(sex!=\"hermaphroditic\") |&gt; \n    ggplot(aes(x=height, y=mass, color=sex))+\n        geom_point(size=2)+\n        labs(x=\"Height\", y=\"Mass\")+\n        geom_errorbar(aes(ymin=errors_min(mass),\n                          ymax=errors_max(mass)))+\n        geom_errorbarh(aes(xmin=errors_min(height),\n                           xmax=errors_max(height)))",
    "crumbs": [
      "<span class='chapter-number'>16</span>  <span class='chapter-title'>Working with units and experimental errors</span>"
    ]
  },
  {
    "objectID": "17-units.html#using-pysical-constants",
    "href": "17-units.html#using-pysical-constants",
    "title": "\n16  Working with units and experimental errors\n",
    "section": "\n16.3 Using pysical constants",
    "text": "16.3 Using pysical constants\nNow that we know how to work with units, it becomes super easy to use physical constants in our calculations. The constants package comes with a lot of physical constants defined with their units and errors:\n\nlibrary(constants)\nlibrary(units)\n# Boltzmann constant\nsyms_with_units$k\n\n#&gt; 1.380649e-23 [J/K]\n\nsyms_with_units$k |&gt; set_units(meV/K)\n\n#&gt; 0.0861733 [meV/K]\n\n# Planck constant\nsyms_with_units$h\n\n#&gt; 6.62607e-34 [J/Hz]\n\nsyms_with_units$hbar\n\n#&gt; 1.054572e-34 [J*s]\n\n# Avogadro number: find the symbol\nlookup(\"Avogadro\")\n\n#&gt;    symbol          quantity                             type        value\n#&gt; 36     na Avogadro constant Physico-chemical, Adopted values 6.022141e+23\n#&gt;    uncertainty  unit\n#&gt; 36           0 1/mol\n\nsyms_with_units$na\n\n#&gt; 6.022141e+23 [1/mol]",
    "crumbs": [
      "<span class='chapter-number'>16</span>  <span class='chapter-title'>Working with units and experimental errors</span>"
    ]
  },
  {
    "objectID": "18-exercises.html",
    "href": "18-exercises.html",
    "title": "17  List of exercises",
    "section": "",
    "text": "The solutions are only available after the correction is done in class.\n\n\n\nExercise\nSolution\n\n\n\n\nBasicsdata.frame manipulation, simple plots and linear fits\nSolution\n\n\nFTIR dataReading data, plotting curves\nSolution\n\n\nSpectroscopic data 1Reading data, plotting and stacking curves\nSolution\n\n\nSpectroscopic data 2Reading data, fitting, plotting and stacking curves\nSolution\n\n\nTGA dataLoading a complicated text file, derivative and plotting\nSolution\n\n\nPeapodsReading data, fitting, plotting and stacking curves\nSolution\n\n\nCO2 emissionsData wrangling and ggplot2\nSolution\n\n\nCognitive PsychologyData wrangling and ggplot2\nSolution\n\n\nG(r,t)Reading data from MD simulations treatments and plotting them\nSolution\n\n\nReligion and babiesData wrangling, ggplot2 and plotly\nSolution\n\n\nBulk modulusData wrangling, ggplot2 and fitting\nSolution\n\n\nNanoparticles statistics from SEM imagesData wrangling, ggplot2 and fitting\nSolution\n\n\nCOVID-19Data wrangling, ggplot2, fits\nSolution",
    "crumbs": [
      "<span class='chapter-number'>17</span>  <span class='chapter-title'>List of exercises</span>"
    ]
  },
  {
    "objectID": "code_bits.html",
    "href": "code_bits.html",
    "title": "Code bits",
    "section": "",
    "text": "Here I provide various code bits that I wrote for fun or for learning some aspects. It’s here for you if you are interested:\n\n\n2D Gaussian fits: a colleague coming from Matlab wanted to be able to fit 2D Gaussians from Raman mappings. It’s actually not too hard with nls() and a tidy tibble. The only thing is that the initial guess of peaks positions needs to be not very far from the actual peaks positions – you can either provide it by hand or make an automatic peak finder.\n\nFractals: I played around with the Mandelbrot set to make fractals, and compared a full-R code to a code using Rcpp (it was for me the occasion of my first code using Rcpp)… Rcpp wins (largely!) in terms of speed here! And it makes for suuuuuper nice images, too. I got inspiration from a R-bloggers post.\n\n\n\n\n\n\n\n\n\n\n\n\n\nFitting a Raman map\n\n\n\n\n\nA fractal showing the Mandelbrot set",
    "crumbs": [
      "Code bits"
    ]
  }
]
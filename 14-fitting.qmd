# Fitting

```{r include=FALSE, warning = FALSE, message=FALSE, cache=FALSE}
rm(list = ls())
library(ggplot2)
library(patchwork)
library(tidyverse)
library(latex2exp)
library(glue)
theme_set(theme_bw())
```

## What does it mean to "fit data"?

It might sound like a trivial question, but let's make sure we're all on the same page...

For the sake of the example, let's take a look at some experimental measurements of the oscillation period *T* of a pendulum^[[Wikipedia page on the pendulum.](https://en.wikipedia.org/wiki/Pendulum)]. We have measured this period for various lengths *L* of the pendulum, and it results in such an evolution:

```{r}
#| label: fig-somedata
#| fig-cap: "Some experimental data showing the period of a pendulum measured as a function of its length."
#| echo: FALSE
#| warning: FALSE
#| message: FALSE
period <- function(l,g){
    2*pi*sqrt(l/g)
}
df <- tibble(l = seq(.2,20,2),
             T = period(l,9.81) + 1*runif(length(l)),
             dT = .2+.1*runif(length(l))
             )
df |> 
    ggplot(aes(x = l, y = T)) +
       geom_point(alpha=0.5, size=2)+
       coord_cartesian(ylim=c(0,10))+
       geom_errorbar(aes(ymin=T-dT, ymax=T+dT), width=0)+
       labs(x= "Pendulum length L [m]",
            y= "Period [s]")
```

Now, if you recall your high school physics class, you might remember that the period of the pendulum *T* is given by:

$$
T \simeq 2\pi\sqrt{\frac{L}{g}},
$$ {#eq-period}

where *L* is the pendulum length and *g* the acceleration of gravity. Such and experimental design, *i.e.* measuring *T* as a function of *L*, is therefore a means to determining the value of *g*.

For this, we need to perform a **fit** of our experimental data by **a physical model**, *i.e.* the one of @eq-period. When doing so, one has to distinguish between:

- **Variables:** the period *T* and the pendulum length *L* are variables, they are the quantities that vary for a given parameter.
- **Parameters:** the gravity *g* is a parameter of the fit that we wish to determine, *i.e.* **it is a constant for this set of measurements**.

So now, what exactly *is* a fit? Fitting a model to experimental data means:

- **Finding the model** that best describe our data (a line, a Gaussian, a polynomial, @eq-period, etc.). You can try several models and compare them to determine which model is the best.
- **Finding the set of parameters** of the model that best describe our data. This is done through an optimization algorithm.

How do we know the parameters are the best ones to describe our data? For this, we use a tool called the residual error function, $\chi^2$, such as:

$$
\chi^2=\sum_{i=1}^N\left(y_i(x_i)-m_i(x_i, \{p\})\right)^2,
$$
where $y_i(x_i)$ are the *N* experimental observations of the value $y$ as a function of $x$, and $m_i(x_i, \{p\})$ is the value of the model as a function of $x$ and the ensemble of parameters $\{p\}$. We use the *squared* sum of residuals and not the simple sum of residuals because the residuals can either be positive or negative, and we are interested in minimizing the total distance from our model to our experimental data.

Applied to our pendulum problem, we thus get:

$$
\chi^2=\sum_{i=1}^N\left(T_i-2\pi\sqrt{\frac{L_i}{g}}\right)^2,
$$
where the summation is performed on the *N* points that we have recorded in @fig-somedata. In this case there is only one parameter, but you will encounter other models needing more than one parameter (for example if you're fitting a peak, you'll need it's position, width, and height: 3 parameters). The rule of thumb is that the less parameters you introduce the better, "less" being compared to the number of data points.

So, let's try a few values of *g* and see what is the resulting residual error $\chi^2$ in each case:

```{r}
#| label: fig-somedata-fitted
#| fig-cap: "Measuring the residual error $\\chi^2$ for different values of the parameter *g*. The distances from each experimental data point to the model (*i.e.* the residuals) are shown in blue. The sum of these squared residuals yields the residual error $\\chi^2$."
#| fig-height: 7
#| echo: FALSE
#| warning: FALSE
#| message: FALSE
fit <- df |> nls(data = _,
                 T~period(l,g),
                 start=list(g=10))
g <- as.numeric(round(coef(fit),3))

df$fit <- predict(fit)
fitted <- tibble(l=seq(0,20,.01),
                 T=period(l,g))
chi1   <- round(sum((df$fit-df$T)^2),3)
df$fit2 <- period(df$l, 7)
fitted2 <- tibble(l=seq(0,20,.01),
                  T=period(l,7))
chi2    <- round(sum((df$fit2-df$T)^2),3)
df$fit3 <- period(df$l, 11)
fitted3 <- tibble(l=seq(0,20,.01),
                  T=period(l,11))
chi3    <- round(sum((df$fit3-df$T)^2),3)
df$fit4 <- period(df$l, 6)
fitted4 <- tibble(l=seq(0,20,.01),
                  T=period(l,6))
chi4    <- round(sum((df$fit4-df$T)^2),3)

P1 <- df |> 
    ggplot(aes(x = l, y = T)) +
       geom_point(alpha=0.5, size=2)+
       coord_cartesian(ylim=c(0,10))+
       geom_line(data=fitted, color="red")+
       geom_segment(aes(xend=l, yend=fit), color="royalblue", linewidth=1)+
       labs(title = TeX(glue(r"(g = {g} m$^{2}$/s)")),
            subtitle = TeX(glue(r"($\chi^2= {chi1}$)")),
            x= "Pendulum length L [m]",
            y= "Period [s]")
P2 <- df |> 
    ggplot(aes(x = l, y = T)) +
       geom_point(alpha=0.5, size=2)+
       coord_cartesian(ylim=c(0,10))+
       geom_line(data=fitted2, color="red", alpha=.5, lty=2)+
       geom_segment(aes(xend=l, yend=fit2), color="royalblue", linewidth=1, alpha=.5)+
       labs(title = TeX(glue(r"(g = 7 m$^{2}$/s)")),
            subtitle = TeX(glue(r"($\chi^2= {chi2}$)")),
            x= "Pendulum length L [m]",
            y= "Period [s]")
P3 <- df |> 
    ggplot(aes(x = l, y = T)) +
       geom_point(alpha=0.5, size=2)+
       coord_cartesian(ylim=c(0,10))+
       geom_line(data=fitted3, color="red", alpha=.5, lty=2)+
       geom_segment(aes(xend=l, yend=fit3), color="royalblue", linewidth=1, alpha=.5)+
       labs(title = TeX(glue(r"(g = 11 m$^{2}$/s)")),
            subtitle = TeX(glue(r"($\chi^2= {chi3}$)")),
            x= "Pendulum length L [m]",
            y= "Period [s]")
P4 <- df |> 
    ggplot(aes(x = l, y = T)) +
       geom_point(alpha=0.5, size=2)+
       coord_cartesian(ylim=c(0,10))+
       geom_line(data=fitted4, color="red", alpha=.5, lty=2)+
       geom_segment(aes(xend=l, yend=fit4), color="royalblue", linewidth=1, alpha=.5)+
       labs(title = TeX(glue(r"(g = 6 m$^{2}$/s)")),
            subtitle = TeX(glue(r"($\chi^2= {chi4}$)")),
            x= "Pendulum length L [m]",
            y= "Period [s]")
P4+P2+P1+P3
```

We see that there is a sweet spot in the values of *g* for which $\chi^2$ is minimum:

```{r}
#| label: fig-somedata-fitted-chi
#| fig-cap: "Evolution of $\\chi^2$ as a function of *g*. The sweet spot is found for the red value."
#| fig-height: 4
#| echo: FALSE
#| warning: FALSE
#| message: FALSE
df$fit5 <- period(df$l, 8)
fitted5 <- tibble(l=seq(0,20,.01), T=period(l,8))
chi5    <- round(sum((df$fit5-df$T)^2),3)
df$fit6 <- period(df$l, 10)
fitted6 <- tibble(l=seq(0,20,.01), T=period(l,10))
chi6    <- round(sum((df$fit6-df$T)^2),3)
df$fit7 <- period(df$l, 9)
fitted7 <- tibble(l=seq(0,20,.01), T=period(l,9))
chi7    <- round(sum((df$fit7-df$T)^2),3)
X <- tibble(G=c(g,7,11,6,8,10,9),
            x2=c(chi1, chi2,chi3,chi4,chi5,chi6,chi7))
X |> 
    ggplot(aes(x = G, y = x2)) +
       geom_point(size=2)+
       geom_point(aes(x=g,y=chi1),size=4, color="red")+
       labs(x=expression(paste("g [",m^{2},"/s]")),
        y=expression(chi^2),
       )
```

::: {.callout-note}

## Important
Fitting a model to experimental data is finding this sweet spot for the ensemble of parameters through an optimization procedure.
:::

There are numerous algorithms out there to perform this optimization, but we will not delve into their mechanics. 

Now, let's get back to R. You will mainly use two functions to perform these optimizations:

- [When your experimental data follow a linear trend: `lm()`{.R}](#linear-fitting-with-lm)
- [The rest of the time: `nls()`{.R}](#nonlinear-least-squares-fitting)


::: {.callout-note}

## Important
Note that, whenever it is possible, it is usually preferable to make your problem a linear one, as it avoids the hassle of providing starting values.
For example, in the pendulum case above, taking the square of @eq-period results in a linear evolution of $T^2$ with respect to $l$.

:::



## Linear fitting with `lm()`

<!-- ### Single variable -->


Let's learn how to do simple linear fits with R's `lm()`{.R} and plot the results. Let's start with some fake data stored in a `tibble` called `d`:

```{r, warning=FALSE, echo=FALSE}
# Create some fake data
d <- tibble(x = 1:10,
            y = 1.5 + 0.22*x + .5*runif(10))
ggplot(d, aes(x = x, y = y)) +
    geom_point() +
    expand_limits(x = 0, y = 0)
```

We see that this data shows a linear evolution, for which we might want to extract the slope and the intercept. This is very simply done by applying the `lm()`{.R} function, like so:

```{r, warning=FALSE}
# Fit with a linear model:
# 3 equivalent ways of calling it
fit <- lm(data = d, y ~ x)
fit <- lm(d$y ~ d$x)
fit <- d |> lm(data=_, y ~ x)
```

Here, and everywhere else in R, the operator `~` is to be understood as "as a function of". So with this bit of code, we tell R to "fit y as a function of x using a linear model".

Now to see the fit results, we can just display `fit`, or call `summary(fit)`{.R}

```{r, warning=FALSE}
# Summary of the fit
fit
summary(fit)
```

To actually retrieve and store the fit parameters, call `coef(fit)`{.R}:
```{r, warning=FALSE}
# Retrieve the coefficients and errors
coef(fit)
coef(fit)[1]
```
To get it properly stored in a tibble, see the [`broom` package](#the-broom-library) that we describe later in this chapter:

```{r, warning=FALSE}
# Summary of the fit
broom::tidy(fit)
```

To get the standard error of the fitted parameters and the R^2^:
```{r, warning=FALSE}
summary(fit)$coefficients
summary(fit)$coefficients["x", "Std. Error"]
summary(fit)$r.squared
```

And finally, to plot the result of the fit:
```{r, warning=FALSE, message=FALSE}
# Get the fitted paramters and make a string with it to be printed
to_print <- glue("y = {round(coef(fit)[1],2)} + x*{round(coef(fit)[2],2)}")
# Base plot
plot(d, pch = 16, main = "With base plot", sub = to_print)
abline(coef(fit), col="red")
# GGplot versions
ggplot(data=d, aes(x,y)) + 
    geom_point(cex=3) +
    geom_abline(slope = coef(fit)[2], intercept = coef(fit)[1], col="red") +
    labs(title = "With ggplot and the parameters you get from the external call to lm()",
         subtitle = to_print)
ggplot(data=d, aes(x,y)) + 
    geom_point(cex=3) +
    geom_smooth(method="lm") + # does the fit but does not allow saving the parameters
    labs(title = "With ggplot and the geom_smooth() function",
         subtitle = to_print)
```

The function `geom_smooth()`{.R} will fit the data and display the fitted line, but to retrieve the actual coefficients you still need to run `lm()`{.R}.

Finally, you may want to impose an intercept that will be 0 or a given value. For this, you will need to add `+0` in the formula, like so:

```{r, warning=FALSE}
fit0 <- lm(data = d, y ~ x + 0) # intercept will be fixed in 0
fit1.5 <- lm(data = d, y - 1.5 ~ x + 0) # intercept will be fixed in 1.5
```

```{r warning=FALSE}
d |> ggplot(aes(x,y)) + 
    geom_point(cex=3) +
    geom_abline(slope = coef(fit0)[1], intercept = 0, col="red")+
    geom_abline(slope = coef(fit1.5)[1], intercept = 1.5, col="royalblue")+
    expand_limits(x = 0, y = 0)
```


## Nonlinear Least Squares fitting

### The `nls()` workhorse

You can fit data with your own functions and constraints using [`nls()`{.R}](https://www.rdocumentation.org/packages/stats/versions/3.6.2/topics/nls). Here is an example of data we may want to fit, stored into a tibble called `df`:


```{r, warning=FALSE, echo=FALSE}
# Create fake data
x  <- seq(-5,7,.1)
y  <- dnorm(x, sd = .5) + dnorm(x, mean=2, sd = 1) + runif(length(x))/10 - 0.05
df <- tibble(x=x, y=y)
```

```{r, warning=FALSE}
ggplot(data=df, aes(x,y))+
    geom_point()+
    ggtitle("Some fake data we want to fit with 2 Gaussians")
```

We first need to define a function to fit our data. We see here that it contains two peaks that look Gaussian, so let's go with the sum of two Gaussian functions:
```{r, warning=FALSE}
# Create a function to fit the data
myfunc <- function(x, y0, x1, x2, A1, A2, sd1, sd2) {
    y0 +                                # baseline
    A1 * dnorm(x, mean = x1, sd = sd1) +# 1st Gaussian
    A2 * dnorm(x, mean = x2, sd = sd2)  # 2nd Gaussian
}
# Fit the data using a user function
fit_nls <- nls(data=df,
               y ~ myfunc(x, y0, x1, x2, A1, A2, sd1, sd2),
               # Provide starting point for parameters values:
               start = list(y0=0, x1=0, x2=1.5, 
                            sd1=.2, sd2=.2, 
                            A1=1, A2=1) 
               )
summary(fit_nls)
```

And to plot the data and the result of the fit, we use `predict(fit)`{.R} to retrieve the fitted *y* values:
```{r, warning=FALSE}
# With base R
plot(x, y, pch=16)
lines(x, predict(fit_nls), col="red", lwd=2)
# With ggplot2
ggplot(data=df, aes(x,y))+
    geom_point(size=2, alpha=.5) +
    geom_line(aes(y = predict(fit_nls)), color="red", linewidth=1)
```

### Using constraints

In `nls()`{.R} it is even possible to constraint the fitting by adding lower and upper boundaries. These boundaries are useful when you want to give some physical meaning to your parameters, for example, like forcing the width and amplitude to be positive or above a certain minimum value. However, you have to be careful with these and not provide stupid ones, *e.g.*:

```{r, warning=FALSE}
# Constraining the upper and lower values of the fitting parameters
fit_constr <- nls(data = df,
                  y ~ myfunc(x, y0, x1, x2, A1, A2, sd1, sd2),
                  start = list(y0=0, x1=0, x2=3, 
                               sd1=.2, sd2=.2, A1=1, A2=1),
                  upper = list(y0=Inf, x1=Inf, x2=Inf, 
                               sd1=Inf, sd2=Inf, A1=2, A2=2),
                  lower = list(y0=-Inf, x1=-Inf, x2=2.9, 
                               sd1=0, sd2=0, A1=0, A2=0),
                  algorithm = "port"
                 )
# Plotting the resulting function in blue
ggplot(data=df, aes(x,y))+
    ggtitle("Beware of bad constraints!")+
    geom_point(size=2, alpha=.5) +
    geom_line(aes(y = predict(fit_constr)), color="royalblue", linewidth=1)
```


### A more robust version of `nls`

Sometimes, `nls()`{.R} will struggle to converge towards a solution, especially if you provide initial guesses that are too far from the expected values.

```{r warning=FALSE, message=FALSE, error=TRUE}
fit3 <- nls(data = df,
            y ~ myfunc(x, y0, x1, x2, A1, A2, sd1, sd2),
            start = list(y0 = 0, x1 = 1, x2 = 5, 
                         sd1 = .2, sd2 = .2, A1 = 10, A2 = 10)
            )
```

In that case, you may want to use a more robust `nls()`{.R} function such as `nlsLM()`{.R} from the `minpack.lm`{.R} package.

```{r warning=FALSE, message=FALSE}
library(minpack.lm)
fit_nlsLM <- nlsLM(data = df,
                   y ~ myfunc(x, y0, x1, x2, A1, A2, sd1, sd2),
                   start = list(y0 = 0, x1 = 1, x2 = 5, 
                                sd1 = .2, sd2 = .2, A1 = 10, A2 = 10)
                   )
summary(fit_nlsLM)
```

Also, `nlsLM()`{.R} won't fail when the fit is exact, whereas `nls()`{.R} will:
```{r warning=FALSE, message=FALSE, error=TRUE}
testdf <- tibble(x = seq(-10,10),
                 y = dnorm(x))
nls(data = testdf,
    y ~ A*dnorm(x, sd=B, mean=x0) + y0,
    start = list(y0=0, x0=0, A=1, B=1)
    )
nlsLM(data = testdf,
    y ~ A*dnorm(x, sd=B, mean=x0) + y0,
    start = list(y0=0, x0=0, A=1, B=1)
    )
```

## The broom library


Thanks to the [`broom`](https://cran.r-project.org/web/packages/broom/vignettes/broom.html) library, it is easy to retrieve all the fit parameters in a `tibble`{.R}:

```{r include=TRUE, warning = FALSE, message=FALSE, cache=FALSE}
library(broom)
# Get all parameters and their error
tidy(fit_nls)
# Get the fitted curve and residuals next to the original data
augment(fit_nls)
```

It is then easy to make a recursive fit on your data without using a `for loop`{.R}, like so:

```{r include=TRUE, warning = FALSE, message=FALSE, cache=FALSE, error=TRUE}
library(broom)
library(tidyverse)
library(ggplot2)
theme_set(theme_bw())
# Create fake data
a <- seq(-10,10,.1)
centers <- c(-2*pi,pi,pi/6)
widths  <- runif(3, min=0.5, max=1)
amp     <- runif(3, min=2, max=10)
noise   <- .3*runif(length(a))-.15
d <- tibble(x=rep(a,3),
            y=c(amp[1]*dnorm(a,mean=centers[1],sd=widths[1])+sample(noise),
                amp[2]*dnorm(a,mean=centers[2],sd=widths[2])+sample(noise),
                amp[3]*dnorm(a,mean=centers[3],sd=widths[3])+sample(noise)),
            T=rep(1:3, each=length(a))
            )
# Plot the data
d |> ggplot(aes(x=x, y=y, color=factor(T))) + 
    geom_point()
# Fit all data
d_fitted <- d |> 
    nest(data = -T) |>
    mutate(fit = map(data, ~ nls(data = .,
                     y ~ y0 + A*dnorm(x, mean=x0, sd=FW), 
                     start=list(A  = max(.$y),
                                y0 = .01, 
                                x0 = .$x[which.max(.$y)], 
                                FW = .7)
                     )),
           tidied = map(fit, tidy),
           augmented = map(fit, augment)
          )
d_fitted
```

In case you want to provide fit parameters that vary depending on the group you are looking at, use the notation `.$column_name`{.R}, like is done here.

Then you can see the results for all your data at once:

```{r include=TRUE, warning = FALSE, message=FALSE, cache=FALSE, error=TRUE}
# data and fit resulting curve
d_fitted |> 
  unnest(augmented)
# fit parameters
d_fitted |> 
  unnest(tidied)
# fit parameters as a wide table
d_fitted |> 
  unnest(tidied) |> 
  select(T, term, estimate, std.error) |> 
  pivot_wider(names_from = term, 
              values_from = c(estimate,std.error))
# plot fit result
d_fitted |> 
    unnest(augmented) |> 
    ggplot(aes(x=x, color=factor(T)))+
        geom_point(aes(y=y), alpha=0.5, size=3) + 
        geom_line(aes(y=.fitted))
# plot fit parameters
d_fitted |> 
  unnest(tidied) |> 
  ggplot(aes(x=T, y=estimate, color=term))+
    geom_point()+
    geom_errorbar(aes(ymin=estimate-std.error,
                      ymax=estimate+std.error),
                  width=.1)+
    facet_wrap(~term, scales="free_y")+
    theme(legend.position = "none")
```






## Exercises {#exo-fits}

Download the exercises and solutions from the following repositories, then create a Rstudio project from the unzipped folder:

- [Beginner exercises](https://github.com/colinbousige/R1-beginner)
- [Avanced exercises](https://github.com/colinbousige/R2-advanced)
- [GGplot2 exercises](https://github.com/colinbousige/R3-ggplot2)

---

<details>
    <summary>**Exercise 1**</summary>

- Load <a href="Data/exo_fit.txt" download target="_blank">exo_fit.txt</a> in a `tibble`{.R}.
- Using `lm()`{.R} or `nls()`{.R} fit each column as a function of `x` and display the "experimental" data and the fit on the same graph.
    + Tip: Take a look at the function `dnorm()`{.R} to define a Gaussian


```{r, include=FALSE}
x <- seq(0.2,10,.2)
y <- 4*x+6+runif(length(x))*5
z <- 10*dnorm(x, mean=4.1,sd=0.52)+runif(length(x)) - .5
w <- x^3.1+200*runif(length(x))/2
u <- log(x/2) + runif(length(x)) / 5
s <- exp(-x/2) + runif(length(x)) / 10
df <- tibble(x = x, y = y, z = z, w = w, u = u, s = s)
# plot(df$x, df$s)
# plot(df$x, log(df$s))
# lm(data=df, exp(u) ~ x)
write_tsv(df, "Data/exo_fit.txt")
```


</details>

<details>
    <summary>**Exercise 2**</summary>

- Load the `tidyverse` library.
- Define a function `norm01(x)`, that, given a vector `x`, returns this vector normalized to [0,1].
- Load the Raman spectrum <a href="Data/rubis_01.txt" download target="_blank">rubis_01.txt</a>, normalize it to [0,1] and plot it
- Define the normalized Lorentzian function `Lorentzian(x, x0, FWHM)`, defined by $L(x, x_0, FWHM)=\frac{FWHM}{2\pi}\frac{1}{(FWHM/2)^2 + (x-x_0)^2}$
- Guess grossly the initial parameters and plot the resulting curve as a blue dashed line
- Fit the data by a sum of 2 Lorentzians using `nls()`{.R}
- Add the result on the plot as a red line
- Add the 2 Lorentzian components as area-filled curves with `alpha=0.2`{.R} and two different colors


<details>
    <summary>Solution</summary>

```{r, warning=FALSE, error=TRUE}
# Load the `tidyverse` library.
library(tidyverse)
# Define a function `norm01(x)`, that, given a vector `x`, returns this vector normalized to [0,1].
norm01 <- function(x) {(x-min(x))/(max(x)-min(x))}
# Load rubis_1.txt, normalize it to [0,1] and plot it
d <- read_table("Data/rubis_01.txt", col_names=c("w", "Int")) |> 
    mutate(Int_n = norm01(Int))
P <- d |>
    ggplot(aes(x=w, y=Int_n))+
        geom_point(alpha=0.5)
P
# Define the Lorentzian function
Lorentzian <- function(x, x0=0, FWHM=1){
    FWHM / (2*pi) / ((FWHM/2)^2 + (x - x0)^2)
}
# Guess grossly the initial parameters and plot the resulting curve as a blue dashed line
P+geom_line(aes(y = 0.03 + 
                    3*Lorentzian(w, x0=3160, FWHM=10) +
                    7*Lorentzian(w, x0=3210, FWHM=10)),
            col="blue", lty=2)
# Fit the data by a sum of 2 Lorentzians using `nls`
fit <- nls(data=d, 
           Int_n ~ y0 + A1*Lorentzian(w,x1,FWHM1) + A2*Lorentzian(w,x2,FWHM2), 
           start=list(y0=0.03,
                      x1=3160, FWHM1=10, A1=3,
                      x2=3200, FWHM2=10, A2=7))
summary(fit)
# Add the result on the plot as a red line
P + geom_line(aes(y=.03 + 
                    3*Lorentzian(w, x0=3160, FWHM=10) +
                    7*Lorentzian(w, x0=3210, FWHM=10)),
            col="blue", lty=2)+
    geom_line(aes(y=predict(fit)), col="red")
# Add the 2 Lorentzian components as area-filled curves with `alpha=0.2` and two different colors
y0  <- coef(fit)['y0']
A1  <- coef(fit)['A1'];   A2   <- coef(fit)['A2']
x1  <- coef(fit)['x1'];   x2   <- coef(fit)['x2']
FW1 <- coef(fit)['FWHM1']; FW2 <- coef(fit)['FWHM2']
P + geom_line(aes(y=.03 + 
                    3*Lorentzian(w, x0=3160, FWHM=10) +
                    7*Lorentzian(w, x0=3210, FWHM=10)),
            col="blue", lty=2)+
    geom_line(aes(y = predict(fit)), col="red")+
    geom_area(aes(y = A1*Lorentzian(w, x0=x1, FWHM=FW1)), 
                fill="royalblue", alpha=.2)+
    geom_area(aes(y = A2*Lorentzian(w, x0=x2, FWHM=FW2)), 
                fill="orange", alpha=.2)
```

</details>
</details>

<details>
    <summary>**Exercise 3**</summary>

- Create an `Exercise_fit` folder, and create an Rstudio project linked to this folder
- <a href="Data/data_xp/xpdata.zip" target="_blank" download>Download</a> the corresponding data files and unzip them in a folder called `Data`.
- Create a new .R file in which you will write your code and save it.
- Like in the previous exercise, we will fit ruby Raman spectra, but we will do it on many files at once. First, using `list.files()`, save in `flist` the list of ruby files in the `Data` folder.
- Define the `Lorentzian(x, x0, FWHM)` function
- Define the `norm01(x)` function returning the vector x normalized to [0,1]
- Create a `read_ruby(filename)` function that, given a file name `filename`, reads the file into a tibble, gives the proper column names, normalizes the intensity to [0,1], and returns the tibble.
- Create a `fitfunc(tib)` function that, given a tibble `tib`, fits this tibble's *y* values as a function of the *x* values using the sum of two Lorentzians, and returns the `nls()` fit result. Make sure to provide "clever" starting parameters, especially for the positions of the two peaks. For example, one peak is where the spectrum maximum is, and the other one is always at an energy roughly 30 cm^-1^ lower.
- Using pipe operations and `map()`, recursively:
    - Create a tibble with only one column called `file`, which contains the list of file names `flist`.
    - Create a column `data` containing a list of all read files, obtained by mapping `read_ruby()` onto `flist`.
    - Create a column `fit` containing a list of `nls()` objects, obtained by mapping `fitfunc()` onto the list (column) `data`
    - Create a column `tidied` containing a list of tidied `nls()` tibbles, obtained by mapping `bbroom::tidy()` onto the list (column) `fit`
    - Create a column `augmented` containing a list of augmented `nls()` tibbles, obtained by mapping `bbroom::augment()` onto the list (column) `fit`
    - Turn the `file` column into `run` that will contain the run number (*i.e.* the number in the file name) as a numeric value. Use the function `separate()`{.R} to do so.
- Plot all the experimental data and the fit with black points and red lines into a faceted plot. Play with various ways of plotting this, like a ridge or slider plot.
- Plot the evolution of all fitting parameters as a function of the run number.
- Plot the evolution of the position of the higher energy peak as a function of the file name.
- Fit linearly the evolution of the higher intensity peaks with respect to the run number. Display the fitted parameters and R^2^. Plot the fit as a red line. Make sure to use proper weighing for the fit.

<details>
    <summary>Solution</summary>

```{r, warning=FALSE}
# - Using `list.files()`, save in `flist` the list of ruby files in the `Data` folder.
flist <- list.files(path = "Data", pattern = "rubis", full.names = TRUE)
# - Define the `Lorentzian(x, x0, FWHM)` function
Lorentzian <- function(x, x0 = 0, FWHM = 1) {
    2 / (pi * FWHM) / (1 + ((x - x0) / (FWHM / 2))^2)
}
# - Define the `norm01(x)` function returning the vector x normalized to [0,1]
norm01 <- function(x) {
    (x - min(x)) / (max(x) - min(x))
}
# - Create a `read_ruby(filename)` function that, given a file name `filename`, 
# reads the file into a tibble, gives the proper column names, normalizes the 
# intensity to [0,1], and returns the tibble.
read_ruby <- function(filename){
    read_table(filename, col_names = c("w", "Int")) |> 
        mutate(Int = norm01(Int))
}
# - Create a `fitfunc(tib)` function that, given a tibble `tib`, fits this 
# tibble's *y* values as a function of the *x* values using the sum of two Lorentzians, 
# and returns the `nls()` fit result. Make sure to provide "clever" starting parameters, 
# especially for the positions of the two peaks. For example, one peak is where 
# the spectrum maximum is, and the other one is always at an energy roughly 30 cm^-1^ lower.
fitfunc <- function(tib){
    nls(data=tib,
        Int ~ y0 + A1*Lorentzian(w,x1,FWHM1)+
                   A2*Lorentzian(w,x2,FWHM2), 
           start=list(y0=0.03,
                      x1=tib$w[which.max(tib$Int)] - 30, 
                      FWHM1=10, 
                      A1=max(tib$Int)*10,
                      x2=tib$w[which.max(tib$Int)], 
                      FWHM2=10, 
                      A2=max(tib$Int)*10)
        )
}
# Test it:
# df <- read_ruby(flist[1])
# fitfunc(df)
# 
# - Using pipe operations and `map()`, recursively:
#     - Create a tibble with only one column called `file`, which contains the 
#       list of file names `flist`.
#     - Create a column `data` containing a list of all read files, 
#       obtained by mapping `read_ruby()` onto `flist`.
#     - Create a column `fit` containing a list of `nls()` objects, 
#       obtained by mapping `fitfunc()` onto the list (column) `data`
#     - Create a column `tidied` containing a list of tidied `nls()` tibbles, 
#       obtained by mapping `bbroom::tidy()` onto the list (column) `fit`
#     - Create a column `augmented` containing a list of augmented `nls()` tibbles, 
#       obtained by mapping `bbroom::augment()` onto the list (column) `fit`
#     - Turn the `file` column into `run` that will contain the run number 
#       (*i.e.* the number in the file name) as a numeric value. 
#       Use the function `separate()`{.R} to do so.
data <- tibble(file=flist) |> 
    mutate(data = map(file, read_ruby),
           fit = map(data, fitfunc),
           tidied = map(fit, tidy),
           augmented = map(fit, augment)
           ) |> 
    separate(file, c(NA, NA, "run", NA), convert = TRUE)
# - Plot all the experimental data and the fit with black points and red lines 
# into a faceted plot. Play with various ways of plotting this, 
# like a ridge or slider plot.
data |> 
    unnest(augmented) |> 
    ggplot(aes(x = w, y = Int)) +
       geom_point(alpha=0.5)+
       geom_line(aes(y=.fitted), col="red")+
       facet_wrap(~run)
data |> 
    unnest(augmented) |> 
    ggplot(aes(x = w, y = Int + as.numeric(factor(run)), group=run)) +
       geom_point(alpha=0.5)+
       geom_line(aes(y = .fitted + as.numeric(factor(run))), col = "red")
P <- data |>
    unnest(augmented) |>
    ggplot(aes(x = w, y = Int, frame=run)) +
        geom_point(alpha = 0.5) +
        geom_line(aes(y = .fitted), col = "red")
library(plotly)
ggplotly(P, dynamicTicks = TRUE) |> 
    animation_opts(5)|>
    layout(xaxis = list(autorange=FALSE, range = c(3050, 3550)))
# - Plot the evolution of all fitting parameters as a function of the run number.
data |>
    unnest(tidied) |> 
    ggplot(aes(x = run, y = estimate)) +
        geom_point()+
        facet_wrap(~term, scales = "free")+
        geom_errorbar(aes(ymin = estimate - std.error,
                          ymax = estimate + std.error),
                      width=0.5)
# - Plot the evolution of the position of the higher intensity peaks.
data |>
    unnest(tidied) |> 
    filter(term == "x1") |> 
    ggplot(aes(x = run, y = estimate)) +
        geom_point()+
        geom_errorbar(aes(ymin = estimate - std.error,
                          ymax = estimate + std.error),
                      width=0.5)
# - Fit linearly the evolution of the higher intensity peaks with respect to the 
#   run number. Display the fitted parameters and R^2^.Plot the fit as a red line. 
#   Make sure to use proper weighing for the fit.
lmfit <- data |>
    unnest(tidied) |>
    filter(term == "x1") |> 
    lm(data=_, 
       estimate ~ run, 
       weights = 1/std.error^2)
tidy(lmfit)
glance(lmfit)
data |>
    unnest(tidied) |> 
    filter(term == "x1") |> 
    ggplot(aes(x = run, y = estimate)) +
        geom_point()+
        geom_errorbar(aes(ymin = estimate - std.error,
                          ymax = estimate + std.error),
                      width=0.5)+
        geom_line(aes(y = predict(lmfit)), col="red")
```

</details>
</details>




<br>
<br>
<br>
<br>
<br>




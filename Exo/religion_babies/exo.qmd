---
title    : "R Exercises - Religion and babies"
author   : "Your Name"
date     : today
format: 
  html:
    toc                   : true
    theme                 : cosmo
    page-layout           : full
    linkcolor             : "#3d54cb"
    code-link             : true
    code-tools            : true
    code-copy             : true
    code-block-border-left: true
    code-block-bg         : true
    self-contained        : true
execute: 
    warning: false
    message: false
    cache: false
    fig-align: "center"
---

In these exercises we will see the power of the libraries `ggplot2` and `plotly` to make sense of statistical data. The goal is to reproduce the moving chart that you can see in this video from Hans Rosling -- I invite you to watch his other videos, they are quite enlightening and inspiring:

<div style="text-align: center;">
<a href="https://www.ted.com/talks/hans_rosling_religions_and_babies?language=en" target="_blank">
<i class="fab fa-youtube fa-5x"></i>
</a>
</div>

<br>
<br>

For this, we will need to gather the data:

- From [Gapminder](https://www.gapminder.org/data/), data per country and per year from 1800 to 2018:
    - [The children per woman total fertility](Data/children_per_woman_total_fertility.csv)
    - [The income per capita](Data/income_per_person_gdppercapita_ppp_inflation_adjusted.csv)
    - [The total population](Data/population_total.csv)
- From the [PEW research center](https://www.pewforum.org/2015/04/02/religious-projection-table/2010/percent/all/), data per country:
    + [The religious composition](Data/religion.csv)

------- 

# Data handling

The first thing to do is to load and regroup all these datasets into a single one.

1. Load the `tidyverse` library and, using `read_csv()`{.R}, load the 4 datasets in 4 separate tibbles called `children`, `income`, `pop` and `religion`.

```{r}
# YOUR CODE HERE
```

2. To reproduce the chart on the video, we need to determine the dominant religion in each country. In the `religion` dataset, add a column `Religion` that will give the name of the dominant religion for each country. For this, you need to make the table contain just the `Country` and all religions, make the table tidy, and then select the religion with the highest proportion for each country. We will filter the data to get only the year 2020.

```{r}
# YOUR CODE HERE
```

3. Using `pivot_longer()`{.R}, make all datasets tidy. 

- `children` should now contain 3 columns: `Country`, `Year` and `Fertility`. 
- `income` should now contain 3 columns: `Country`, `Year` and `Income`. 
- `pop` should now contain 3 columns: `Country`, `Year` and `Population`. 

We will only consider data from 1900 to 2018. Example of syntax using the pipe operator `|>`:

```{r}
DF <- read_table("name  2010  2011  2012  2014
Kevin  10    11   12   123
Jane   122   56   23   4
"
)
DF
DF |> 
    select(name, '2010':'2012') |> 
    pivot_longer(col             = -name,
                 names_to        = "Year", 
                 values_to       = "Score",
                 names_transform = list(Year = as.numeric))
```
The line `names_transform = list(Year = as.numeric)`{.R} is here to convert the character year values to numerical values.

```{r}
# YOUR CODE HERE
```

4. Now we want to combine all these datasets into a single one called `dat`, containing the columns `Country`, `Year`, `Population`, `Religion`, `Fertility` and `Income`. Look into the `inner_join()`{.R} function of the `dplyr` library (which is part of the `tidyverse` library). 

```{r}
# YOUR CODE HERE
```

You should end up with a dataset like this one:

```{r echo=FALSE}
dat
```

In case you struggled to get there, download the archive with the button at the top and get the `dat` tibble with `dat <- read_csv("Data/dat.csv")`{.R}.

Now our dataset is ready, let's plot it.

# Plotting

1. Load the library `ggplot2` and set the global theme to `theme_bw()`{.R} using `theme_set()`{.R}

```{r}
# YOUR CODE HERE
```

2. Create a subset of `dat` concerning your origin country. For me it will be `dat_france`

```{r}
# YOUR CODE HERE
```

3. Plot the evolution of the income per capita and the number of children per woman as a function of the years, and make it look like that (notice the kinks during the two world wars):

```{r}
# YOUR CODE HERE
```

4. Create a subset of `dat` containing the data for your country plus all the neighbor countries (if you come from an island, the nearest countries...). For me, `dat_france_region` will contain data from France, Spain, Italy, Switzerland, Germany, Luxembourg and Belgium.

```{r}
# YOUR CODE HERE
```

5. Plot again income and fertility as a function of the years, but add a color corresponding to the country and a point size to its population:

```{r}
# YOUR CODE HERE
```

6. Load the library `plotly` and make the previous graphs interactive. You can make an interactive graph by calling `ggplotly()`{.R}, like that:

```{r include=TRUE}
# library(plotly)
# P <- ggplot(data = dat_france, aes(x=Population, y=Income))+
#         geom_point()
# ggplotly(P, dynamicTicks=TRUE)
```


7. Finally, you can add a slider to the interactive graph allowing selecting a value for another variable (just like in the video) by adding the keyword `frame =` in the chart's aesthetics. So now, make the graph of the video ! (you can also add the aesthetics `id=Country` to show the country name in the popup when hovering on a point).

Optionally, you can try working with the `gganimate` library to make an animated graph. [Here](https://www.datanovia.com/en/blog/gganimate-how-to-create-plots-with-beautiful-animation-in-r/) is a tutorial to get you started.


```{r}
# YOUR CODE HERE
```

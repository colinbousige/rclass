# Conditional actions and loops


## Conditional actions

Conditional actions in R can be determined through the usual `if then else`{.R} statements:
```{r}
x <- 1; y <- 2
if(x>y){
    print("x is larger than y")
}else if(x<y){
    print("x is smaller than y")
}else{
    print("x is equal to y")
}
```

Sometimes, it's usefull to be able to do this in one line using `ifelse(test, yes, no)`{.R}:
```{r}
x <- 3:7
ifelse(x>5, "larger than 5", "lower than 5") 
```


## Loops...

Loops in R are provided through the usual `for`{.R} and `while`{.R} keywords:

```{r}
# For loop
for(i in 1:100){
    # pass to next index directly
    if(i %in% c(3,8,5)) next 
    # break loop
    if(i==10) break
    print(i)
}
phrase <- c("hello", "world")
for(word in phrase){
    print(word)
}
# While loop
i <- 1
while(i<8){
    print(i)
    i <- i+2
}
```

## ... and how to avoid them


However, since R is a vectorized language, it means that loops are to be avoided when possible because they are very inefficient:

```{r}
forloop <- function(x){
    for(i in seq_along(x)){
        x[i] <- 2*x[i]
    }
    x
}
noforloop <- function(x){
    2*x
}
x <- runif(1e7)
microbenchmark::microbenchmark(
    forloop   = forloop(x),
    noforloop = noforloop(x),
    times = 10L
)
```

### The `apply` family

Avoiding loops should therefore be sought for when possible. R helps us in this way through the base functions `apply()`{.R}, `sapply()`{.R} and `lapply()`{.R}. [Operations in the `tidyverse`{.R}](#operations-in-the-tidyverse) are also a very good way of avoiding loops. 

Take a look at the help on these functions, but the summary is that `apply(df, direction, function)`{.R} applies a function in the wanted direction (1 for rows, 2 for columns) of the given `data.frame`{.R} (or vector). Example:

```{r, message=FALSE}
library(tibble)
dt <- tibble(x=1:5, y=x^2, z=x^3);dt
apply(dt, 1, mean) # mean of the rows
apply(dt, 2, mean) # mean of the columns
# row/column means
rowMeans(dt)
colMeans(dt)
```

`lapply()`{.R} (and equivalently, `sapply()`{.R}) is basically the same thing but applied to lists and it returns a list (a vector):
```{r}
my_list <- list(dt/3, dt/5);my_list
lapply(my_list, "[", 1, )  # print first row
sapply(my_list, rowSums)   # sum on rows
lapply(my_list, round, 1)  # round to first decimal
# For more complex operations, use it this way:
sapply(1:nrow(dt), function(i){
    dt$x[i] + dt$y[(i+2)%%nrow(dt)+1] - dt$z[(i+4)%%nrow(dt)+1]
})
```

### The `tidyverse` way

The package `tidyverse` offers numerous ways to avoid explicit `for` loops. To see how to do this, refer to the section on [operations in the `tidyverse`{.R}](#operations-in-the-tidyverse).


## Exercises {#exo-loops}

<details>
    <summary>**Exercise 1**</summary>

Given `x <- runif(1e3, min=-1, max=1)`{.R}, create a `tibble`{.R} like this one:

```{r, echo=FALSE}
tibble(x = runif(1e3, min=-1, max=1), 
       y = ifelse(x>0, "x>0", "x<=0"))
```


</details>

<details>
    <summary>**Exercise 2**</summary>

Given:

```r
LL <- list(A = runif(1e2),
           B = rnorm(1e3),
           C = data.frame(x=runif(1e2), y=runif(1e2))
           )
```

Print the sum of each element of `LL` in a list, in a vector.

<details>
    <summary>Solution</summary>

```{r, warnings=FALSE}
LL <- list(A = runif(1e2),
           B = rnorm(1e3),
           C = data.frame(x=runif(1e2), y=runif(1e2))
           )
lapply(LL, sum)
unlist(lapply(LL, sum)); sapply(LL, sum)
```

</details>
</details>

<details>
    <summary>**Exercise 3**</summary>

- Download <a href="Data/population.csv" download target="_blank">population.csv</a> and load it into a `data.frame`{.R}
- What is the total population over the years?
- What is the mean population for each city?


<details>
    <summary>Solution</summary>

```{r}
# Download population.csv and load it into a `data.frame`
df <- read.csv("Data/population.csv")
# What is the total population over the years?
data.frame(year=df[,"year"],
           pop =rowSums(df[,-1]),     # a first way
           pop2=apply(df[,-1], 1, sum)# another way
          )
# A tidy-compatible version 
library(tidyverse)
popul <- pivot_longer(df, cols=-year, names_to="city", values_to="pop")
popul %>%
  group_by(year) %>%
  summarise(totpop = sum(pop))
# or equivalently
summarise(group_by(popul, year), totpop = sum(pop))
# What is the mean population for each city?
apply(df[,-1], 2, mean)
popul %>%
  group_by(city) %>%
  summarise(avepop = mean(pop))
```

</details>
</details>


<br>
<br>
<br>
<br>
<br>


